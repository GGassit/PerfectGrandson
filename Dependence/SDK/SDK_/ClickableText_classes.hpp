#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ClickableText

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "EClickableTextEffectType_structs.hpp"
#include "EClickableTextAdditionalEffect_structs.hpp"
#include "Slate_structs.hpp"
#include "WBP_WidgetBase_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass ClickableText.ClickableText_C
// 0x0138 (0x03B0 - 0x0278)
class UClickableText_C final : public UWBP_WidgetBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0278(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UButton*                                Button;                                            // 0x0280(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class URetainerBox*                           PostProcess;                                       // 0x0288(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock;                                         // 0x0290(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   Text;                                              // 0x0298(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	FMulticastInlineDelegateProperty_             OnClick;                                           // 0x02B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FSlateColor                            DefaultColor;                                      // 0x02C0(0x0014)(Edit, BlueprintVisible, ExposeOnSpawn)
	struct FSlateColor                            SelectedColor;                                     // 0x02D4(0x0014)(Edit, BlueprintVisible, ExposeOnSpawn)
	struct FSlateFontInfo                         Font;                                              // 0x02E8(0x0058)(Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash)
	EClickableTextEffectType                      HoverEffect;                                       // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_2839[0x7];                                     // 0x0341(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MinEffectPower;                                    // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        EffectPower;                                       // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        EffectAdditionalPower;                             // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	EClickableTextAdditionalEffect                AdditionalEffect;                                  // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_283A[0x7];                                     // 0x0361(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AdditionalEffectPower;                             // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         ColorAnimationSpeed;                               // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         EffectAnimationSpeed;                              // 0x0374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               GlitchMaterial;                                    // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	ETextJustify                                  Justification;                                     // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_283B[0x7];                                     // 0x0381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              TextCenter;                                        // 0x0388(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hovered;                                           // 0x0398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_283C[0x3];                                     // 0x0399(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AdEffectAnimationSpeed;                            // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          OverridenHovered;                                  // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_283D[0x3];                                     // 0x03A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TextTag;                                           // 0x03A4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void SetButtonParams(const class FText& Param_Text, const struct FSlateColor& Param_DefaultColor, const struct FSlateColor& Param_SelectedColor, EClickableTextEffectType Param_HoverEffect, ETextJustify Param_Justification);
	void RetainerEffects();
	void PreConstruct(bool IsDesignTime);
	void OnClick__DelegateSignature(class UClickableText_C* Param_Text);
	void ExecuteUbergraph_ClickableText(int32 EntryPoint);
	void Construct();
	void ColorEffects();
	void ChangeText(const class FText& Param_Text);
	void BndEvt__ClickableText_Button_K2Node_ComponentBoundEvent_2_OnButtonHoverEvent__DelegateSignature();
	void BndEvt__ClickableText_Button_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature();
	void BndEvt__ClickableText_Button_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
	void AdditionalEffects();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ClickableText_C">();
	}
	static class UClickableText_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UClickableText_C>();
	}
};
static_assert(alignof(UClickableText_C) == 0x000008, "Wrong alignment on UClickableText_C");
static_assert(sizeof(UClickableText_C) == 0x0003B0, "Wrong size on UClickableText_C");
static_assert(offsetof(UClickableText_C, UberGraphFrame) == 0x000278, "Member 'UClickableText_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UClickableText_C, Button) == 0x000280, "Member 'UClickableText_C::Button' has a wrong offset!");
static_assert(offsetof(UClickableText_C, PostProcess) == 0x000288, "Member 'UClickableText_C::PostProcess' has a wrong offset!");
static_assert(offsetof(UClickableText_C, TextBlock) == 0x000290, "Member 'UClickableText_C::TextBlock' has a wrong offset!");
static_assert(offsetof(UClickableText_C, Text) == 0x000298, "Member 'UClickableText_C::Text' has a wrong offset!");
static_assert(offsetof(UClickableText_C, OnClick) == 0x0002B0, "Member 'UClickableText_C::OnClick' has a wrong offset!");
static_assert(offsetof(UClickableText_C, DefaultColor) == 0x0002C0, "Member 'UClickableText_C::DefaultColor' has a wrong offset!");
static_assert(offsetof(UClickableText_C, SelectedColor) == 0x0002D4, "Member 'UClickableText_C::SelectedColor' has a wrong offset!");
static_assert(offsetof(UClickableText_C, Font) == 0x0002E8, "Member 'UClickableText_C::Font' has a wrong offset!");
static_assert(offsetof(UClickableText_C, HoverEffect) == 0x000340, "Member 'UClickableText_C::HoverEffect' has a wrong offset!");
static_assert(offsetof(UClickableText_C, MinEffectPower) == 0x000348, "Member 'UClickableText_C::MinEffectPower' has a wrong offset!");
static_assert(offsetof(UClickableText_C, EffectPower) == 0x000350, "Member 'UClickableText_C::EffectPower' has a wrong offset!");
static_assert(offsetof(UClickableText_C, EffectAdditionalPower) == 0x000358, "Member 'UClickableText_C::EffectAdditionalPower' has a wrong offset!");
static_assert(offsetof(UClickableText_C, AdditionalEffect) == 0x000360, "Member 'UClickableText_C::AdditionalEffect' has a wrong offset!");
static_assert(offsetof(UClickableText_C, AdditionalEffectPower) == 0x000368, "Member 'UClickableText_C::AdditionalEffectPower' has a wrong offset!");
static_assert(offsetof(UClickableText_C, ColorAnimationSpeed) == 0x000370, "Member 'UClickableText_C::ColorAnimationSpeed' has a wrong offset!");
static_assert(offsetof(UClickableText_C, EffectAnimationSpeed) == 0x000374, "Member 'UClickableText_C::EffectAnimationSpeed' has a wrong offset!");
static_assert(offsetof(UClickableText_C, GlitchMaterial) == 0x000378, "Member 'UClickableText_C::GlitchMaterial' has a wrong offset!");
static_assert(offsetof(UClickableText_C, Justification) == 0x000380, "Member 'UClickableText_C::Justification' has a wrong offset!");
static_assert(offsetof(UClickableText_C, TextCenter) == 0x000388, "Member 'UClickableText_C::TextCenter' has a wrong offset!");
static_assert(offsetof(UClickableText_C, Hovered) == 0x000398, "Member 'UClickableText_C::Hovered' has a wrong offset!");
static_assert(offsetof(UClickableText_C, AdEffectAnimationSpeed) == 0x00039C, "Member 'UClickableText_C::AdEffectAnimationSpeed' has a wrong offset!");
static_assert(offsetof(UClickableText_C, OverridenHovered) == 0x0003A0, "Member 'UClickableText_C::OverridenHovered' has a wrong offset!");
static_assert(offsetof(UClickableText_C, TextTag) == 0x0003A4, "Member 'UClickableText_C::TextTag' has a wrong offset!");

}

