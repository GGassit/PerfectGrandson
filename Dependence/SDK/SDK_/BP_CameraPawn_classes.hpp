#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CameraPawn

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CameraPawn.BP_CameraPawn_C
// 0x0040 (0x0358 - 0x0318)
class ABP_CameraPawn_C final : public APawn
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0318(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       Collision;                                         // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCineCameraComponent*                   CineCamera;                                        // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm;                                         // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFloatingPawnMovement*                  FloatingPawnMovement;                              // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                UpVector;                                          // 0x0340(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UpFly();
	void ReceiveTick(float DeltaSeconds);
	void InpActEvt_Q_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_Q_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_IA_Move_K2Node_EnhancedInputActionEvent_0(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_E_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void InpActEvt_E_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void ExecuteUbergraph_BP_CameraPawn(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CameraPawn_C">();
	}
	static class ABP_CameraPawn_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CameraPawn_C>();
	}
};
static_assert(alignof(ABP_CameraPawn_C) == 0x000008, "Wrong alignment on ABP_CameraPawn_C");
static_assert(sizeof(ABP_CameraPawn_C) == 0x000358, "Wrong size on ABP_CameraPawn_C");
static_assert(offsetof(ABP_CameraPawn_C, UberGraphFrame) == 0x000318, "Member 'ABP_CameraPawn_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_CameraPawn_C, Collision) == 0x000320, "Member 'ABP_CameraPawn_C::Collision' has a wrong offset!");
static_assert(offsetof(ABP_CameraPawn_C, CineCamera) == 0x000328, "Member 'ABP_CameraPawn_C::CineCamera' has a wrong offset!");
static_assert(offsetof(ABP_CameraPawn_C, SpringArm) == 0x000330, "Member 'ABP_CameraPawn_C::SpringArm' has a wrong offset!");
static_assert(offsetof(ABP_CameraPawn_C, FloatingPawnMovement) == 0x000338, "Member 'ABP_CameraPawn_C::FloatingPawnMovement' has a wrong offset!");
static_assert(offsetof(ABP_CameraPawn_C, UpVector) == 0x000340, "Member 'ABP_CameraPawn_C::UpVector' has a wrong offset!");

}

