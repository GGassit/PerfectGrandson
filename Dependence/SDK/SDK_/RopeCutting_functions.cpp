#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RopeCutting

#include "Basic.hpp"

#include "RopeCutting_classes.hpp"
#include "RopeCutting_parameters.hpp"


namespace SDK
{

// Function RopeCutting.CC22.AllowAirWhipFunction_CC
// (Final, Native, Private)

void UCC22::AllowAirWhipFunction_CC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "AllowAirWhipFunction_CC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.CC22.AttachChainEnd_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              MeshToAttach                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCC22::AttachChainEnd_RC(class UPrimitiveComponent* MeshToAttach, class FName SocketName, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "AttachChainEnd_RC");

	Params::CC22_AttachChainEnd_RC Parms{};

	Parms.MeshToAttach = MeshToAttach;
	Parms.SocketName = SocketName;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.CC22.AttachChainStart_CC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              MeshToAttach                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCC22::AttachChainStart_CC(class UPrimitiveComponent* MeshToAttach, class FName SocketName, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "AttachChainStart_CC");

	Params::CC22_AttachChainStart_CC Parms{};

	Parms.MeshToAttach = MeshToAttach;
	Parms.SocketName = SocketName;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.CC22.BeginConstruction_CC
// (Final, Native, Private)

void UCC22::BeginConstruction_CC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "BeginConstruction_CC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.CC22.BreakChain_CC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              ChainLinkHit                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCC22::BreakChain_CC(class UPrimitiveComponent* ChainLinkHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "BreakChain_CC");

	Params::CC22_BreakChain_CC Parms{};

	Parms.ChainLinkHit = ChainLinkHit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.CC22.BreakChainByNumber_CC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ChainLinkHit                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCC22::BreakChainByNumber_CC(int32 ChainLinkHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "BreakChainByNumber_CC");

	Params::CC22_BreakChainByNumber_CC Parms{};

	Parms.ChainLinkHit = ChainLinkHit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.CC22.BuildChain_CC
// (Final, Native, Public, BlueprintCallable)

void UCC22::BuildChain_CC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "BuildChain_CC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.CC22.CreateSimpleSpline_CC
// (Final, Native, Private)

void UCC22::CreateSimpleSpline_CC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "CreateSimpleSpline_CC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.CC22.CreateUniqueName_CC
// (Final, Native, Private)
// Parameters:
// class FString                           ComponentType                                          (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ComponentNumber                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class FName UCC22::CreateUniqueName_CC(const class FString& ComponentType, const int32 ComponentNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "CreateUniqueName_CC");

	Params::CC22_CreateUniqueName_CC Parms{};

	Parms.ComponentType = std::move(ComponentType);
	Parms.ComponentNumber = ComponentNumber;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.CC22.DetachEndPrimitive_CC
// (Final, Native, Public, BlueprintCallable)

void UCC22::DetachEndPrimitive_CC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "DetachEndPrimitive_CC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.CC22.DetachStartPrimitive_CC
// (Final, Native, Public, BlueprintCallable)

void UCC22::DetachStartPrimitive_CC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "DetachStartPrimitive_CC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.CC22.DropChain_CC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DisableGrabDuration                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCC22::DropChain_CC(float DisableGrabDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "DropChain_CC");

	Params::CC22_DropChain_CC Parms{};

	Parms.DisableGrabDuration = DisableGrabDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.CC22.EnsureProperReset_CC
// (Final, Native, Private)

void UCC22::EnsureProperReset_CC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "EnsureProperReset_CC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.CC22.EventBeginDelayedFunction_CC
// (Final, Native, Private)

void UCC22::EventBeginDelayedFunction_CC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "EventBeginDelayedFunction_CC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.CC22.GameBegun_CC
// (Final, Native, Private)

void UCC22::GameBegun_CC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "GameBegun_CC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.CC22.GetEndPrimitiveConstraint_CC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPhysicsConstraintComponent*      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPhysicsConstraintComponent* UCC22::GetEndPrimitiveConstraint_CC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "GetEndPrimitiveConstraint_CC");

	Params::CC22_GetEndPrimitiveConstraint_CC Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.CC22.GetFirstChainMesh_CC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UStaticMeshComponent*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStaticMeshComponent* UCC22::GetFirstChainMesh_CC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "GetFirstChainMesh_CC");

	Params::CC22_GetFirstChainMesh_CC Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.CC22.GetLastChainMesh_CC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UStaticMeshComponent*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStaticMeshComponent* UCC22::GetLastChainMesh_CC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "GetLastChainMesh_CC");

	Params::CC22_GetLastChainMesh_CC Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.CC22.GetMeshArray_CC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class UStaticMeshComponent*>     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UStaticMeshComponent*> UCC22::GetMeshArray_CC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "GetMeshArray_CC");

	Params::CC22_GetMeshArray_CC Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.CC22.GetPhysicsConstraintArray_CC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class UPhysicsConstraintComponent*>ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UPhysicsConstraintComponent*> UCC22::GetPhysicsConstraintArray_CC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "GetPhysicsConstraintArray_CC");

	Params::CC22_GetPhysicsConstraintArray_CC Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.CC22.GetStartPrimitiveConstraint_CC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPhysicsConstraintComponent*      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPhysicsConstraintComponent* UCC22::GetStartPrimitiveConstraint_CC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "GetStartPrimitiveConstraint_CC");

	Params::CC22_GetStartPrimitiveConstraint_CC Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.CC22.GrabCheck
// (Final, Native, Private)

void UCC22::GrabCheck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "GrabCheck");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.CC22.GrabReset_CC
// (Final, Native, Private)

void UCC22::GrabReset_CC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "GrabReset_CC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.CC22.ImmobiliseFirstChainLink_CC
// (Final, Native, Public, BlueprintCallable)

void UCC22::ImmobiliseFirstChainLink_CC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "ImmobiliseFirstChainLink_CC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.CC22.ImmobiliseLastChainLink_CC
// (Final, Native, Public, BlueprintCallable)

void UCC22::ImmobiliseLastChainLink_CC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "ImmobiliseLastChainLink_CC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.CC22.MobiliseFirstChainLink_CC
// (Final, Native, Public, BlueprintCallable)

void UCC22::MobiliseFirstChainLink_CC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "MobiliseFirstChainLink_CC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.CC22.MobiliseLastChainLink_CC
// (Final, Native, Public, BlueprintCallable)

void UCC22::MobiliseLastChainLink_CC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "MobiliseLastChainLink_CC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.CC22.MoveEndOfChain_CC
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          MoveToLocation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DurationOfMove                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AllowStartRotationAttached                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AllowStartRotationImmobilised                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCC22::MoveEndOfChain_CC(const struct FVector& MoveToLocation, float DurationOfMove, bool AllowStartRotationAttached, bool AllowStartRotationImmobilised)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "MoveEndOfChain_CC");

	Params::CC22_MoveEndOfChain_CC Parms{};

	Parms.MoveToLocation = std::move(MoveToLocation);
	Parms.DurationOfMove = DurationOfMove;
	Parms.AllowStartRotationAttached = AllowStartRotationAttached;
	Parms.AllowStartRotationImmobilised = AllowStartRotationImmobilised;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.CC22.MoveEndOfChainPassBack_CC
// (Final, Native, Private)

void UCC22::MoveEndOfChainPassBack_CC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "MoveEndOfChainPassBack_CC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.CC22.MoveStartOfChain_CC
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          MoveToLocation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DurationOfMove                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AllowEndRotationAttached                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AllowEndRotationImmobilised                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCC22::MoveStartOfChain_CC(const struct FVector& MoveToLocation, float DurationOfMove, bool AllowEndRotationAttached, bool AllowEndRotationImmobilised)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "MoveStartOfChain_CC");

	Params::CC22_MoveStartOfChain_CC Parms{};

	Parms.MoveToLocation = std::move(MoveToLocation);
	Parms.DurationOfMove = DurationOfMove;
	Parms.AllowEndRotationAttached = AllowEndRotationAttached;
	Parms.AllowEndRotationImmobilised = AllowEndRotationImmobilised;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.CC22.MoveStartOfChainPassBack_CC
// (Final, Native, Private)

void UCC22::MoveStartOfChainPassBack_CC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "MoveStartOfChainPassBack_CC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.CC22.onAirWhipResetDelay_CC
// (Final, Native, Private)

void UCC22::OnAirWhipResetDelay_CC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "onAirWhipResetDelay_CC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.CC22.OnCompHit
// (Final, Native, Private, HasOutParams, HasDefaults)
// Parameters:
// class UPrimitiveComponent*              HitComp                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UCC22::OnCompHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "OnCompHit");

	Params::CC22_OnCompHit Parms{};

	Parms.HitComp = HitComp;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.CC22.onComponentHitFlowControl
// (Final, Native, Private)

void UCC22::OnComponentHitFlowControl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "onComponentHitFlowControl");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.CC22.OnComponentHitReset
// (Final, Native, Private)

void UCC22::OnComponentHitReset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "OnComponentHitReset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.CC22.onEventBeginTimer
// (Final, Native, Private)

void UCC22::OnEventBeginTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "onEventBeginTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.CC22.onGrabCheckLoop
// (Final, Native, Private)

void UCC22::OnGrabCheckLoop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "onGrabCheckLoop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.CC22.onGrabResetDelay
// (Final, Native, Private)

void UCC22::OnGrabResetDelay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "onGrabResetDelay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.CC22.onMoveEndOfChainTimer
// (Final, Native, Private)

void UCC22::OnMoveEndOfChainTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "onMoveEndOfChainTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.CC22.onMoveStartOfChainTimer
// (Final, Native, Private)

void UCC22::OnMoveStartOfChainTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "onMoveStartOfChainTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.CC22.onVelocityCheckDelay
// (Final, Native, Private)

void UCC22::OnVelocityCheckDelay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "onVelocityCheckDelay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.CC22.ResetChainAfterMove_CC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ImmobiliseStart                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ImmobiliseEnd                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCC22::ResetChainAfterMove_CC(bool ImmobiliseStart, bool ImmobiliseEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "ResetChainAfterMove_CC");

	Params::CC22_ResetChainAfterMove_CC Parms{};

	Parms.ImmobiliseStart = ImmobiliseStart;
	Parms.ImmobiliseEnd = ImmobiliseEnd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.CC22.ScalePhysicsParameters_CC
// (Final, Native, Private)

void UCC22::ScalePhysicsParameters_CC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "ScalePhysicsParameters_CC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.CC22.SpawnChainAtRuntime_CC
// (Final, Native, Public, BlueprintCallable)

void UCC22::SpawnChainAtRuntime_CC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "SpawnChainAtRuntime_CC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.CC22.VelocityCheck_CC
// (Final, Native, Private)

void UCC22::VelocityCheck_CC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "VelocityCheck_CC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.CC22.WeakImpactChain_CC
// (Final, Native, Private)

void UCC22::WeakImpactChain_CC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CC22", "WeakImpactChain_CC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.AddPointsToBuildingSpline
// (Final, Native, Static, Private)
// Parameters:
// class USplineComponent*                 SplineToGrow                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumberOfLoopsAPTSIn                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   UnitLengthAPTSIn                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URC22::AddPointsToBuildingSpline(class USplineComponent* SplineToGrow, const int32 NumberOfLoopsAPTSIn, const float UnitLengthAPTSIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RC22", "AddPointsToBuildingSpline");

	Params::RC22_AddPointsToBuildingSpline Parms{};

	Parms.SplineToGrow = SplineToGrow;
	Parms.NumberOfLoopsAPTSIn = NumberOfLoopsAPTSIn;
	Parms.UnitLengthAPTSIn = UnitLengthAPTSIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.AddPointsToSpline
// (Final, Native, Static, Private, HasDefaults)
// Parameters:
// class USplineComponent*                 SplineToGrow                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USplineComponent*                 UserSplineCRSIn                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumberOfLoopsAPTSIn                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   UnitLengthAPTSIn                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          RopeOffsetAPTSIn                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URC22::AddPointsToSpline(class USplineComponent* SplineToGrow, class USplineComponent* UserSplineCRSIn, const int32 NumberOfLoopsAPTSIn, const float UnitLengthAPTSIn, const struct FVector& RopeOffsetAPTSIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RC22", "AddPointsToSpline");

	Params::RC22_AddPointsToSpline Parms{};

	Parms.SplineToGrow = SplineToGrow;
	Parms.UserSplineCRSIn = UserSplineCRSIn;
	Parms.NumberOfLoopsAPTSIn = NumberOfLoopsAPTSIn;
	Parms.UnitLengthAPTSIn = UnitLengthAPTSIn;
	Parms.RopeOffsetAPTSIn = std::move(RopeOffsetAPTSIn);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.AdjustRenderSplineLocation
// (Final, Native, Static, Private)
// Parameters:
// class USplineComponent*                 RenderSpline                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USplineComponent*                 UserSpline                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              AttachedPrimitive                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumberOfLoops                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URC22::AdjustRenderSplineLocation(class USplineComponent* RenderSpline, class USplineComponent* UserSpline, class UPrimitiveComponent* AttachedPrimitive, const int32 NumberOfLoops, const class FName SocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RC22", "AdjustRenderSplineLocation");

	Params::RC22_AdjustRenderSplineLocation Parms{};

	Parms.RenderSpline = RenderSpline;
	Parms.UserSpline = UserSpline;
	Parms.AttachedPrimitive = AttachedPrimitive;
	Parms.NumberOfLoops = NumberOfLoops;
	Parms.SocketName = SocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.CreateSphereCollision
// (Final, Native, Static, Private)
// Parameters:
// class USphereComponent*                 SphereCollisionCSCIn                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWorld*                           WorldRefCSCIn                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USplineComponent*                 SplineRefCSCIn                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URC22::CreateSphereCollision(class USphereComponent* SphereCollisionCSCIn, class UWorld* WorldRefCSCIn, class USplineComponent* SplineRefCSCIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RC22", "CreateSphereCollision");

	Params::RC22_CreateSphereCollision Parms{};

	Parms.SphereCollisionCSCIn = SphereCollisionCSCIn;
	Parms.WorldRefCSCIn = WorldRefCSCIn;
	Parms.SplineRefCSCIn = SplineRefCSCIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.CreateSpline
// (Final, Native, Static, Private, HasDefaults)
// Parameters:
// class USplineComponent*                 InSplineCS                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          WorldLocationCS                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         WorldRotationCS                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class UWorld*                           WorldRefCSIn                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  SelfRefCSIn                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URC22::CreateSpline(class USplineComponent* InSplineCS, const struct FVector& WorldLocationCS, const struct FRotator& WorldRotationCS, class UWorld* WorldRefCSIn, class USceneComponent* SelfRefCSIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RC22", "CreateSpline");

	Params::RC22_CreateSpline Parms{};

	Parms.InSplineCS = InSplineCS;
	Parms.WorldLocationCS = std::move(WorldLocationCS);
	Parms.WorldRotationCS = std::move(WorldRotationCS);
	Parms.WorldRefCSIn = WorldRefCSIn;
	Parms.SelfRefCSIn = SelfRefCSIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.CreateSplineMeshes
// (Final, Native, Static, Private)
// Parameters:
// class USplineMeshComponent*             SplineMeshCSMInput                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWorld*                           WorldRefCSMIn                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USplineComponent*                 SplineOwnerRefCSMIn                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URC22::CreateSplineMeshes(class USplineMeshComponent* SplineMeshCSMInput, class UWorld* WorldRefCSMIn, class USplineComponent* SplineOwnerRefCSMIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RC22", "CreateSplineMeshes");

	Params::RC22_CreateSplineMeshes Parms{};

	Parms.SplineMeshCSMInput = SplineMeshCSMInput;
	Parms.WorldRefCSMIn = WorldRefCSMIn;
	Parms.SplineOwnerRefCSMIn = SplineOwnerRefCSMIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.MakePhysConstr
// (Final, Native, Static, Private, HasDefaults)
// Parameters:
// class UPhysicsConstraintComponent*      PhyConstrMPCIn                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWorld*                           WorldRefMPCIn                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          WorldLocationMPCIn                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USphereComponent*                 CollRefAttachMPCIn                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URC22::MakePhysConstr(class UPhysicsConstraintComponent* PhyConstrMPCIn, class UWorld* WorldRefMPCIn, const struct FVector& WorldLocationMPCIn, class USphereComponent* CollRefAttachMPCIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RC22", "MakePhysConstr");

	Params::RC22_MakePhysConstr Parms{};

	Parms.PhyConstrMPCIn = PhyConstrMPCIn;
	Parms.WorldRefMPCIn = WorldRefMPCIn;
	Parms.WorldLocationMPCIn = std::move(WorldLocationMPCIn);
	Parms.CollRefAttachMPCIn = CollRefAttachMPCIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.Mesh_RC
// (Final, Native, Static, Private)
// Parameters:
// class USplineMeshComponent*             SplineMeshToConfigure                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMesh*                      MeshModel                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MeshWidth_Config                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               MeshMat01                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               MeshMat02                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URC22::Mesh_RC(class USplineMeshComponent* SplineMeshToConfigure, class UStaticMesh* MeshModel, float MeshWidth_Config, class UMaterialInterface* MeshMat01, class UMaterialInterface* MeshMat02)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RC22", "Mesh_RC");

	Params::RC22_Mesh_RC Parms{};

	Parms.SplineMeshToConfigure = SplineMeshToConfigure;
	Parms.MeshModel = MeshModel;
	Parms.MeshWidth_Config = MeshWidth_Config;
	Parms.MeshMat01 = MeshMat01;
	Parms.MeshMat02 = MeshMat02;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.PhyConstrConfig
// (Final, Native, Static, Private)
// Parameters:
// class UPhysicsConstraintComponent*      PhyConstrIn                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SetAngularSwing1LimitPCCIn                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SetAngularSwing2LimitPCCIn                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SetAngularTwistLimitPCCIn                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AngularDrivePositionStrengthPCCIn                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AngularDriveVelocityStrengthPCCIn                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LinearLimit                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LinearDrive                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URC22::PhyConstrConfig(class UPhysicsConstraintComponent* PhyConstrIn, float SetAngularSwing1LimitPCCIn, float SetAngularSwing2LimitPCCIn, float SetAngularTwistLimitPCCIn, float AngularDrivePositionStrengthPCCIn, float AngularDriveVelocityStrengthPCCIn, float LinearLimit, float LinearDrive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RC22", "PhyConstrConfig");

	Params::RC22_PhyConstrConfig Parms{};

	Parms.PhyConstrIn = PhyConstrIn;
	Parms.SetAngularSwing1LimitPCCIn = SetAngularSwing1LimitPCCIn;
	Parms.SetAngularSwing2LimitPCCIn = SetAngularSwing2LimitPCCIn;
	Parms.SetAngularTwistLimitPCCIn = SetAngularTwistLimitPCCIn;
	Parms.AngularDrivePositionStrengthPCCIn = AngularDrivePositionStrengthPCCIn;
	Parms.AngularDriveVelocityStrengthPCCIn = AngularDriveVelocityStrengthPCCIn;
	Parms.LinearLimit = LinearLimit;
	Parms.LinearDrive = LinearDrive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.SetSplMLocTang
// (Final, Native, Static, Private)
// Parameters:
// class USplineComponent*                 ITargetSpline                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USplineMeshComponent*             InTargetSplM                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   IEditPoint                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   UnitLengthSSMLTIn                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URC22::SetSplMLocTang(class USplineComponent* ITargetSpline, class USplineMeshComponent* InTargetSplM, const int32 IEditPoint, const float UnitLengthSSMLTIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RC22", "SetSplMLocTang");

	Params::RC22_SetSplMLocTang Parms{};

	Parms.ITargetSpline = ITargetSpline;
	Parms.InTargetSplM = InTargetSplM;
	Parms.IEditPoint = IEditPoint;
	Parms.UnitLengthSSMLTIn = UnitLengthSSMLTIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.SplineUpDir
// (Final, Native, Static, Private)
// Parameters:
// class USplineComponent*                 ITargetSpline                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ISplineUpDirClamp                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URC22::SplineUpDir(class USplineComponent* ITargetSpline, const float ISplineUpDirClamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RC22", "SplineUpDir");

	Params::RC22_SplineUpDir Parms{};

	Parms.ITargetSpline = ITargetSpline;
	Parms.ISplineUpDirClamp = ISplineUpDirClamp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.TransferSphereCollision
// (Final, Native, Static, Private)
// Parameters:
// class USphereComponent*                 SphereCollisionArrayTSCIn                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USplineComponent*                 TargetSplineTSCIn                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EditPoint                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URC22::TransferSphereCollision(class USphereComponent* SphereCollisionArrayTSCIn, class USplineComponent* TargetSplineTSCIn, const int32 EditPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RC22", "TransferSphereCollision");

	Params::RC22_TransferSphereCollision Parms{};

	Parms.SphereCollisionArrayTSCIn = SphereCollisionArrayTSCIn;
	Parms.TargetSplineTSCIn = TargetSplineTSCIn;
	Parms.EditPoint = EditPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.TransferSplineMeshes
// (Final, Native, Static, Private)
// Parameters:
// class USplineMeshComponent*             SplMeshArrayTSMIn                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USplineComponent*                 TargetSplineTSMIn                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   UnitLengthTSMIn                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   IEditPoint                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URC22::TransferSplineMeshes(class USplineMeshComponent* SplMeshArrayTSMIn, class USplineComponent* TargetSplineTSMIn, const float UnitLengthTSMIn, const int32 IEditPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RC22", "TransferSplineMeshes");

	Params::RC22_TransferSplineMeshes Parms{};

	Parms.SplMeshArrayTSMIn = SplMeshArrayTSMIn;
	Parms.TargetSplineTSMIn = TargetSplineTSMIn;
	Parms.UnitLengthTSMIn = UnitLengthTSMIn;
	Parms.IEditPoint = IEditPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.AllowAirWhipFunction_RC
// (Final, Native, Private)

void URC22::AllowAirWhipFunction_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "AllowAirWhipFunction_RC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.AttachRopeEnd_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              MeshToAttach                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URC22::AttachRopeEnd_RC(class UPrimitiveComponent* MeshToAttach, class FName SocketName, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "AttachRopeEnd_RC");

	Params::RC22_AttachRopeEnd_RC Parms{};

	Parms.MeshToAttach = MeshToAttach;
	Parms.SocketName = SocketName;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.AttachRopeStart_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              MeshToAttach                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URC22::AttachRopeStart_RC(class UPrimitiveComponent* MeshToAttach, class FName SocketName, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "AttachRopeStart_RC");

	Params::RC22_AttachRopeStart_RC Parms{};

	Parms.MeshToAttach = MeshToAttach;
	Parms.SocketName = SocketName;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.BreakEndAnchorConstraint_RC
// (Final, Native, Public, BlueprintCallable)

void URC22::BreakEndAnchorConstraint_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "BreakEndAnchorConstraint_RC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.BreakStartAnchorConstraint_RC
// (Final, Native, Public, BlueprintCallable)

void URC22::BreakStartAnchorConstraint_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "BreakStartAnchorConstraint_RC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.Build_RC
// (Final, Native, Private)

void URC22::Build_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "Build_RC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.BuildRope_RC
// (Final, Native, Public, BlueprintCallable)

void URC22::BuildRope_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "BuildRope_RC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.ConfigDataSpline_RC
// (Final, Native, Private)

void URC22::ConfigDataSpline_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "ConfigDataSpline_RC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.ConfigMinMaxValues_RC
// (Final, Native, Private)

void URC22::ConfigMinMaxValues_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "ConfigMinMaxValues_RC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.CreateUniqueName
// (Final, Native, Private)
// Parameters:
// class FString                           ComponentType                                          (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ComponentNumber                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class FName URC22::CreateUniqueName(const class FString& ComponentType, const int32 ComponentNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "CreateUniqueName");

	Params::RC22_CreateUniqueName Parms{};

	Parms.ComponentType = std::move(ComponentType);
	Parms.ComponentNumber = ComponentNumber;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.RC22.CutRopeUsingCollision_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USphereComponent*                 ChosenCollisionSphere                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URC22::CutRopeUsingCollision_RC(class USphereComponent* ChosenCollisionSphere)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "CutRopeUsingCollision_RC");

	Params::RC22_CutRopeUsingCollision_RC Parms{};

	Parms.ChosenCollisionSphere = ChosenCollisionSphere;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.CutRopeUsingNumber_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ChosenPosition                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URC22::CutRopeUsingNumber_RC(int32 ChosenPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "CutRopeUsingNumber_RC");

	Params::RC22_CutRopeUsingNumber_RC Parms{};

	Parms.ChosenPosition = ChosenPosition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.Drop_RC
// (Final, Native, Public, BlueprintCallable)

void URC22::Drop_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "Drop_RC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.EndGrowRope_RC
// (Final, Native, Public, BlueprintCallable)

void URC22::EndGrowRope_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "EndGrowRope_RC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.EndShrinkRope_RC
// (Final, Native, Public, BlueprintCallable)

void URC22::EndShrinkRope_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "EndShrinkRope_RC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.EnsureProperReset_RC
// (Final, Native, Private)

void URC22::EnsureProperReset_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "EnsureProperReset_RC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.GameBegun_RC
// (Final, Native, Private)

void URC22::GameBegun_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "GameBegun_RC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.GetCollisionArray_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class USphereComponent*>         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class USphereComponent*> URC22::GetCollisionArray_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "GetCollisionArray_RC");

	Params::RC22_GetCollisionArray_RC Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.RC22.GetEndAnchorConstraint_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPhysicsConstraintComponent*      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPhysicsConstraintComponent* URC22::GetEndAnchorConstraint_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "GetEndAnchorConstraint_RC");

	Params::RC22_GetEndAnchorConstraint_RC Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.RC22.GetFirstCollisionSphere_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USphereComponent*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USphereComponent* URC22::GetFirstCollisionSphere_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "GetFirstCollisionSphere_RC");

	Params::RC22_GetFirstCollisionSphere_RC Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.RC22.GetLastCollisionSphere_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USphereComponent*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USphereComponent* URC22::GetLastCollisionSphere_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "GetLastCollisionSphere_RC");

	Params::RC22_GetLastCollisionSphere_RC Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.RC22.GetPhysicsConstraintArray_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class UPhysicsConstraintComponent*>ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UPhysicsConstraintComponent*> URC22::GetPhysicsConstraintArray_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "GetPhysicsConstraintArray_RC");

	Params::RC22_GetPhysicsConstraintArray_RC Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.RC22.GetSplineComponent_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USplineComponent*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USplineComponent* URC22::GetSplineComponent_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "GetSplineComponent_RC");

	Params::RC22_GetSplineComponent_RC Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.RC22.GetSplineMeshArray_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class USplineMeshComponent*>     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class USplineMeshComponent*> URC22::GetSplineMeshArray_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "GetSplineMeshArray_RC");

	Params::RC22_GetSplineMeshArray_RC Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.RC22.GetStartAnchorConstraint_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPhysicsConstraintComponent*      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPhysicsConstraintComponent* URC22::GetStartAnchorConstraint_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "GetStartAnchorConstraint_RC");

	Params::RC22_GetStartAnchorConstraint_RC Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.RC22.GrabDistanceCheck_RC
// (Final, Native, Private)

void URC22::GrabDistanceCheck_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "GrabDistanceCheck_RC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.GrabLoopReset_RC
// (Final, Native, Private)

void URC22::GrabLoopReset_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "GrabLoopReset_RC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.GrowRope_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   RateOfAddition                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URC22::GrowRope_RC(float RateOfAddition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "GrowRope_RC");

	Params::RC22_GrowRope_RC Parms{};

	Parms.RateOfAddition = RateOfAddition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.GrowRopeMainFunction_RC
// (Final, Native, Private)

void URC22::GrowRopeMainFunction_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "GrowRopeMainFunction_RC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.GrowShiftRopeAlong_RC
// (Final, Native, Private)

void URC22::GrowShiftRopeAlong_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "GrowShiftRopeAlong_RC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.ImmobiliseEnd_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    FurtherImmobiliseRopeEnd                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URC22::ImmobiliseEnd_RC(bool FurtherImmobiliseRopeEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "ImmobiliseEnd_RC");

	Params::RC22_ImmobiliseEnd_RC Parms{};

	Parms.FurtherImmobiliseRopeEnd = FurtherImmobiliseRopeEnd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.ImmobiliseStart_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    FurtherImmobiliseRopeStart                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URC22::ImmobiliseStart_RC(bool FurtherImmobiliseRopeStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "ImmobiliseStart_RC");

	Params::RC22_ImmobiliseStart_RC Parms{};

	Parms.FurtherImmobiliseRopeStart = FurtherImmobiliseRopeStart;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.ImpactRateControl_RC
// (Final, Native, Private)

void URC22::ImpactRateControl_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "ImpactRateControl_RC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.InitialiseCollisionSphereRC
// (Final, Native, Private)

void URC22::InitialiseCollisionSphereRC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "InitialiseCollisionSphereRC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.InitiateCut_RC
// (Final, Native, Private)

void URC22::InitiateCut_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "InitiateCut_RC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.InitiateGrab_RC
// (Final, Native, Private)

void URC22::InitiateGrab_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "InitiateGrab_RC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.InitiateImpact_RC
// (Final, Native, Private)

void URC22::InitiateImpact_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "InitiateImpact_RC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.MobiliseEnd_RC
// (Final, Native, Public, BlueprintCallable)

void URC22::MobiliseEnd_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "MobiliseEnd_RC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.MobiliseStart_RC
// (Final, Native, Public, BlueprintCallable)

void URC22::MobiliseStart_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "MobiliseStart_RC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.MoveEndOfRope_RC
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          MoveToLocation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DurationOfMove                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AllowStartRotationAttached                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AllowStartRotationImmobilised                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URC22::MoveEndOfRope_RC(const struct FVector& MoveToLocation, float DurationOfMove, bool AllowStartRotationAttached, bool AllowStartRotationImmobilised)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "MoveEndOfRope_RC");

	Params::RC22_MoveEndOfRope_RC Parms{};

	Parms.MoveToLocation = std::move(MoveToLocation);
	Parms.DurationOfMove = DurationOfMove;
	Parms.AllowStartRotationAttached = AllowStartRotationAttached;
	Parms.AllowStartRotationImmobilised = AllowStartRotationImmobilised;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.MoveEndOfRopePassBack_RC
// (Final, Native, Private)

void URC22::MoveEndOfRopePassBack_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "MoveEndOfRopePassBack_RC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.MoveShrinkRope_RC
// (Final, Native, Private)

void URC22::MoveShrinkRope_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "MoveShrinkRope_RC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.MoveStartOfRope_RC
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          MoveToLocation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DurationOfMove                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AllowEndRotationAttached                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AllowEndRotationImmobilised                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URC22::MoveStartOfRope_RC(const struct FVector& MoveToLocation, float DurationOfMove, bool AllowEndRotationAttached, bool AllowEndRotationImmobilised)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "MoveStartOfRope_RC");

	Params::RC22_MoveStartOfRope_RC Parms{};

	Parms.MoveToLocation = std::move(MoveToLocation);
	Parms.DurationOfMove = DurationOfMove;
	Parms.AllowEndRotationAttached = AllowEndRotationAttached;
	Parms.AllowEndRotationImmobilised = AllowEndRotationImmobilised;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.MoveStartOfRopePassBack_RC
// (Final, Native, Private)

void URC22::MoveStartOfRopePassBack_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "MoveStartOfRopePassBack_RC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.onAirWhipResetDelay_RC
// (Final, Native, Private)

void URC22::OnAirWhipResetDelay_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "onAirWhipResetDelay_RC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.OnCompHit
// (Final, Native, Private, HasOutParams, HasDefaults)
// Parameters:
// class UPrimitiveComponent*              HitComp                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void URC22::OnCompHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "OnCompHit");

	Params::RC22_OnCompHit Parms{};

	Parms.HitComp = HitComp;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.onCutResetDelayEnd_RC
// (Final, Native, Private)

void URC22::OnCutResetDelayEnd_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "onCutResetDelayEnd_RC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.onDelayCollisionInitialisation
// (Final, Native, Private)

void URC22::OnDelayCollisionInitialisation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "onDelayCollisionInitialisation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.onGrabDistanceCheckEnd
// (Final, Native, Private)

void URC22::OnGrabDistanceCheckEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "onGrabDistanceCheckEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.onGrabLoopResetEnd
// (Final, Native, Private)

void URC22::OnGrabLoopResetEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "onGrabLoopResetEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.onImpactDelayEnd
// (Final, Native, Private)

void URC22::OnImpactDelayEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "onImpactDelayEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.onMoveEndOfRopeTimer
// (Final, Native, Private)

void URC22::OnMoveEndOfRopeTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "onMoveEndOfRopeTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.onMoveGrowRopeTimer
// (Final, Native, Private)

void URC22::OnMoveGrowRopeTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "onMoveGrowRopeTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.onMoveShrinkTimer
// (Final, Native, Private)

void URC22::OnMoveShrinkTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "onMoveShrinkTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.onMoveStartOfRopeTimer
// (Final, Native, Private)

void URC22::OnMoveStartOfRopeTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "onMoveStartOfRopeTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.onTimerEnd
// (Final, Native, Private)

void URC22::OnTimerEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "onTimerEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.onVelocityCheckDelay
// (Final, Native, Private)

void URC22::OnVelocityCheckDelay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "onVelocityCheckDelay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.ResetCuttingLoop_RC
// (Final, Native, Private)

void URC22::ResetCuttingLoop_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "ResetCuttingLoop_RC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.ResetRopeAfterMove_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ImmobiliseStart                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ImmobiliseEnd                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URC22::ResetRopeAfterMove_RC(bool ImmobiliseStart, bool ImmobiliseEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "ResetRopeAfterMove_RC");

	Params::RC22_ResetRopeAfterMove_RC Parms{};

	Parms.ImmobiliseStart = ImmobiliseStart;
	Parms.ImmobiliseEnd = ImmobiliseEnd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.RuntimeUpdate
// (Final, Native, Private)

void URC22::RuntimeUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "RuntimeUpdate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.ScalePhysicsParameters_RC
// (Final, Native, Private)

void URC22::ScalePhysicsParameters_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "ScalePhysicsParameters_RC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.ShrinkRope_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   RateOfSubtraction                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URC22::ShrinkRope_RC(float RateOfSubtraction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "ShrinkRope_RC");

	Params::RC22_ShrinkRope_RC Parms{};

	Parms.RateOfSubtraction = RateOfSubtraction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.ShrinkRopeMainFunction_RC
// (Final, Native, Private)

void URC22::ShrinkRopeMainFunction_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "ShrinkRopeMainFunction_RC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.SphereCollisionConfig
// (Final, Native, Private)
// Parameters:
// bool                                    ShouldBlock                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    SimPhysics                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USphereComponent*                 SphereCollisionIn                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AngularDampeningSCCIn                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LinearDampeningSCCIn                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PositionSolverSCCIn                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VelocitySolverSCCIn                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StabilizationThresholdMultiplierSCCIn                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SleepThresholdMultiplierSCCIn                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InertiaTensorScaleSCCIn                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CollUnitScaleSCCIn                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Mass                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MassScale                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URC22::SphereCollisionConfig(bool ShouldBlock, bool SimPhysics, class USphereComponent* SphereCollisionIn, float AngularDampeningSCCIn, float LinearDampeningSCCIn, float PositionSolverSCCIn, float VelocitySolverSCCIn, float StabilizationThresholdMultiplierSCCIn, float SleepThresholdMultiplierSCCIn, float InertiaTensorScaleSCCIn, float CollUnitScaleSCCIn, float Mass, float MassScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "SphereCollisionConfig");

	Params::RC22_SphereCollisionConfig Parms{};

	Parms.ShouldBlock = ShouldBlock;
	Parms.SimPhysics = SimPhysics;
	Parms.SphereCollisionIn = SphereCollisionIn;
	Parms.AngularDampeningSCCIn = AngularDampeningSCCIn;
	Parms.LinearDampeningSCCIn = LinearDampeningSCCIn;
	Parms.PositionSolverSCCIn = PositionSolverSCCIn;
	Parms.VelocitySolverSCCIn = VelocitySolverSCCIn;
	Parms.StabilizationThresholdMultiplierSCCIn = StabilizationThresholdMultiplierSCCIn;
	Parms.SleepThresholdMultiplierSCCIn = SleepThresholdMultiplierSCCIn;
	Parms.InertiaTensorScaleSCCIn = InertiaTensorScaleSCCIn;
	Parms.CollUnitScaleSCCIn = CollUnitScaleSCCIn;
	Parms.Mass = Mass;
	Parms.MassScale = MassScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.UpdateSplOrCut
// (Final, Native, Private)

void URC22::UpdateSplOrCut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "UpdateSplOrCut");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22.VelocityCheck_RC
// (Final, Native, Private)

void URC22::VelocityCheck_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22", "VelocityCheck_RC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22Tracker.GetCollisionArray_RC22T
// (Final, Native, Public)
// Parameters:
// TArray<class USphereComponent*>         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class USphereComponent*> URC22Tracker::GetCollisionArray_RC22T()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22Tracker", "GetCollisionArray_RC22T");

	Params::RC22Tracker_GetCollisionArray_RC22T Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.RC22Tracker.GetPhysicsConstraintArray_RC22T
// (Final, Native, Public)
// Parameters:
// TArray<class UPhysicsConstraintComponent*>ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UPhysicsConstraintComponent*> URC22Tracker::GetPhysicsConstraintArray_RC22T()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22Tracker", "GetPhysicsConstraintArray_RC22T");

	Params::RC22Tracker_GetPhysicsConstraintArray_RC22T Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.RC22Tracker.GetSplineComponent_RC22T
// (Final, Native, Public)
// Parameters:
// class USplineComponent*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USplineComponent* URC22Tracker::GetSplineComponent_RC22T()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22Tracker", "GetSplineComponent_RC22T");

	Params::RC22Tracker_GetSplineComponent_RC22T Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.RC22Tracker.GetSplineMeshArray_RC22T
// (Final, Native, Public)
// Parameters:
// TArray<class USplineMeshComponent*>     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class USplineMeshComponent*> URC22Tracker::GetSplineMeshArray_RC22T()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22Tracker", "GetSplineMeshArray_RC22T");

	Params::RC22Tracker_GetSplineMeshArray_RC22T Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.RC22Tracker.SetCollisionArray_RC22T
// (Final, Native, Public)
// Parameters:
// TArray<class USphereComponent*>         SetCollisionArrayIn                                    (Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void URC22Tracker::SetCollisionArray_RC22T(const TArray<class USphereComponent*>& SetCollisionArrayIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22Tracker", "SetCollisionArray_RC22T");

	Params::RC22Tracker_SetCollisionArray_RC22T Parms{};

	Parms.SetCollisionArrayIn = std::move(SetCollisionArrayIn);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22Tracker.SetPhysicsConstraintArray_RC22T
// (Final, Native, Public)
// Parameters:
// TArray<class UPhysicsConstraintComponent*>SetPhysicsConstraintArrayIn                            (Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void URC22Tracker::SetPhysicsConstraintArray_RC22T(const TArray<class UPhysicsConstraintComponent*>& SetPhysicsConstraintArrayIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22Tracker", "SetPhysicsConstraintArray_RC22T");

	Params::RC22Tracker_SetPhysicsConstraintArray_RC22T Parms{};

	Parms.SetPhysicsConstraintArrayIn = std::move(SetPhysicsConstraintArrayIn);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22Tracker.SetSplineComponent_RC22T
// (Final, Native, Public)
// Parameters:
// class USplineComponent*                 SplineComponentIn                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URC22Tracker::SetSplineComponent_RC22T(class USplineComponent* SplineComponentIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22Tracker", "SetSplineComponent_RC22T");

	Params::RC22Tracker_SetSplineComponent_RC22T Parms{};

	Parms.SplineComponentIn = SplineComponentIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RC22Tracker.SetSplineMeshArray_RC22T
// (Final, Native, Public)
// Parameters:
// TArray<class USplineMeshComponent*>     SplineMeshArrayIn                                      (Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void URC22Tracker::SetSplineMeshArray_RC22T(const TArray<class USplineMeshComponent*>& SplineMeshArrayIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RC22Tracker", "SetSplineMeshArray_RC22T");

	Params::RC22Tracker_SetSplineMeshArray_RC22T Parms{};

	Parms.SplineMeshArrayIn = std::move(SplineMeshArrayIn);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RCTracker.GetIsFirstOfCutLength
// (Final, Native, Public)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URCTracker::GetIsFirstOfCutLength()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCTracker", "GetIsFirstOfCutLength");

	Params::RCTracker_GetIsFirstOfCutLength Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.RCTracker.GetIsLastOfCutLength
// (Final, Native, Public)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URCTracker::GetIsLastOfCutLength()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCTracker", "GetIsLastOfCutLength");

	Params::RCTracker_GetIsLastOfCutLength Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.RCTracker.GetPhysicsConstraint
// (Final, Native, Public)
// Parameters:
// class UPhysicsConstraintComponent*      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPhysicsConstraintComponent* URCTracker::GetPhysicsConstraint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCTracker", "GetPhysicsConstraint");

	Params::RCTracker_GetPhysicsConstraint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.RCTracker.GetPositionNumber
// (Final, Native, Public)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 URCTracker::GetPositionNumber()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCTracker", "GetPositionNumber");

	Params::RCTracker_GetPositionNumber Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.RCTracker.GetPrimarySphereCollision
// (Final, Native, Public)
// Parameters:
// class USphereComponent*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USphereComponent* URCTracker::GetPrimarySphereCollision()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCTracker", "GetPrimarySphereCollision");

	Params::RCTracker_GetPrimarySphereCollision Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.RCTracker.GetPrimarySphereCollisionName
// (Final, Native, Public)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName URCTracker::GetPrimarySphereCollisionName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCTracker", "GetPrimarySphereCollisionName");

	Params::RCTracker_GetPrimarySphereCollisionName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.RCTracker.GetSecondarySphereCollision
// (Final, Native, Public)
// Parameters:
// class USphereComponent*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USphereComponent* URCTracker::GetSecondarySphereCollision()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCTracker", "GetSecondarySphereCollision");

	Params::RCTracker_GetSecondarySphereCollision Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.RCTracker.GetSecondarySphereCollisionName
// (Final, Native, Public)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName URCTracker::GetSecondarySphereCollisionName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCTracker", "GetSecondarySphereCollisionName");

	Params::RCTracker_GetSecondarySphereCollisionName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.RCTracker.GetSplineComponent
// (Final, Native, Public)
// Parameters:
// class USplineComponent*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USplineComponent* URCTracker::GetSplineComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCTracker", "GetSplineComponent");

	Params::RCTracker_GetSplineComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.RCTracker.GetSplineMesh
// (Final, Native, Public)
// Parameters:
// class USplineMeshComponent*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USplineMeshComponent* URCTracker::GetSplineMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCTracker", "GetSplineMesh");

	Params::RCTracker_GetSplineMesh Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.RCTracker.SetIsFirstOfCutLength
// (Final, Native, Public)
// Parameters:
// bool                                    IsFirstOfCutLengthIn                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URCTracker::SetIsFirstOfCutLength(bool IsFirstOfCutLengthIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCTracker", "SetIsFirstOfCutLength");

	Params::RCTracker_SetIsFirstOfCutLength Parms{};

	Parms.IsFirstOfCutLengthIn = IsFirstOfCutLengthIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RCTracker.SetIsLastOfCutLength
// (Final, Native, Public)
// Parameters:
// bool                                    IsLastOfCutLengthIn                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URCTracker::SetIsLastOfCutLength(bool IsLastOfCutLengthIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCTracker", "SetIsLastOfCutLength");

	Params::RCTracker_SetIsLastOfCutLength Parms{};

	Parms.IsLastOfCutLengthIn = IsLastOfCutLengthIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RCTracker.SetPhysicsConstraint
// (Final, Native, Public)
// Parameters:
// class UPhysicsConstraintComponent*      PrimaryPhysicsConstraintIn                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URCTracker::SetPhysicsConstraint(class UPhysicsConstraintComponent* PrimaryPhysicsConstraintIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCTracker", "SetPhysicsConstraint");

	Params::RCTracker_SetPhysicsConstraint Parms{};

	Parms.PrimaryPhysicsConstraintIn = PrimaryPhysicsConstraintIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RCTracker.SetPositionNumber
// (Final, Native, Public)
// Parameters:
// int32                                   PositionNumberIn                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URCTracker::SetPositionNumber(int32 PositionNumberIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCTracker", "SetPositionNumber");

	Params::RCTracker_SetPositionNumber Parms{};

	Parms.PositionNumberIn = PositionNumberIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RCTracker.SetPrimarySphereCollision
// (Final, Native, Public)
// Parameters:
// class USphereComponent*                 PrimarySphereCollisionIn                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URCTracker::SetPrimarySphereCollision(class USphereComponent* PrimarySphereCollisionIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCTracker", "SetPrimarySphereCollision");

	Params::RCTracker_SetPrimarySphereCollision Parms{};

	Parms.PrimarySphereCollisionIn = PrimarySphereCollisionIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RCTracker.SetPrimarySphereCollisionName
// (Final, Native, Public)
// Parameters:
// class FName                             PrimarySphereCollisionNameIn                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URCTracker::SetPrimarySphereCollisionName(class FName PrimarySphereCollisionNameIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCTracker", "SetPrimarySphereCollisionName");

	Params::RCTracker_SetPrimarySphereCollisionName Parms{};

	Parms.PrimarySphereCollisionNameIn = PrimarySphereCollisionNameIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RCTracker.SetSecondarySphereCollision
// (Final, Native, Public)
// Parameters:
// class USphereComponent*                 SecondarySphereCollisionIn                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URCTracker::SetSecondarySphereCollision(class USphereComponent* SecondarySphereCollisionIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCTracker", "SetSecondarySphereCollision");

	Params::RCTracker_SetSecondarySphereCollision Parms{};

	Parms.SecondarySphereCollisionIn = SecondarySphereCollisionIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RCTracker.SetSecondarySphereCollisionName
// (Final, Native, Public)
// Parameters:
// class FName                             SecondarySphereCollisionNameIn                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URCTracker::SetSecondarySphereCollisionName(class FName SecondarySphereCollisionNameIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCTracker", "SetSecondarySphereCollisionName");

	Params::RCTracker_SetSecondarySphereCollisionName Parms{};

	Parms.SecondarySphereCollisionNameIn = SecondarySphereCollisionNameIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RCTracker.SetSplineComponent
// (Final, Native, Public)
// Parameters:
// class USplineComponent*                 SplineComponentIn                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URCTracker::SetSplineComponent(class USplineComponent* SplineComponentIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCTracker", "SetSplineComponent");

	Params::RCTracker_SetSplineComponent Parms{};

	Parms.SplineComponentIn = SplineComponentIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RCTracker.SetSplineMesh
// (Final, Native, Public)
// Parameters:
// class USplineMeshComponent*             SplineMeshIn                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URCTracker::SetSplineMesh(class USplineMeshComponent* SplineMeshIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCTracker", "SetSplineMesh");

	Params::RCTracker_SetSplineMesh Parms{};

	Parms.SplineMeshIn = SplineMeshIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RopeCuttingController.GetCutComponentName_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              HitCollisionComponent                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName URopeCuttingController::GetCutComponentName_RC(class UPrimitiveComponent* HitCollisionComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RopeCuttingController", "GetCutComponentName_RC");

	Params::RopeCuttingController_GetCutComponentName_RC Parms{};

	Parms.HitCollisionComponent = HitCollisionComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.RopeCuttingMessage.ActorMessageBeginCut_RC
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              HitCollisionComponent                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             RopeComponentUniqueIdentifier                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IRopeCuttingMessage::ActorMessageBeginCut_RC(class UPrimitiveComponent* HitCollisionComponent, class FName RopeComponentUniqueIdentifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RopeCuttingMessage", "ActorMessageBeginCut_RC");

	Params::RopeCuttingMessage_ActorMessageBeginCut_RC Parms{};

	Parms.HitCollisionComponent = HitCollisionComponent;
	Parms.RopeComponentUniqueIdentifier = RopeComponentUniqueIdentifier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RopePhy.AddPointsToSpline
// (Final, Native, Static, Private, HasDefaults)
// Parameters:
// class USplineComponent*                 SplineToGrow                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USplineComponent*                 UserSplineCRSIn                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumberOfLoopsAPTSIn                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   UnitLengthAPTSIn                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          RopeOffsetAPTSIn                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URopePhy::AddPointsToSpline(class USplineComponent* SplineToGrow, class USplineComponent* UserSplineCRSIn, const int32 NumberOfLoopsAPTSIn, const float UnitLengthAPTSIn, const struct FVector& RopeOffsetAPTSIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RopePhy", "AddPointsToSpline");

	Params::RopePhy_AddPointsToSpline Parms{};

	Parms.SplineToGrow = SplineToGrow;
	Parms.UserSplineCRSIn = UserSplineCRSIn;
	Parms.NumberOfLoopsAPTSIn = NumberOfLoopsAPTSIn;
	Parms.UnitLengthAPTSIn = UnitLengthAPTSIn;
	Parms.RopeOffsetAPTSIn = std::move(RopeOffsetAPTSIn);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RopePhy.AdjustRenderSplineLocation
// (Final, Native, Static, Private)
// Parameters:
// class USplineComponent*                 RenderSpline                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USplineComponent*                 UserSpline                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              AttachedPrimitive                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumberOfLoops                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URopePhy::AdjustRenderSplineLocation(class USplineComponent* RenderSpline, class USplineComponent* UserSpline, class UPrimitiveComponent* AttachedPrimitive, const int32 NumberOfLoops, const class FName SocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RopePhy", "AdjustRenderSplineLocation");

	Params::RopePhy_AdjustRenderSplineLocation Parms{};

	Parms.RenderSpline = RenderSpline;
	Parms.UserSpline = UserSpline;
	Parms.AttachedPrimitive = AttachedPrimitive;
	Parms.NumberOfLoops = NumberOfLoops;
	Parms.SocketName = SocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RopePhy.ConfigureSplineMeshes
// (Final, Native, Static, Private)
// Parameters:
// class USplineMeshComponent*             SplineMeshConfigSMInput                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMesh*                      MeshTypeConfigSMInput                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MeshWidthConfigSMInput                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               MeshMaterial01ConfigSMInput                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               MeshMaterial02ConfigSMInput                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URopePhy::ConfigureSplineMeshes(class USplineMeshComponent* SplineMeshConfigSMInput, class UStaticMesh* MeshTypeConfigSMInput, float MeshWidthConfigSMInput, class UMaterialInterface* MeshMaterial01ConfigSMInput, class UMaterialInterface* MeshMaterial02ConfigSMInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RopePhy", "ConfigureSplineMeshes");

	Params::RopePhy_ConfigureSplineMeshes Parms{};

	Parms.SplineMeshConfigSMInput = SplineMeshConfigSMInput;
	Parms.MeshTypeConfigSMInput = MeshTypeConfigSMInput;
	Parms.MeshWidthConfigSMInput = MeshWidthConfigSMInput;
	Parms.MeshMaterial01ConfigSMInput = MeshMaterial01ConfigSMInput;
	Parms.MeshMaterial02ConfigSMInput = MeshMaterial02ConfigSMInput;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RopePhy.CreateSpline
// (Final, Native, Static, Private, HasDefaults)
// Parameters:
// class USplineComponent*                 InSplineCS                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          WorldLocationCS                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         WorldRotationCS                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class UWorld*                           WorldRefCSIn                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  SelfRefCSIn                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URopePhy::CreateSpline(class USplineComponent* InSplineCS, const struct FVector& WorldLocationCS, const struct FRotator& WorldRotationCS, class UWorld* WorldRefCSIn, class USceneComponent* SelfRefCSIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RopePhy", "CreateSpline");

	Params::RopePhy_CreateSpline Parms{};

	Parms.InSplineCS = InSplineCS;
	Parms.WorldLocationCS = std::move(WorldLocationCS);
	Parms.WorldRotationCS = std::move(WorldRotationCS);
	Parms.WorldRefCSIn = WorldRefCSIn;
	Parms.SelfRefCSIn = SelfRefCSIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RopePhy.CreateSplineMeshes
// (Final, Native, Static, Private)
// Parameters:
// class USplineMeshComponent*             SplineMeshCSMInput                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWorld*                           WorldRefCSMIn                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USplineComponent*                 SplineOwnerRefCSMIn                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URopePhy::CreateSplineMeshes(class USplineMeshComponent* SplineMeshCSMInput, class UWorld* WorldRefCSMIn, class USplineComponent* SplineOwnerRefCSMIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RopePhy", "CreateSplineMeshes");

	Params::RopePhy_CreateSplineMeshes Parms{};

	Parms.SplineMeshCSMInput = SplineMeshCSMInput;
	Parms.WorldRefCSMIn = WorldRefCSMIn;
	Parms.SplineOwnerRefCSMIn = SplineOwnerRefCSMIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RopePhy.CreateUniqueName
// (Final, Native, Static, Private)
// Parameters:
// class FString                           ComponentType                                          (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ComponentNumber                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ThisComponentStrNameCUNIn                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class FName URopePhy::CreateUniqueName(const class FString& ComponentType, const int32 ComponentNumber, const class FString& ThisComponentStrNameCUNIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RopePhy", "CreateUniqueName");

	Params::RopePhy_CreateUniqueName Parms{};

	Parms.ComponentType = std::move(ComponentType);
	Parms.ComponentNumber = ComponentNumber;
	Parms.ThisComponentStrNameCUNIn = std::move(ThisComponentStrNameCUNIn);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.RopePhy.MakePhysConstr
// (Final, Native, Static, Private, HasDefaults)
// Parameters:
// class UPhysicsConstraintComponent*      PhyConstrMPCIn                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWorld*                           WorldRefMPCIn                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          WorldLocationMPCIn                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USphereComponent*                 CollRefAttachMPCIn                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URopePhy::MakePhysConstr(class UPhysicsConstraintComponent* PhyConstrMPCIn, class UWorld* WorldRefMPCIn, const struct FVector& WorldLocationMPCIn, class USphereComponent* CollRefAttachMPCIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RopePhy", "MakePhysConstr");

	Params::RopePhy_MakePhysConstr Parms{};

	Parms.PhyConstrMPCIn = PhyConstrMPCIn;
	Parms.WorldRefMPCIn = WorldRefMPCIn;
	Parms.WorldLocationMPCIn = std::move(WorldLocationMPCIn);
	Parms.CollRefAttachMPCIn = CollRefAttachMPCIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RopePhy.PhyConstrConfig
// (Final, Native, Static, Private)
// Parameters:
// class UPhysicsConstraintComponent*      PhyConstrIn                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SetAngularSwing1LimitPCCIn                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SetAngularSwing2LimitPCCIn                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SetAngularTwistLimitPCCIn                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PositionStrengthPCCIn                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VelocityStrengthPCCIn                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URopePhy::PhyConstrConfig(class UPhysicsConstraintComponent* PhyConstrIn, float SetAngularSwing1LimitPCCIn, float SetAngularSwing2LimitPCCIn, float SetAngularTwistLimitPCCIn, float PositionStrengthPCCIn, float VelocityStrengthPCCIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RopePhy", "PhyConstrConfig");

	Params::RopePhy_PhyConstrConfig Parms{};

	Parms.PhyConstrIn = PhyConstrIn;
	Parms.SetAngularSwing1LimitPCCIn = SetAngularSwing1LimitPCCIn;
	Parms.SetAngularSwing2LimitPCCIn = SetAngularSwing2LimitPCCIn;
	Parms.SetAngularTwistLimitPCCIn = SetAngularTwistLimitPCCIn;
	Parms.PositionStrengthPCCIn = PositionStrengthPCCIn;
	Parms.VelocityStrengthPCCIn = VelocityStrengthPCCIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RopePhy.SetSplMLocTang
// (Final, Native, Static, Private)
// Parameters:
// class USplineComponent*                 ITargetSpline                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USplineMeshComponent*             InTargetSplM                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   IEditPoint                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   UnitLengthSSMLTIn                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URopePhy::SetSplMLocTang(class USplineComponent* ITargetSpline, class USplineMeshComponent* InTargetSplM, const int32 IEditPoint, const float UnitLengthSSMLTIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RopePhy", "SetSplMLocTang");

	Params::RopePhy_SetSplMLocTang Parms{};

	Parms.ITargetSpline = ITargetSpline;
	Parms.InTargetSplM = InTargetSplM;
	Parms.IEditPoint = IEditPoint;
	Parms.UnitLengthSSMLTIn = UnitLengthSSMLTIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RopePhy.SphereCollisionConfig
// (Final, Native, Static, Private)
// Parameters:
// bool                                    ShouldBlock                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    SimPhysics                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USphereComponent*                 SphereCollisionIn                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AngularDampeningSCCIn                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LinearDampeningSCCIn                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PositionSolverSCCIn                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VelocitySolverSCCIn                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StabilizationThresholdMultiplierSCCIn                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SleepThresholdMultiplierSCCIn                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InertiaTensorScaleSCCIn                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CollUnitScaleSCCIn                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Mass                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MassScale                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URopePhy::SphereCollisionConfig(bool ShouldBlock, bool SimPhysics, class USphereComponent* SphereCollisionIn, float AngularDampeningSCCIn, float LinearDampeningSCCIn, float PositionSolverSCCIn, float VelocitySolverSCCIn, float StabilizationThresholdMultiplierSCCIn, float SleepThresholdMultiplierSCCIn, float InertiaTensorScaleSCCIn, float CollUnitScaleSCCIn, float Mass, float MassScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RopePhy", "SphereCollisionConfig");

	Params::RopePhy_SphereCollisionConfig Parms{};

	Parms.ShouldBlock = ShouldBlock;
	Parms.SimPhysics = SimPhysics;
	Parms.SphereCollisionIn = SphereCollisionIn;
	Parms.AngularDampeningSCCIn = AngularDampeningSCCIn;
	Parms.LinearDampeningSCCIn = LinearDampeningSCCIn;
	Parms.PositionSolverSCCIn = PositionSolverSCCIn;
	Parms.VelocitySolverSCCIn = VelocitySolverSCCIn;
	Parms.StabilizationThresholdMultiplierSCCIn = StabilizationThresholdMultiplierSCCIn;
	Parms.SleepThresholdMultiplierSCCIn = SleepThresholdMultiplierSCCIn;
	Parms.InertiaTensorScaleSCCIn = InertiaTensorScaleSCCIn;
	Parms.CollUnitScaleSCCIn = CollUnitScaleSCCIn;
	Parms.Mass = Mass;
	Parms.MassScale = MassScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RopePhy.SplineUpDir
// (Final, Native, Static, Private)
// Parameters:
// class USplineComponent*                 ITargetSpline                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ISplineUpDirClamp                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URopePhy::SplineUpDir(class USplineComponent* ITargetSpline, const float ISplineUpDirClamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RopePhy", "SplineUpDir");

	Params::RopePhy_SplineUpDir Parms{};

	Parms.ITargetSpline = ITargetSpline;
	Parms.ISplineUpDirClamp = ISplineUpDirClamp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RopePhy.Build_RC
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMesh*                      StartEndMesh                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CollisionScale                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USplineComponent*                 UserSpline                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   UnitLength                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          RopeOffset                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    DisableRopeOffset                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class USphereComponent*>         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class USphereComponent*> URopePhy::Build_RC(class UStaticMesh* Mesh, class UStaticMesh* StartEndMesh, float CollisionScale, class USplineComponent* UserSpline, float UnitLength, const struct FVector& RopeOffset, bool DisableRopeOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RopePhy", "Build_RC");

	Params::RopePhy_Build_RC Parms{};

	Parms.Mesh = Mesh;
	Parms.StartEndMesh = StartEndMesh;
	Parms.CollisionScale = CollisionScale;
	Parms.UserSpline = UserSpline;
	Parms.UnitLength = UnitLength;
	Parms.RopeOffset = std::move(RopeOffset);
	Parms.DisableRopeOffset = DisableRopeOffset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.RopePhy.Collision_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   CollisionScale                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AngularDampening                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LinearDampening                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VelocitySolverIterationCount                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PositionSolverIterationCount                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StabilizationThresholdMultiplier                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SleepThresholdMultiplier                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InertiaTensorScale                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Mass                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MassScale                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class USphereComponent*>         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class USphereComponent*> URopePhy::Collision_RC(float CollisionScale, float AngularDampening, float LinearDampening, float VelocitySolverIterationCount, float PositionSolverIterationCount, float StabilizationThresholdMultiplier, float SleepThresholdMultiplier, float InertiaTensorScale, float Mass, float MassScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RopePhy", "Collision_RC");

	Params::RopePhy_Collision_RC Parms{};

	Parms.CollisionScale = CollisionScale;
	Parms.AngularDampening = AngularDampening;
	Parms.LinearDampening = LinearDampening;
	Parms.VelocitySolverIterationCount = VelocitySolverIterationCount;
	Parms.PositionSolverIterationCount = PositionSolverIterationCount;
	Parms.StabilizationThresholdMultiplier = StabilizationThresholdMultiplier;
	Parms.SleepThresholdMultiplier = SleepThresholdMultiplier;
	Parms.InertiaTensorScale = InertiaTensorScale;
	Parms.Mass = Mass;
	Parms.MassScale = MassScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.RopePhy.Constraint_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   AngularDrivePositionStrength                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AngularDriveVelocityStrength                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SetAngularSwing1Limit                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SetAngularSwing2Limit                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SetAngularTwistLimit                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UPhysicsConstraintComponent*>ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UPhysicsConstraintComponent*> URopePhy::Constraint_RC(const int32 AngularDrivePositionStrength, const int32 AngularDriveVelocityStrength, const int32 SetAngularSwing1Limit, const int32 SetAngularSwing2Limit, const int32 SetAngularTwistLimit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RopePhy", "Constraint_RC");

	Params::RopePhy_Constraint_RC Parms{};

	Parms.AngularDrivePositionStrength = AngularDrivePositionStrength;
	Parms.AngularDriveVelocityStrength = AngularDriveVelocityStrength;
	Parms.SetAngularSwing1Limit = SetAngularSwing1Limit;
	Parms.SetAngularSwing2Limit = SetAngularSwing2Limit;
	Parms.SetAngularTwistLimit = SetAngularTwistLimit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.RopePhy.Destroy_RC
// (Final, Native, Public, BlueprintCallable)

void URopePhy::Destroy_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RopePhy", "Destroy_RC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RopePhy.GetCollisionArray_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class USphereComponent*>         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class USphereComponent*> URopePhy::GetCollisionArray_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RopePhy", "GetCollisionArray_RC");

	Params::RopePhy_GetCollisionArray_RC Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.RopePhy.GetFirstCollisionObject_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USphereComponent*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USphereComponent* URopePhy::GetFirstCollisionObject_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RopePhy", "GetFirstCollisionObject_RC");

	Params::RopePhy_GetFirstCollisionObject_RC Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.RopePhy.GetLastCollisionObject_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USphereComponent*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USphereComponent* URopePhy::GetLastCollisionObject_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RopePhy", "GetLastCollisionObject_RC");

	Params::RopePhy_GetLastCollisionObject_RC Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.RopePhy.GetSpline_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USplineComponent*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USplineComponent* URopePhy::GetSpline_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RopePhy", "GetSpline_RC");

	Params::RopePhy_GetSpline_RC Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.RopePhy.Mesh_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StartMesh                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartMeshWidth                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               StartMeshMat01                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               StartMeshMat02                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMesh*                      Mesh01                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Mesh01Width                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               Mesh01Mat01                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               Mesh01Mat02                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMesh*                      Mesh02                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Mesh02Width                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               Mesh02Mat01                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               Mesh02Mat02                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMesh*                      Mesh03                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Mesh03Width                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               Mesh03Mat01                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               Mesh03Mat02                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMesh*                      Mesh04                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Mesh04Width                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               Mesh04Mat01                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               Mesh04Mat02                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMesh*                      EndMesh                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   EndMeshWidth                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               EndMeshMat01                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               EndMeshMat02                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class USplineMeshComponent*>     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class USplineMeshComponent*> URopePhy::Mesh_RC(class UStaticMesh* StartMesh, float StartMeshWidth, class UMaterialInterface* StartMeshMat01, class UMaterialInterface* StartMeshMat02, class UStaticMesh* Mesh01, float Mesh01Width, class UMaterialInterface* Mesh01Mat01, class UMaterialInterface* Mesh01Mat02, class UStaticMesh* Mesh02, float Mesh02Width, class UMaterialInterface* Mesh02Mat01, class UMaterialInterface* Mesh02Mat02, class UStaticMesh* Mesh03, float Mesh03Width, class UMaterialInterface* Mesh03Mat01, class UMaterialInterface* Mesh03Mat02, class UStaticMesh* Mesh04, float Mesh04Width, class UMaterialInterface* Mesh04Mat01, class UMaterialInterface* Mesh04Mat02, class UStaticMesh* EndMesh, float EndMeshWidth, class UMaterialInterface* EndMeshMat01, class UMaterialInterface* EndMeshMat02)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RopePhy", "Mesh_RC");

	Params::RopePhy_Mesh_RC Parms{};

	Parms.StartMesh = StartMesh;
	Parms.StartMeshWidth = StartMeshWidth;
	Parms.StartMeshMat01 = StartMeshMat01;
	Parms.StartMeshMat02 = StartMeshMat02;
	Parms.Mesh01 = Mesh01;
	Parms.Mesh01Width = Mesh01Width;
	Parms.Mesh01Mat01 = Mesh01Mat01;
	Parms.Mesh01Mat02 = Mesh01Mat02;
	Parms.Mesh02 = Mesh02;
	Parms.Mesh02Width = Mesh02Width;
	Parms.Mesh02Mat01 = Mesh02Mat01;
	Parms.Mesh02Mat02 = Mesh02Mat02;
	Parms.Mesh03 = Mesh03;
	Parms.Mesh03Width = Mesh03Width;
	Parms.Mesh03Mat01 = Mesh03Mat01;
	Parms.Mesh03Mat02 = Mesh03Mat02;
	Parms.Mesh04 = Mesh04;
	Parms.Mesh04Width = Mesh04Width;
	Parms.Mesh04Mat01 = Mesh04Mat01;
	Parms.Mesh04Mat02 = Mesh04Mat02;
	Parms.EndMesh = EndMesh;
	Parms.EndMeshWidth = EndMeshWidth;
	Parms.EndMeshMat01 = EndMeshMat01;
	Parms.EndMeshMat02 = EndMeshMat02;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.RopePhy.onTimerEnd
// (Final, Native, Private)

void URopePhy::OnTimerEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RopePhy", "onTimerEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RopePhy.RuntimeUpdate_RC
// (Final, Native, Private)

void URopePhy::RuntimeUpdate_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RopePhy", "RuntimeUpdate_RC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RopePhy.SetUserSplineEndLocation_RC
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class USplineComponent*                 UserSpline                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          LocationUserSplineEnd                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseRelativeLocationUserSplineEnd                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URopePhy::SetUserSplineEndLocation_RC(class USplineComponent* UserSpline, const struct FVector& LocationUserSplineEnd, bool UseRelativeLocationUserSplineEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RopePhy", "SetUserSplineEndLocation_RC");

	Params::RopePhy_SetUserSplineEndLocation_RC Parms{};

	Parms.UserSpline = UserSpline;
	Parms.LocationUserSplineEnd = std::move(LocationUserSplineEnd);
	Parms.UseRelativeLocationUserSplineEnd = UseRelativeLocationUserSplineEnd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RopePhy.SetUserSplineStartLocation_RC
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class USplineComponent*                 UserSpline                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          LocationUserSplineStart                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseRelativeLocationUserSplineStart                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URopePhy::SetUserSplineStartLocation_RC(class USplineComponent* UserSpline, const struct FVector& LocationUserSplineStart, bool UseRelativeLocationUserSplineStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RopePhy", "SetUserSplineStartLocation_RC");

	Params::RopePhy_SetUserSplineStartLocation_RC Parms{};

	Parms.UserSpline = UserSpline;
	Parms.LocationUserSplineStart = std::move(LocationUserSplineStart);
	Parms.UseRelativeLocationUserSplineStart = UseRelativeLocationUserSplineStart;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RopeStatic.AddPointsToSpline
// (Final, Native, Static, Private, HasDefaults)
// Parameters:
// class USplineComponent*                 SplineToGrow                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USplineComponent*                 UserSplineCRSIn                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumberOfLoopsAPTSIn                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   UnitLengthAPTSIn                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          RopeOffsetAPTSIn                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URopeStatic::AddPointsToSpline(class USplineComponent* SplineToGrow, class USplineComponent* UserSplineCRSIn, const int32 NumberOfLoopsAPTSIn, const float UnitLengthAPTSIn, const struct FVector& RopeOffsetAPTSIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RopeStatic", "AddPointsToSpline");

	Params::RopeStatic_AddPointsToSpline Parms{};

	Parms.SplineToGrow = SplineToGrow;
	Parms.UserSplineCRSIn = UserSplineCRSIn;
	Parms.NumberOfLoopsAPTSIn = NumberOfLoopsAPTSIn;
	Parms.UnitLengthAPTSIn = UnitLengthAPTSIn;
	Parms.RopeOffsetAPTSIn = std::move(RopeOffsetAPTSIn);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RopeStatic.AdjustRenderSplineLocation
// (Final, Native, Static, Private)
// Parameters:
// class USplineComponent*                 RenderSpline                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USplineComponent*                 UserSpline                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              AttachedPrimitive                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumberOfLoops                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URopeStatic::AdjustRenderSplineLocation(class USplineComponent* RenderSpline, class USplineComponent* UserSpline, class UPrimitiveComponent* AttachedPrimitive, const int32 NumberOfLoops, const class FName SocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RopeStatic", "AdjustRenderSplineLocation");

	Params::RopeStatic_AdjustRenderSplineLocation Parms{};

	Parms.RenderSpline = RenderSpline;
	Parms.UserSpline = UserSpline;
	Parms.AttachedPrimitive = AttachedPrimitive;
	Parms.NumberOfLoops = NumberOfLoops;
	Parms.SocketName = SocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RopeStatic.ConfigureSplineMeshes
// (Final, Native, Static, Private)
// Parameters:
// class USplineMeshComponent*             SplineMeshConfigSMInput                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMesh*                      MeshTypeConfigSMInput                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MeshWidthConfigSMInput                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               MeshMaterial01ConfigSMInput                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               MeshMaterial02ConfigSMInput                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URopeStatic::ConfigureSplineMeshes(class USplineMeshComponent* SplineMeshConfigSMInput, class UStaticMesh* MeshTypeConfigSMInput, float MeshWidthConfigSMInput, class UMaterialInterface* MeshMaterial01ConfigSMInput, class UMaterialInterface* MeshMaterial02ConfigSMInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RopeStatic", "ConfigureSplineMeshes");

	Params::RopeStatic_ConfigureSplineMeshes Parms{};

	Parms.SplineMeshConfigSMInput = SplineMeshConfigSMInput;
	Parms.MeshTypeConfigSMInput = MeshTypeConfigSMInput;
	Parms.MeshWidthConfigSMInput = MeshWidthConfigSMInput;
	Parms.MeshMaterial01ConfigSMInput = MeshMaterial01ConfigSMInput;
	Parms.MeshMaterial02ConfigSMInput = MeshMaterial02ConfigSMInput;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RopeStatic.CreateSpline
// (Final, Native, Static, Private, HasDefaults)
// Parameters:
// class USplineComponent*                 InSplineCS                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          WorldLocationCS                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         WorldRotationCS                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class UWorld*                           WorldRefCSIn                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  SelfRefCSIn                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URopeStatic::CreateSpline(class USplineComponent* InSplineCS, const struct FVector& WorldLocationCS, const struct FRotator& WorldRotationCS, class UWorld* WorldRefCSIn, class USceneComponent* SelfRefCSIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RopeStatic", "CreateSpline");

	Params::RopeStatic_CreateSpline Parms{};

	Parms.InSplineCS = InSplineCS;
	Parms.WorldLocationCS = std::move(WorldLocationCS);
	Parms.WorldRotationCS = std::move(WorldRotationCS);
	Parms.WorldRefCSIn = WorldRefCSIn;
	Parms.SelfRefCSIn = SelfRefCSIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RopeStatic.CreateSplineMeshes
// (Final, Native, Static, Private)
// Parameters:
// class USplineMeshComponent*             SplineMeshCSMInput                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWorld*                           WorldRefCSMIn                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USplineComponent*                 SplineOwnerRefCSMIn                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URopeStatic::CreateSplineMeshes(class USplineMeshComponent* SplineMeshCSMInput, class UWorld* WorldRefCSMIn, class USplineComponent* SplineOwnerRefCSMIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RopeStatic", "CreateSplineMeshes");

	Params::RopeStatic_CreateSplineMeshes Parms{};

	Parms.SplineMeshCSMInput = SplineMeshCSMInput;
	Parms.WorldRefCSMIn = WorldRefCSMIn;
	Parms.SplineOwnerRefCSMIn = SplineOwnerRefCSMIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RopeStatic.CreateUniqueName
// (Final, Native, Static, Private)
// Parameters:
// class FString                           ComponentType                                          (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ComponentNumber                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ThisComponentStrNameCUNIn                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class FName URopeStatic::CreateUniqueName(const class FString& ComponentType, const int32 ComponentNumber, const class FString& ThisComponentStrNameCUNIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RopeStatic", "CreateUniqueName");

	Params::RopeStatic_CreateUniqueName Parms{};

	Parms.ComponentType = std::move(ComponentType);
	Parms.ComponentNumber = ComponentNumber;
	Parms.ThisComponentStrNameCUNIn = std::move(ThisComponentStrNameCUNIn);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.RopeStatic.SetSplMLocTang
// (Final, Native, Static, Private)
// Parameters:
// class USplineComponent*                 ITargetSpline                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USplineMeshComponent*             InTargetSplM                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   IEditPoint                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   UnitLengthSSMLTIn                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URopeStatic::SetSplMLocTang(class USplineComponent* ITargetSpline, class USplineMeshComponent* InTargetSplM, const int32 IEditPoint, const float UnitLengthSSMLTIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RopeStatic", "SetSplMLocTang");

	Params::RopeStatic_SetSplMLocTang Parms{};

	Parms.ITargetSpline = ITargetSpline;
	Parms.InTargetSplM = InTargetSplM;
	Parms.IEditPoint = IEditPoint;
	Parms.UnitLengthSSMLTIn = UnitLengthSSMLTIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RopeStatic.SplineUpDir
// (Final, Native, Static, Private)
// Parameters:
// class USplineComponent*                 ITargetSpline                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ISplineUpDirClamp                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URopeStatic::SplineUpDir(class USplineComponent* ITargetSpline, const float ISplineUpDirClamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RopeStatic", "SplineUpDir");

	Params::RopeStatic_SplineUpDir Parms{};

	Parms.ITargetSpline = ITargetSpline;
	Parms.ISplineUpDirClamp = ISplineUpDirClamp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RopeStatic.Build_RC
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class USplineComponent*                 UserSpline                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMesh*                      StartEndMesh                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CollisionScale                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   UnitLength                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          RopeOffset                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    DisableRopeOffset                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class USphereComponent*>         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class USphereComponent*> URopeStatic::Build_RC(class USplineComponent* UserSpline, class UStaticMesh* Mesh, class UStaticMesh* StartEndMesh, int32 CollisionScale, float UnitLength, const struct FVector& RopeOffset, bool DisableRopeOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RopeStatic", "Build_RC");

	Params::RopeStatic_Build_RC Parms{};

	Parms.UserSpline = UserSpline;
	Parms.Mesh = Mesh;
	Parms.StartEndMesh = StartEndMesh;
	Parms.CollisionScale = CollisionScale;
	Parms.UnitLength = UnitLength;
	Parms.RopeOffset = std::move(RopeOffset);
	Parms.DisableRopeOffset = DisableRopeOffset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.RopeStatic.Destroy_RC
// (Final, Native, Public, BlueprintCallable)

void URopeStatic::Destroy_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RopeStatic", "Destroy_RC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RopeStatic.Get_Spline_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USplineComponent*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USplineComponent* URopeStatic::Get_Spline_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RopeStatic", "Get_Spline_RC");

	Params::RopeStatic_Get_Spline_RC Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.RopeStatic.GetCollisionArray_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class USphereComponent*>         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class USphereComponent*> URopeStatic::GetCollisionArray_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RopeStatic", "GetCollisionArray_RC");

	Params::RopeStatic_GetCollisionArray_RC Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.RopeStatic.GetFirstCollisionObject_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USphereComponent*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USphereComponent* URopeStatic::GetFirstCollisionObject_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RopeStatic", "GetFirstCollisionObject_RC");

	Params::RopeStatic_GetFirstCollisionObject_RC Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.RopeStatic.GetLastCollisionObject_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USphereComponent*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USphereComponent* URopeStatic::GetLastCollisionObject_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RopeStatic", "GetLastCollisionObject_RC");

	Params::RopeStatic_GetLastCollisionObject_RC Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.RopeStatic.Mesh_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StartMesh                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartMeshWidth                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               StartMeshMat01                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               StartMeshMat02                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMesh*                      Mesh01                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Mesh01Width                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               Mesh01Mat01                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               Mesh01Mat02                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMesh*                      Mesh02                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Mesh02Width                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               Mesh02Mat01                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               Mesh02Mat02                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMesh*                      Mesh03                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Mesh03Width                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               Mesh03Mat01                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               Mesh03Mat02                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMesh*                      Mesh04                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Mesh04Width                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               Mesh04Mat01                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               Mesh04Mat02                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMesh*                      EndMesh                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   EndMeshWidth                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               EndMeshMat01                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               EndMeshMat02                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class USplineMeshComponent*>     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class USplineMeshComponent*> URopeStatic::Mesh_RC(class UStaticMesh* StartMesh, float StartMeshWidth, class UMaterialInterface* StartMeshMat01, class UMaterialInterface* StartMeshMat02, class UStaticMesh* Mesh01, float Mesh01Width, class UMaterialInterface* Mesh01Mat01, class UMaterialInterface* Mesh01Mat02, class UStaticMesh* Mesh02, float Mesh02Width, class UMaterialInterface* Mesh02Mat01, class UMaterialInterface* Mesh02Mat02, class UStaticMesh* Mesh03, float Mesh03Width, class UMaterialInterface* Mesh03Mat01, class UMaterialInterface* Mesh03Mat02, class UStaticMesh* Mesh04, float Mesh04Width, class UMaterialInterface* Mesh04Mat01, class UMaterialInterface* Mesh04Mat02, class UStaticMesh* EndMesh, float EndMeshWidth, class UMaterialInterface* EndMeshMat01, class UMaterialInterface* EndMeshMat02)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RopeStatic", "Mesh_RC");

	Params::RopeStatic_Mesh_RC Parms{};

	Parms.StartMesh = StartMesh;
	Parms.StartMeshWidth = StartMeshWidth;
	Parms.StartMeshMat01 = StartMeshMat01;
	Parms.StartMeshMat02 = StartMeshMat02;
	Parms.Mesh01 = Mesh01;
	Parms.Mesh01Width = Mesh01Width;
	Parms.Mesh01Mat01 = Mesh01Mat01;
	Parms.Mesh01Mat02 = Mesh01Mat02;
	Parms.Mesh02 = Mesh02;
	Parms.Mesh02Width = Mesh02Width;
	Parms.Mesh02Mat01 = Mesh02Mat01;
	Parms.Mesh02Mat02 = Mesh02Mat02;
	Parms.Mesh03 = Mesh03;
	Parms.Mesh03Width = Mesh03Width;
	Parms.Mesh03Mat01 = Mesh03Mat01;
	Parms.Mesh03Mat02 = Mesh03Mat02;
	Parms.Mesh04 = Mesh04;
	Parms.Mesh04Width = Mesh04Width;
	Parms.Mesh04Mat01 = Mesh04Mat01;
	Parms.Mesh04Mat02 = Mesh04Mat02;
	Parms.EndMesh = EndMesh;
	Parms.EndMeshWidth = EndMeshWidth;
	Parms.EndMeshMat01 = EndMeshMat01;
	Parms.EndMeshMat02 = EndMeshMat02;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.RopeStatic.SetUserSplineEndLocation_RC
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class USplineComponent*                 UserSpline                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseRelativeLocation                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URopeStatic::SetUserSplineEndLocation_RC(class USplineComponent* UserSpline, const struct FVector& Location, bool UseRelativeLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RopeStatic", "SetUserSplineEndLocation_RC");

	Params::RopeStatic_SetUserSplineEndLocation_RC Parms{};

	Parms.UserSpline = UserSpline;
	Parms.Location = std::move(Location);
	Parms.UseRelativeLocation = UseRelativeLocation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.RopeStatic.SetUserSplineStartLocation_RC
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class USplineComponent*                 UserSpline                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseRelativeLocation                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URopeStatic::SetUserSplineStartLocation_RC(class USplineComponent* UserSpline, const struct FVector& Location, bool UseRelativeLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RopeStatic", "SetUserSplineStartLocation_RC");

	Params::RopeStatic_SetUserSplineStartLocation_RC Parms{};

	Parms.UserSpline = UserSpline;
	Parms.Location = std::move(Location);
	Parms.UseRelativeLocation = UseRelativeLocation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.Rope_Cutting.AddPointsToBuildingSpline
// (Final, Native, Static, Private)
// Parameters:
// class USplineComponent*                 SplineToGrow                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumberOfLoopsAPTSIn                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   UnitLengthAPTSIn                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URope_Cutting::AddPointsToBuildingSpline(class USplineComponent* SplineToGrow, const int32 NumberOfLoopsAPTSIn, const float UnitLengthAPTSIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("Rope_Cutting", "AddPointsToBuildingSpline");

	Params::Rope_Cutting_AddPointsToBuildingSpline Parms{};

	Parms.SplineToGrow = SplineToGrow;
	Parms.NumberOfLoopsAPTSIn = NumberOfLoopsAPTSIn;
	Parms.UnitLengthAPTSIn = UnitLengthAPTSIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.Rope_Cutting.AddPointsToSpline
// (Final, Native, Static, Private, HasDefaults)
// Parameters:
// class USplineComponent*                 SplineToGrow                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USplineComponent*                 UserSplineCRSIn                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumberOfLoopsAPTSIn                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   UnitLengthAPTSIn                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          RopeOffsetAPTSIn                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URope_Cutting::AddPointsToSpline(class USplineComponent* SplineToGrow, class USplineComponent* UserSplineCRSIn, const int32 NumberOfLoopsAPTSIn, const float UnitLengthAPTSIn, const struct FVector& RopeOffsetAPTSIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("Rope_Cutting", "AddPointsToSpline");

	Params::Rope_Cutting_AddPointsToSpline Parms{};

	Parms.SplineToGrow = SplineToGrow;
	Parms.UserSplineCRSIn = UserSplineCRSIn;
	Parms.NumberOfLoopsAPTSIn = NumberOfLoopsAPTSIn;
	Parms.UnitLengthAPTSIn = UnitLengthAPTSIn;
	Parms.RopeOffsetAPTSIn = std::move(RopeOffsetAPTSIn);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.Rope_Cutting.AdjustRenderSplineLocation
// (Final, Native, Static, Private)
// Parameters:
// class USplineComponent*                 RenderSpline                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USplineComponent*                 UserSpline                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              AttachedPrimitive                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumberOfLoops                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URope_Cutting::AdjustRenderSplineLocation(class USplineComponent* RenderSpline, class USplineComponent* UserSpline, class UPrimitiveComponent* AttachedPrimitive, const int32 NumberOfLoops, const class FName SocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("Rope_Cutting", "AdjustRenderSplineLocation");

	Params::Rope_Cutting_AdjustRenderSplineLocation Parms{};

	Parms.RenderSpline = RenderSpline;
	Parms.UserSpline = UserSpline;
	Parms.AttachedPrimitive = AttachedPrimitive;
	Parms.NumberOfLoops = NumberOfLoops;
	Parms.SocketName = SocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.Rope_Cutting.ConfigureSplineMeshes
// (Final, Native, Static, Private)
// Parameters:
// class USplineMeshComponent*             SplineMeshConfigSMInput                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMesh*                      MeshTypeConfigSMInput                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MeshWidthConfigSMInput                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               MeshMaterial01ConfigSMInput                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               MeshMaterial02ConfigSMInput                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URope_Cutting::ConfigureSplineMeshes(class USplineMeshComponent* SplineMeshConfigSMInput, class UStaticMesh* MeshTypeConfigSMInput, float MeshWidthConfigSMInput, class UMaterialInterface* MeshMaterial01ConfigSMInput, class UMaterialInterface* MeshMaterial02ConfigSMInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("Rope_Cutting", "ConfigureSplineMeshes");

	Params::Rope_Cutting_ConfigureSplineMeshes Parms{};

	Parms.SplineMeshConfigSMInput = SplineMeshConfigSMInput;
	Parms.MeshTypeConfigSMInput = MeshTypeConfigSMInput;
	Parms.MeshWidthConfigSMInput = MeshWidthConfigSMInput;
	Parms.MeshMaterial01ConfigSMInput = MeshMaterial01ConfigSMInput;
	Parms.MeshMaterial02ConfigSMInput = MeshMaterial02ConfigSMInput;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.Rope_Cutting.CreateSphereCollision
// (Final, Native, Static, Private)
// Parameters:
// class USphereComponent*                 SphereCollisionCSCIn                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWorld*                           WorldRefCSCIn                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USplineComponent*                 SplineRefCSCIn                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URope_Cutting::CreateSphereCollision(class USphereComponent* SphereCollisionCSCIn, class UWorld* WorldRefCSCIn, class USplineComponent* SplineRefCSCIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("Rope_Cutting", "CreateSphereCollision");

	Params::Rope_Cutting_CreateSphereCollision Parms{};

	Parms.SphereCollisionCSCIn = SphereCollisionCSCIn;
	Parms.WorldRefCSCIn = WorldRefCSCIn;
	Parms.SplineRefCSCIn = SplineRefCSCIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.Rope_Cutting.CreateSpline
// (Final, Native, Static, Private, HasDefaults)
// Parameters:
// class USplineComponent*                 InSplineCS                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          WorldLocationCS                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         WorldRotationCS                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class UWorld*                           WorldRefCSIn                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  SelfRefCSIn                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URope_Cutting::CreateSpline(class USplineComponent* InSplineCS, const struct FVector& WorldLocationCS, const struct FRotator& WorldRotationCS, class UWorld* WorldRefCSIn, class USceneComponent* SelfRefCSIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("Rope_Cutting", "CreateSpline");

	Params::Rope_Cutting_CreateSpline Parms{};

	Parms.InSplineCS = InSplineCS;
	Parms.WorldLocationCS = std::move(WorldLocationCS);
	Parms.WorldRotationCS = std::move(WorldRotationCS);
	Parms.WorldRefCSIn = WorldRefCSIn;
	Parms.SelfRefCSIn = SelfRefCSIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.Rope_Cutting.CreateSplineMeshes
// (Final, Native, Static, Private)
// Parameters:
// class USplineMeshComponent*             SplineMeshCSMInput                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWorld*                           WorldRefCSMIn                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USplineComponent*                 SplineOwnerRefCSMIn                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URope_Cutting::CreateSplineMeshes(class USplineMeshComponent* SplineMeshCSMInput, class UWorld* WorldRefCSMIn, class USplineComponent* SplineOwnerRefCSMIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("Rope_Cutting", "CreateSplineMeshes");

	Params::Rope_Cutting_CreateSplineMeshes Parms{};

	Parms.SplineMeshCSMInput = SplineMeshCSMInput;
	Parms.WorldRefCSMIn = WorldRefCSMIn;
	Parms.SplineOwnerRefCSMIn = SplineOwnerRefCSMIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.Rope_Cutting.CreateUniqueName
// (Final, Native, Static, Private)
// Parameters:
// class FString                           ComponentType                                          (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ComponentNumber                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ThisComponentStrNameCUNIn                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class FName URope_Cutting::CreateUniqueName(const class FString& ComponentType, const int32 ComponentNumber, const class FString& ThisComponentStrNameCUNIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("Rope_Cutting", "CreateUniqueName");

	Params::Rope_Cutting_CreateUniqueName Parms{};

	Parms.ComponentType = std::move(ComponentType);
	Parms.ComponentNumber = ComponentNumber;
	Parms.ThisComponentStrNameCUNIn = std::move(ThisComponentStrNameCUNIn);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.Rope_Cutting.MakePhysConstr
// (Final, Native, Static, Private, HasDefaults)
// Parameters:
// class UPhysicsConstraintComponent*      PhyConstrMPCIn                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWorld*                           WorldRefMPCIn                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          WorldLocationMPCIn                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USphereComponent*                 CollRefAttachMPCIn                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URope_Cutting::MakePhysConstr(class UPhysicsConstraintComponent* PhyConstrMPCIn, class UWorld* WorldRefMPCIn, const struct FVector& WorldLocationMPCIn, class USphereComponent* CollRefAttachMPCIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("Rope_Cutting", "MakePhysConstr");

	Params::Rope_Cutting_MakePhysConstr Parms{};

	Parms.PhyConstrMPCIn = PhyConstrMPCIn;
	Parms.WorldRefMPCIn = WorldRefMPCIn;
	Parms.WorldLocationMPCIn = std::move(WorldLocationMPCIn);
	Parms.CollRefAttachMPCIn = CollRefAttachMPCIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.Rope_Cutting.PhyConstrConfig
// (Final, Native, Static, Private)
// Parameters:
// class UPhysicsConstraintComponent*      PhyConstrIn                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SetAngularSwing1LimitPCCIn                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SetAngularSwing2LimitPCCIn                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SetAngularTwistLimitPCCIn                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PositionStrengthPCCIn                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VelocityStrengthPCCIn                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URope_Cutting::PhyConstrConfig(class UPhysicsConstraintComponent* PhyConstrIn, float SetAngularSwing1LimitPCCIn, float SetAngularSwing2LimitPCCIn, float SetAngularTwistLimitPCCIn, float PositionStrengthPCCIn, float VelocityStrengthPCCIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("Rope_Cutting", "PhyConstrConfig");

	Params::Rope_Cutting_PhyConstrConfig Parms{};

	Parms.PhyConstrIn = PhyConstrIn;
	Parms.SetAngularSwing1LimitPCCIn = SetAngularSwing1LimitPCCIn;
	Parms.SetAngularSwing2LimitPCCIn = SetAngularSwing2LimitPCCIn;
	Parms.SetAngularTwistLimitPCCIn = SetAngularTwistLimitPCCIn;
	Parms.PositionStrengthPCCIn = PositionStrengthPCCIn;
	Parms.VelocityStrengthPCCIn = VelocityStrengthPCCIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.Rope_Cutting.SetSplMLocTang
// (Final, Native, Static, Private)
// Parameters:
// class USplineComponent*                 ITargetSpline                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USplineMeshComponent*             InTargetSplM                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   IEditPoint                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   UnitLengthSSMLTIn                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URope_Cutting::SetSplMLocTang(class USplineComponent* ITargetSpline, class USplineMeshComponent* InTargetSplM, const int32 IEditPoint, const float UnitLengthSSMLTIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("Rope_Cutting", "SetSplMLocTang");

	Params::Rope_Cutting_SetSplMLocTang Parms{};

	Parms.ITargetSpline = ITargetSpline;
	Parms.InTargetSplM = InTargetSplM;
	Parms.IEditPoint = IEditPoint;
	Parms.UnitLengthSSMLTIn = UnitLengthSSMLTIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.Rope_Cutting.SphereCollisionConfig
// (Final, Native, Static, Private)
// Parameters:
// bool                                    ShouldBlock                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    SimPhysics                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USphereComponent*                 SphereCollisionIn                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AngularDampeningSCCIn                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LinearDampeningSCCIn                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PositionSolverSCCIn                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VelocitySolverSCCIn                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StabilizationThresholdMultiplierSCCIn                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SleepThresholdMultiplierSCCIn                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InertiaTensorScaleSCCIn                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CollUnitScaleSCCIn                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             GeneralName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SpecificInstanceNameCSCIn                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Mass                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MassScale                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URope_Cutting::SphereCollisionConfig(bool ShouldBlock, bool SimPhysics, class USphereComponent* SphereCollisionIn, float AngularDampeningSCCIn, float LinearDampeningSCCIn, float PositionSolverSCCIn, float VelocitySolverSCCIn, float StabilizationThresholdMultiplierSCCIn, float SleepThresholdMultiplierSCCIn, float InertiaTensorScaleSCCIn, float CollUnitScaleSCCIn, const class FName GeneralName, class FName SpecificInstanceNameCSCIn, float Mass, float MassScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("Rope_Cutting", "SphereCollisionConfig");

	Params::Rope_Cutting_SphereCollisionConfig Parms{};

	Parms.ShouldBlock = ShouldBlock;
	Parms.SimPhysics = SimPhysics;
	Parms.SphereCollisionIn = SphereCollisionIn;
	Parms.AngularDampeningSCCIn = AngularDampeningSCCIn;
	Parms.LinearDampeningSCCIn = LinearDampeningSCCIn;
	Parms.PositionSolverSCCIn = PositionSolverSCCIn;
	Parms.VelocitySolverSCCIn = VelocitySolverSCCIn;
	Parms.StabilizationThresholdMultiplierSCCIn = StabilizationThresholdMultiplierSCCIn;
	Parms.SleepThresholdMultiplierSCCIn = SleepThresholdMultiplierSCCIn;
	Parms.InertiaTensorScaleSCCIn = InertiaTensorScaleSCCIn;
	Parms.CollUnitScaleSCCIn = CollUnitScaleSCCIn;
	Parms.GeneralName = GeneralName;
	Parms.SpecificInstanceNameCSCIn = SpecificInstanceNameCSCIn;
	Parms.Mass = Mass;
	Parms.MassScale = MassScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.Rope_Cutting.SplineUpDir
// (Final, Native, Static, Private)
// Parameters:
// class USplineComponent*                 ITargetSpline                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ISplineUpDirClamp                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URope_Cutting::SplineUpDir(class USplineComponent* ITargetSpline, const float ISplineUpDirClamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("Rope_Cutting", "SplineUpDir");

	Params::Rope_Cutting_SplineUpDir Parms{};

	Parms.ITargetSpline = ITargetSpline;
	Parms.ISplineUpDirClamp = ISplineUpDirClamp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.Rope_Cutting.TransferSphereCollision
// (Final, Native, Static, Private)
// Parameters:
// class USphereComponent*                 SphereCollisionArrayTSCIn                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USplineComponent*                 TargetSplineTSCIn                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EditPoint                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URope_Cutting::TransferSphereCollision(class USphereComponent* SphereCollisionArrayTSCIn, class USplineComponent* TargetSplineTSCIn, const int32 EditPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("Rope_Cutting", "TransferSphereCollision");

	Params::Rope_Cutting_TransferSphereCollision Parms{};

	Parms.SphereCollisionArrayTSCIn = SphereCollisionArrayTSCIn;
	Parms.TargetSplineTSCIn = TargetSplineTSCIn;
	Parms.EditPoint = EditPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.Rope_Cutting.TransferSplineMeshes
// (Final, Native, Static, Private)
// Parameters:
// class USplineMeshComponent*             SplMeshArrayTSMIn                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USplineComponent*                 TargetSplineTSMIn                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   UnitLengthTSMIn                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   IEditPoint                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URope_Cutting::TransferSplineMeshes(class USplineMeshComponent* SplMeshArrayTSMIn, class USplineComponent* TargetSplineTSMIn, const float UnitLengthTSMIn, const int32 IEditPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("Rope_Cutting", "TransferSplineMeshes");

	Params::Rope_Cutting_TransferSplineMeshes Parms{};

	Parms.SplMeshArrayTSMIn = SplMeshArrayTSMIn;
	Parms.TargetSplineTSMIn = TargetSplineTSMIn;
	Parms.UnitLengthTSMIn = UnitLengthTSMIn;
	Parms.IEditPoint = IEditPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.Rope_Cutting.Attach_End_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              EndPrimitive                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             EndSocket                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             EndBone                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    FurtherConstrain                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsImmobile                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AngularSwing1Limit                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AngularSwing2Limit                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AngularTwistLimit                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PositionStrength                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VelocityStrength                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UPhysicsConstraintComponent*>ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UPhysicsConstraintComponent*> URope_Cutting::Attach_End_RC(class UPrimitiveComponent* EndPrimitive, const class FName EndSocket, const class FName EndBone, bool FurtherConstrain, bool IsImmobile, const float AngularSwing1Limit, const float AngularSwing2Limit, const float AngularTwistLimit, const float PositionStrength, const float VelocityStrength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "Attach_End_RC");

	Params::Rope_Cutting_Attach_End_RC Parms{};

	Parms.EndPrimitive = EndPrimitive;
	Parms.EndSocket = EndSocket;
	Parms.EndBone = EndBone;
	Parms.FurtherConstrain = FurtherConstrain;
	Parms.IsImmobile = IsImmobile;
	Parms.AngularSwing1Limit = AngularSwing1Limit;
	Parms.AngularSwing2Limit = AngularSwing2Limit;
	Parms.AngularTwistLimit = AngularTwistLimit;
	Parms.PositionStrength = PositionStrength;
	Parms.VelocityStrength = VelocityStrength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.Rope_Cutting.Attach_Start_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              StartPrimitive                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             StartSocket                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             StartBone                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    FurtherConstrain                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsImmobile                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AngularSwing1Limit                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AngularSwing2Limit                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AngularTwistLimit                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PositionStrength                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VelocityStrength                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UPhysicsConstraintComponent*>ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UPhysicsConstraintComponent*> URope_Cutting::Attach_Start_RC(class UPrimitiveComponent* StartPrimitive, const class FName StartSocket, const class FName StartBone, bool FurtherConstrain, bool IsImmobile, const float AngularSwing1Limit, const float AngularSwing2Limit, const float AngularTwistLimit, const float PositionStrength, const float VelocityStrength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "Attach_Start_RC");

	Params::Rope_Cutting_Attach_Start_RC Parms{};

	Parms.StartPrimitive = StartPrimitive;
	Parms.StartSocket = StartSocket;
	Parms.StartBone = StartBone;
	Parms.FurtherConstrain = FurtherConstrain;
	Parms.IsImmobile = IsImmobile;
	Parms.AngularSwing1Limit = AngularSwing1Limit;
	Parms.AngularSwing2Limit = AngularSwing2Limit;
	Parms.AngularTwistLimit = AngularTwistLimit;
	Parms.PositionStrength = PositionStrength;
	Parms.VelocityStrength = VelocityStrength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.Rope_Cutting.Build_RC
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class USplineComponent*                 UserSpline                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMesh*                      StartEndMesh                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   UnitLength                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          RopeOffset                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    DisableRopeOffset                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RuntimeUpdateRate                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    BlockCutting                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class USphereComponent*>         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class USphereComponent*> URope_Cutting::Build_RC(class USplineComponent* UserSpline, class UStaticMesh* Mesh, class UStaticMesh* StartEndMesh, float UnitLength, const struct FVector& RopeOffset, bool DisableRopeOffset, float RuntimeUpdateRate, bool BlockCutting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "Build_RC");

	Params::Rope_Cutting_Build_RC Parms{};

	Parms.UserSpline = UserSpline;
	Parms.Mesh = Mesh;
	Parms.StartEndMesh = StartEndMesh;
	Parms.UnitLength = UnitLength;
	Parms.RopeOffset = std::move(RopeOffset);
	Parms.DisableRopeOffset = DisableRopeOffset;
	Parms.RuntimeUpdateRate = RuntimeUpdateRate;
	Parms.BlockCutting = BlockCutting;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.Rope_Cutting.Collision_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   CollisionScale                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AngularDampening                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LinearDampening                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VelocitySolverIterationCount                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PositionSolverIterationCount                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StabilizationThresholdMultiplier                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SleepThresholdMultiplier                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InertiaTensorScale                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Mass                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MassScale                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class USphereComponent*>         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class USphereComponent*> URope_Cutting::Collision_RC(float CollisionScale, float AngularDampening, float LinearDampening, float VelocitySolverIterationCount, float PositionSolverIterationCount, float StabilizationThresholdMultiplier, float SleepThresholdMultiplier, float InertiaTensorScale, float Mass, float MassScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "Collision_RC");

	Params::Rope_Cutting_Collision_RC Parms{};

	Parms.CollisionScale = CollisionScale;
	Parms.AngularDampening = AngularDampening;
	Parms.LinearDampening = LinearDampening;
	Parms.VelocitySolverIterationCount = VelocitySolverIterationCount;
	Parms.PositionSolverIterationCount = PositionSolverIterationCount;
	Parms.StabilizationThresholdMultiplier = StabilizationThresholdMultiplier;
	Parms.SleepThresholdMultiplier = SleepThresholdMultiplier;
	Parms.InertiaTensorScale = InertiaTensorScale;
	Parms.Mass = Mass;
	Parms.MassScale = MassScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.Rope_Cutting.Constraint_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   AngularDrivePositionStrength                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AngularDriveVelocityStrength                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SetAngularSwing1Limit                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SetAngularSwing2Limit                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SetAngularTwistLimit                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UPhysicsConstraintComponent*>ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UPhysicsConstraintComponent*> URope_Cutting::Constraint_RC(const int32 AngularDrivePositionStrength, const int32 AngularDriveVelocityStrength, const int32 SetAngularSwing1Limit, const int32 SetAngularSwing2Limit, const int32 SetAngularTwistLimit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "Constraint_RC");

	Params::Rope_Cutting_Constraint_RC Parms{};

	Parms.AngularDrivePositionStrength = AngularDrivePositionStrength;
	Parms.AngularDriveVelocityStrength = AngularDriveVelocityStrength;
	Parms.SetAngularSwing1Limit = SetAngularSwing1Limit;
	Parms.SetAngularSwing2Limit = SetAngularSwing2Limit;
	Parms.SetAngularTwistLimit = SetAngularTwistLimit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.Rope_Cutting.CutRope
// (Final, Native, Private)

void URope_Cutting::CutRope()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "CutRope");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.Rope_Cutting.Destroy_RC
// (Final, Native, Public, BlueprintCallable)

void URope_Cutting::Destroy_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "Destroy_RC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.Rope_Cutting.Detach_End_RC
// (Final, Native, Public, BlueprintCallable)

void URope_Cutting::Detach_End_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "Detach_End_RC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.Rope_Cutting.Detach_Start_RC
// (Final, Native, Public, BlueprintCallable)

void URope_Cutting::Detach_Start_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "Detach_Start_RC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.Rope_Cutting.Effect_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UParticleSystem*                  Emitter                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundCue*                        Sound                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URope_Cutting::Effect_RC(class UParticleSystem* Emitter, class USoundCue* Sound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "Effect_RC");

	Params::Rope_Cutting_Effect_RC Parms{};

	Parms.Emitter = Emitter;
	Parms.Sound = Sound;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.Rope_Cutting.Get_Attached_End_Constraints_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class UPhysicsConstraintComponent*>ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UPhysicsConstraintComponent*> URope_Cutting::Get_Attached_End_Constraints_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "Get_Attached_End_Constraints_RC");

	Params::Rope_Cutting_Get_Attached_End_Constraints_RC Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.Rope_Cutting.Get_Attached_Start_Constraints_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class UPhysicsConstraintComponent*>ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UPhysicsConstraintComponent*> URope_Cutting::Get_Attached_Start_Constraints_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "Get_Attached_Start_Constraints_RC");

	Params::Rope_Cutting_Get_Attached_Start_Constraints_RC Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.Rope_Cutting.Get_Collision_Sphere_Position
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*              CollisionObjectForLookUp                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 URope_Cutting::Get_Collision_Sphere_Position(class UPrimitiveComponent* CollisionObjectForLookUp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "Get_Collision_Sphere_Position");

	Params::Rope_Cutting_Get_Collision_Sphere_Position Parms{};

	Parms.CollisionObjectForLookUp = CollisionObjectForLookUp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.Rope_Cutting.Get_Cut_Collision_Array
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*              CollisionObjectForLookUp                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class USphereComponent*>         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class USphereComponent*> URope_Cutting::Get_Cut_Collision_Array(class UPrimitiveComponent* CollisionObjectForLookUp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "Get_Cut_Collision_Array");

	Params::Rope_Cutting_Get_Cut_Collision_Array Parms{};

	Parms.CollisionObjectForLookUp = CollisionObjectForLookUp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.Rope_Cutting.Get_Cut_Constraint_Array
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*              CollisionObjectForLookUp                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UPhysicsConstraintComponent*>ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UPhysicsConstraintComponent*> URope_Cutting::Get_Cut_Constraint_Array(class UPrimitiveComponent* CollisionObjectForLookUp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "Get_Cut_Constraint_Array");

	Params::Rope_Cutting_Get_Cut_Constraint_Array Parms{};

	Parms.CollisionObjectForLookUp = CollisionObjectForLookUp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.Rope_Cutting.Get_Cut_Rope_Data_RC
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              CollisionObjectForLookUp                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Position                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class USphereComponent*>         CollisionArray                                         (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              PreviousCollisionSphere                                (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              NextCollisionSphere                                    (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPhysicsConstraintComponent*      Constraint                                             (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UPhysicsConstraintComponent*>ConstraintArray                                        (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class USplineMeshComponent*             SplineMesh                                             (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class USplineMeshComponent*>     SplineMeshArray                                        (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class USplineComponent*                 Spline                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URope_Cutting::Get_Cut_Rope_Data_RC(class UPrimitiveComponent* CollisionObjectForLookUp, int32* Position, struct FVector* Location, TArray<class USphereComponent*>* CollisionArray, class UPrimitiveComponent** PreviousCollisionSphere, class UPrimitiveComponent** NextCollisionSphere, class UPhysicsConstraintComponent** Constraint, TArray<class UPhysicsConstraintComponent*>* ConstraintArray, class USplineMeshComponent** SplineMesh, TArray<class USplineMeshComponent*>* SplineMeshArray, class USplineComponent** Spline)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "Get_Cut_Rope_Data_RC");

	Params::Rope_Cutting_Get_Cut_Rope_Data_RC Parms{};

	Parms.CollisionObjectForLookUp = CollisionObjectForLookUp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Position != nullptr)
		*Position = Parms.Position;

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (CollisionArray != nullptr)
		*CollisionArray = std::move(Parms.CollisionArray);

	if (PreviousCollisionSphere != nullptr)
		*PreviousCollisionSphere = Parms.PreviousCollisionSphere;

	if (NextCollisionSphere != nullptr)
		*NextCollisionSphere = Parms.NextCollisionSphere;

	if (Constraint != nullptr)
		*Constraint = Parms.Constraint;

	if (ConstraintArray != nullptr)
		*ConstraintArray = std::move(Parms.ConstraintArray);

	if (SplineMesh != nullptr)
		*SplineMesh = Parms.SplineMesh;

	if (SplineMeshArray != nullptr)
		*SplineMeshArray = std::move(Parms.SplineMeshArray);

	if (Spline != nullptr)
		*Spline = Parms.Spline;
}


// Function RopeCutting.Rope_Cutting.Get_Cut_Spline
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*              CollisionObjectForLookUp                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USplineComponent*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USplineComponent* URope_Cutting::Get_Cut_Spline(class UPrimitiveComponent* CollisionObjectForLookUp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "Get_Cut_Spline");

	Params::Rope_Cutting_Get_Cut_Spline Parms{};

	Parms.CollisionObjectForLookUp = CollisionObjectForLookUp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.Rope_Cutting.Get_Cut_Spline_Mesh_Array
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*              CollisionObjectForLookUp                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class USplineMeshComponent*>     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class USplineMeshComponent*> URope_Cutting::Get_Cut_Spline_Mesh_Array(class UPrimitiveComponent* CollisionObjectForLookUp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "Get_Cut_Spline_Mesh_Array");

	Params::Rope_Cutting_Get_Cut_Spline_Mesh_Array Parms{};

	Parms.CollisionObjectForLookUp = CollisionObjectForLookUp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.Rope_Cutting.Get_Spline_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USplineComponent*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USplineComponent* URope_Cutting::Get_Spline_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "Get_Spline_RC");

	Params::Rope_Cutting_Get_Spline_RC Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.Rope_Cutting.GetCollisionArray_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class USphereComponent*>         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class USphereComponent*> URope_Cutting::GetCollisionArray_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "GetCollisionArray_RC");

	Params::Rope_Cutting_GetCollisionArray_RC Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.Rope_Cutting.GetFirstCollisionObject_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USphereComponent*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USphereComponent* URope_Cutting::GetFirstCollisionObject_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "GetFirstCollisionObject_RC");

	Params::Rope_Cutting_GetFirstCollisionObject_RC Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.Rope_Cutting.GetGrowTargetLocation_RC
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Add                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    XAxis                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    YAxis                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ZAxis                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USphereComponent*                 FirstCollisionSphere                                   (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector URope_Cutting::GetGrowTargetLocation_RC(const struct FVector& Location, bool Add, bool XAxis, bool YAxis, bool ZAxis, class USphereComponent** FirstCollisionSphere)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "GetGrowTargetLocation_RC");

	Params::Rope_Cutting_GetGrowTargetLocation_RC Parms{};

	Parms.Location = std::move(Location);
	Parms.Add = Add;
	Parms.XAxis = XAxis;
	Parms.YAxis = YAxis;
	Parms.ZAxis = ZAxis;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FirstCollisionSphere != nullptr)
		*FirstCollisionSphere = Parms.FirstCollisionSphere;

	return Parms.ReturnValue;
}


// Function RopeCutting.Rope_Cutting.GetLastCollisionObject_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USphereComponent*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USphereComponent* URope_Cutting::GetLastCollisionObject_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "GetLastCollisionObject_RC");

	Params::Rope_Cutting_GetLastCollisionObject_RC Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.Rope_Cutting.GetOrderedTrackerArray
// (Final, Native, Private)
// Parameters:
// class USplineComponent*                 LookupSpline                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class URCTracker*>               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class URCTracker*> URope_Cutting::GetOrderedTrackerArray(class USplineComponent* LookupSpline)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "GetOrderedTrackerArray");

	Params::Rope_Cutting_GetOrderedTrackerArray Parms{};

	Parms.LookupSpline = LookupSpline;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.Rope_Cutting.GetRopeCollisionObjectName_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USphereComponent*                 RopeCollisionSphere                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName URope_Cutting::GetRopeCollisionObjectName_RC(class USphereComponent* RopeCollisionSphere)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "GetRopeCollisionObjectName_RC");

	Params::Rope_Cutting_GetRopeCollisionObjectName_RC Parms{};

	Parms.RopeCollisionSphere = RopeCollisionSphere;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.Rope_Cutting.GetShrinkTargetLocation_RC
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Add                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    XAxis                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    YAxis                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ZAxis                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USphereComponent*                 SecondCollisionSphere                                  (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector URope_Cutting::GetShrinkTargetLocation_RC(const struct FVector& Location, bool Add, bool XAxis, bool YAxis, bool ZAxis, class USphereComponent** SecondCollisionSphere)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "GetShrinkTargetLocation_RC");

	Params::Rope_Cutting_GetShrinkTargetLocation_RC Parms{};

	Parms.Location = std::move(Location);
	Parms.Add = Add;
	Parms.XAxis = XAxis;
	Parms.YAxis = YAxis;
	Parms.ZAxis = ZAxis;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SecondCollisionSphere != nullptr)
		*SecondCollisionSphere = Parms.SecondCollisionSphere;

	return Parms.ReturnValue;
}


// Function RopeCutting.Rope_Cutting.GrowRope_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              GrowLocation                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URope_Cutting::GrowRope_RC(class UPrimitiveComponent* GrowLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "GrowRope_RC");

	Params::Rope_Cutting_GrowRope_RC Parms{};

	Parms.GrowLocation = GrowLocation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.Rope_Cutting.GrowRopeImplement
// (Final, Native, Private)

void URope_Cutting::GrowRopeImplement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "GrowRopeImplement");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.Rope_Cutting.Immobilise_End_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    StopTilt                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URope_Cutting::Immobilise_End_RC(bool StopTilt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "Immobilise_End_RC");

	Params::Rope_Cutting_Immobilise_End_RC Parms{};

	Parms.StopTilt = StopTilt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.Rope_Cutting.Immobilise_Start_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    StopTilt                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URope_Cutting::Immobilise_Start_RC(bool StopTilt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "Immobilise_Start_RC");

	Params::Rope_Cutting_Immobilise_Start_RC Parms{};

	Parms.StopTilt = StopTilt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.Rope_Cutting.Mesh_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StartMesh                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartMeshWidth                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               StartMeshMat01                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               StartMeshMat02                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMesh*                      Mesh01                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Mesh01Width                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               Mesh01Mat01                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               Mesh01Mat02                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMesh*                      Mesh02                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Mesh02Width                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               Mesh02Mat01                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               Mesh02Mat02                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMesh*                      Mesh03                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Mesh03Width                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               Mesh03Mat01                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               Mesh03Mat02                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMesh*                      Mesh04                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Mesh04Width                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               Mesh04Mat01                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               Mesh04Mat02                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMesh*                      EndMesh                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   EndMeshWidth                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               EndMeshMat01                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               EndMeshMat02                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class USplineMeshComponent*>     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class USplineMeshComponent*> URope_Cutting::Mesh_RC(class UStaticMesh* StartMesh, float StartMeshWidth, class UMaterialInterface* StartMeshMat01, class UMaterialInterface* StartMeshMat02, class UStaticMesh* Mesh01, float Mesh01Width, class UMaterialInterface* Mesh01Mat01, class UMaterialInterface* Mesh01Mat02, class UStaticMesh* Mesh02, float Mesh02Width, class UMaterialInterface* Mesh02Mat01, class UMaterialInterface* Mesh02Mat02, class UStaticMesh* Mesh03, float Mesh03Width, class UMaterialInterface* Mesh03Mat01, class UMaterialInterface* Mesh03Mat02, class UStaticMesh* Mesh04, float Mesh04Width, class UMaterialInterface* Mesh04Mat01, class UMaterialInterface* Mesh04Mat02, class UStaticMesh* EndMesh, float EndMeshWidth, class UMaterialInterface* EndMeshMat01, class UMaterialInterface* EndMeshMat02)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "Mesh_RC");

	Params::Rope_Cutting_Mesh_RC Parms{};

	Parms.StartMesh = StartMesh;
	Parms.StartMeshWidth = StartMeshWidth;
	Parms.StartMeshMat01 = StartMeshMat01;
	Parms.StartMeshMat02 = StartMeshMat02;
	Parms.Mesh01 = Mesh01;
	Parms.Mesh01Width = Mesh01Width;
	Parms.Mesh01Mat01 = Mesh01Mat01;
	Parms.Mesh01Mat02 = Mesh01Mat02;
	Parms.Mesh02 = Mesh02;
	Parms.Mesh02Width = Mesh02Width;
	Parms.Mesh02Mat01 = Mesh02Mat01;
	Parms.Mesh02Mat02 = Mesh02Mat02;
	Parms.Mesh03 = Mesh03;
	Parms.Mesh03Width = Mesh03Width;
	Parms.Mesh03Mat01 = Mesh03Mat01;
	Parms.Mesh03Mat02 = Mesh03Mat02;
	Parms.Mesh04 = Mesh04;
	Parms.Mesh04Width = Mesh04Width;
	Parms.Mesh04Mat01 = Mesh04Mat01;
	Parms.Mesh04Mat02 = Mesh04Mat02;
	Parms.EndMesh = EndMesh;
	Parms.EndMeshWidth = EndMeshWidth;
	Parms.EndMeshMat01 = EndMeshMat01;
	Parms.EndMeshMat02 = EndMeshMat02;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.Rope_Cutting.MessageComponentToBeginCut_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URope_Cutting::MessageComponentToBeginCut_RC(class UPrimitiveComponent* HitComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "MessageComponentToBeginCut_RC");

	Params::Rope_Cutting_MessageComponentToBeginCut_RC Parms{};

	Parms.HitComponent = HitComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.Rope_Cutting.Mobilise_End_RC
// (Final, Native, Public, BlueprintCallable)

void URope_Cutting::Mobilise_End_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "Mobilise_End_RC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.Rope_Cutting.Mobilise_Start_RC
// (Final, Native, Public, BlueprintCallable)

void URope_Cutting::Mobilise_Start_RC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "Mobilise_Start_RC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.Rope_Cutting.onCutResTimer
// (Final, Native, Private)

void URope_Cutting::OnCutResTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "onCutResTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.Rope_Cutting.onTimerEnd
// (Final, Native, Private)

void URope_Cutting::OnTimerEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "onTimerEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.Rope_Cutting.ResetCutLoop
// (Final, Native, Private)

void URope_Cutting::ResetCutLoop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "ResetCutLoop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.Rope_Cutting.RuntimeUpdate
// (Final, Native, Private)

void URope_Cutting::RuntimeUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "RuntimeUpdate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.Rope_Cutting.SetUserSplineEndLocation_RC
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class USplineComponent*                 UserSpline                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URope_Cutting::SetUserSplineEndLocation_RC(class USplineComponent* UserSpline, const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "SetUserSplineEndLocation_RC");

	Params::Rope_Cutting_SetUserSplineEndLocation_RC Parms{};

	Parms.UserSpline = UserSpline;
	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.Rope_Cutting.SetUserSplineStartLocation_RC
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class USplineComponent*                 UserSpline                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URope_Cutting::SetUserSplineStartLocation_RC(class USplineComponent* UserSpline, const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "SetUserSplineStartLocation_RC");

	Params::Rope_Cutting_SetUserSplineStartLocation_RC Parms{};

	Parms.UserSpline = UserSpline;
	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.Rope_Cutting.ShrinkRope_RC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              ShrinkLocation                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URope_Cutting::ShrinkRope_RC(class UPrimitiveComponent* ShrinkLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "ShrinkRope_RC");

	Params::Rope_Cutting_ShrinkRope_RC Parms{};

	Parms.ShrinkLocation = ShrinkLocation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RopeCutting.Rope_Cutting.ShrinkRopeImplement
// (Final, Native, Private)

void URope_Cutting::ShrinkRopeImplement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "ShrinkRopeImplement");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RopeCutting.Rope_Cutting.UpdateSplOrCut
// (Final, Native, Private)

void URope_Cutting::UpdateSplOrCut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Rope_Cutting", "UpdateSplOrCut");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

