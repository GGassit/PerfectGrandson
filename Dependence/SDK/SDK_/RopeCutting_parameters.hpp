#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RopeCutting

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function RopeCutting.CC22.AttachChainEnd_RC
// 0x0018 (0x0018 - 0x0000)
struct CC22_AttachChainEnd_RC final
{
public:
	class UPrimitiveComponent*                    MeshToAttach;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CC22_AttachChainEnd_RC) == 0x000008, "Wrong alignment on CC22_AttachChainEnd_RC");
static_assert(sizeof(CC22_AttachChainEnd_RC) == 0x000018, "Wrong size on CC22_AttachChainEnd_RC");
static_assert(offsetof(CC22_AttachChainEnd_RC, MeshToAttach) == 0x000000, "Member 'CC22_AttachChainEnd_RC::MeshToAttach' has a wrong offset!");
static_assert(offsetof(CC22_AttachChainEnd_RC, SocketName) == 0x000008, "Member 'CC22_AttachChainEnd_RC::SocketName' has a wrong offset!");
static_assert(offsetof(CC22_AttachChainEnd_RC, BoneName) == 0x000010, "Member 'CC22_AttachChainEnd_RC::BoneName' has a wrong offset!");

// Function RopeCutting.CC22.AttachChainStart_CC
// 0x0018 (0x0018 - 0x0000)
struct CC22_AttachChainStart_CC final
{
public:
	class UPrimitiveComponent*                    MeshToAttach;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CC22_AttachChainStart_CC) == 0x000008, "Wrong alignment on CC22_AttachChainStart_CC");
static_assert(sizeof(CC22_AttachChainStart_CC) == 0x000018, "Wrong size on CC22_AttachChainStart_CC");
static_assert(offsetof(CC22_AttachChainStart_CC, MeshToAttach) == 0x000000, "Member 'CC22_AttachChainStart_CC::MeshToAttach' has a wrong offset!");
static_assert(offsetof(CC22_AttachChainStart_CC, SocketName) == 0x000008, "Member 'CC22_AttachChainStart_CC::SocketName' has a wrong offset!");
static_assert(offsetof(CC22_AttachChainStart_CC, BoneName) == 0x000010, "Member 'CC22_AttachChainStart_CC::BoneName' has a wrong offset!");

// Function RopeCutting.CC22.BreakChain_CC
// 0x0008 (0x0008 - 0x0000)
struct CC22_BreakChain_CC final
{
public:
	class UPrimitiveComponent*                    ChainLinkHit;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CC22_BreakChain_CC) == 0x000008, "Wrong alignment on CC22_BreakChain_CC");
static_assert(sizeof(CC22_BreakChain_CC) == 0x000008, "Wrong size on CC22_BreakChain_CC");
static_assert(offsetof(CC22_BreakChain_CC, ChainLinkHit) == 0x000000, "Member 'CC22_BreakChain_CC::ChainLinkHit' has a wrong offset!");

// Function RopeCutting.CC22.BreakChainByNumber_CC
// 0x0004 (0x0004 - 0x0000)
struct CC22_BreakChainByNumber_CC final
{
public:
	int32                                         ChainLinkHit;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CC22_BreakChainByNumber_CC) == 0x000004, "Wrong alignment on CC22_BreakChainByNumber_CC");
static_assert(sizeof(CC22_BreakChainByNumber_CC) == 0x000004, "Wrong size on CC22_BreakChainByNumber_CC");
static_assert(offsetof(CC22_BreakChainByNumber_CC, ChainLinkHit) == 0x000000, "Member 'CC22_BreakChainByNumber_CC::ChainLinkHit' has a wrong offset!");

// Function RopeCutting.CC22.CreateUniqueName_CC
// 0x0020 (0x0020 - 0x0000)
struct CC22_CreateUniqueName_CC final
{
public:
	class FString                                 ComponentType;                                     // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComponentNumber;                                   // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0014(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1955[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CC22_CreateUniqueName_CC) == 0x000008, "Wrong alignment on CC22_CreateUniqueName_CC");
static_assert(sizeof(CC22_CreateUniqueName_CC) == 0x000020, "Wrong size on CC22_CreateUniqueName_CC");
static_assert(offsetof(CC22_CreateUniqueName_CC, ComponentType) == 0x000000, "Member 'CC22_CreateUniqueName_CC::ComponentType' has a wrong offset!");
static_assert(offsetof(CC22_CreateUniqueName_CC, ComponentNumber) == 0x000010, "Member 'CC22_CreateUniqueName_CC::ComponentNumber' has a wrong offset!");
static_assert(offsetof(CC22_CreateUniqueName_CC, ReturnValue) == 0x000014, "Member 'CC22_CreateUniqueName_CC::ReturnValue' has a wrong offset!");

// Function RopeCutting.CC22.DropChain_CC
// 0x0004 (0x0004 - 0x0000)
struct CC22_DropChain_CC final
{
public:
	float                                         DisableGrabDuration;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CC22_DropChain_CC) == 0x000004, "Wrong alignment on CC22_DropChain_CC");
static_assert(sizeof(CC22_DropChain_CC) == 0x000004, "Wrong size on CC22_DropChain_CC");
static_assert(offsetof(CC22_DropChain_CC, DisableGrabDuration) == 0x000000, "Member 'CC22_DropChain_CC::DisableGrabDuration' has a wrong offset!");

// Function RopeCutting.CC22.GetEndPrimitiveConstraint_CC
// 0x0008 (0x0008 - 0x0000)
struct CC22_GetEndPrimitiveConstraint_CC final
{
public:
	class UPhysicsConstraintComponent*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CC22_GetEndPrimitiveConstraint_CC) == 0x000008, "Wrong alignment on CC22_GetEndPrimitiveConstraint_CC");
static_assert(sizeof(CC22_GetEndPrimitiveConstraint_CC) == 0x000008, "Wrong size on CC22_GetEndPrimitiveConstraint_CC");
static_assert(offsetof(CC22_GetEndPrimitiveConstraint_CC, ReturnValue) == 0x000000, "Member 'CC22_GetEndPrimitiveConstraint_CC::ReturnValue' has a wrong offset!");

// Function RopeCutting.CC22.GetFirstChainMesh_CC
// 0x0008 (0x0008 - 0x0000)
struct CC22_GetFirstChainMesh_CC final
{
public:
	class UStaticMeshComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CC22_GetFirstChainMesh_CC) == 0x000008, "Wrong alignment on CC22_GetFirstChainMesh_CC");
static_assert(sizeof(CC22_GetFirstChainMesh_CC) == 0x000008, "Wrong size on CC22_GetFirstChainMesh_CC");
static_assert(offsetof(CC22_GetFirstChainMesh_CC, ReturnValue) == 0x000000, "Member 'CC22_GetFirstChainMesh_CC::ReturnValue' has a wrong offset!");

// Function RopeCutting.CC22.GetLastChainMesh_CC
// 0x0008 (0x0008 - 0x0000)
struct CC22_GetLastChainMesh_CC final
{
public:
	class UStaticMeshComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CC22_GetLastChainMesh_CC) == 0x000008, "Wrong alignment on CC22_GetLastChainMesh_CC");
static_assert(sizeof(CC22_GetLastChainMesh_CC) == 0x000008, "Wrong size on CC22_GetLastChainMesh_CC");
static_assert(offsetof(CC22_GetLastChainMesh_CC, ReturnValue) == 0x000000, "Member 'CC22_GetLastChainMesh_CC::ReturnValue' has a wrong offset!");

// Function RopeCutting.CC22.GetMeshArray_CC
// 0x0010 (0x0010 - 0x0000)
struct CC22_GetMeshArray_CC final
{
public:
	TArray<class UStaticMeshComponent*>           ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CC22_GetMeshArray_CC) == 0x000008, "Wrong alignment on CC22_GetMeshArray_CC");
static_assert(sizeof(CC22_GetMeshArray_CC) == 0x000010, "Wrong size on CC22_GetMeshArray_CC");
static_assert(offsetof(CC22_GetMeshArray_CC, ReturnValue) == 0x000000, "Member 'CC22_GetMeshArray_CC::ReturnValue' has a wrong offset!");

// Function RopeCutting.CC22.GetPhysicsConstraintArray_CC
// 0x0010 (0x0010 - 0x0000)
struct CC22_GetPhysicsConstraintArray_CC final
{
public:
	TArray<class UPhysicsConstraintComponent*>    ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CC22_GetPhysicsConstraintArray_CC) == 0x000008, "Wrong alignment on CC22_GetPhysicsConstraintArray_CC");
static_assert(sizeof(CC22_GetPhysicsConstraintArray_CC) == 0x000010, "Wrong size on CC22_GetPhysicsConstraintArray_CC");
static_assert(offsetof(CC22_GetPhysicsConstraintArray_CC, ReturnValue) == 0x000000, "Member 'CC22_GetPhysicsConstraintArray_CC::ReturnValue' has a wrong offset!");

// Function RopeCutting.CC22.GetStartPrimitiveConstraint_CC
// 0x0008 (0x0008 - 0x0000)
struct CC22_GetStartPrimitiveConstraint_CC final
{
public:
	class UPhysicsConstraintComponent*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CC22_GetStartPrimitiveConstraint_CC) == 0x000008, "Wrong alignment on CC22_GetStartPrimitiveConstraint_CC");
static_assert(sizeof(CC22_GetStartPrimitiveConstraint_CC) == 0x000008, "Wrong size on CC22_GetStartPrimitiveConstraint_CC");
static_assert(offsetof(CC22_GetStartPrimitiveConstraint_CC, ReturnValue) == 0x000000, "Member 'CC22_GetStartPrimitiveConstraint_CC::ReturnValue' has a wrong offset!");

// Function RopeCutting.CC22.MoveEndOfChain_CC
// 0x0020 (0x0020 - 0x0000)
struct CC22_MoveEndOfChain_CC final
{
public:
	struct FVector                                MoveToLocation;                                    // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationOfMove;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowStartRotationAttached;                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowStartRotationImmobilised;                     // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1956[0x2];                                     // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CC22_MoveEndOfChain_CC) == 0x000008, "Wrong alignment on CC22_MoveEndOfChain_CC");
static_assert(sizeof(CC22_MoveEndOfChain_CC) == 0x000020, "Wrong size on CC22_MoveEndOfChain_CC");
static_assert(offsetof(CC22_MoveEndOfChain_CC, MoveToLocation) == 0x000000, "Member 'CC22_MoveEndOfChain_CC::MoveToLocation' has a wrong offset!");
static_assert(offsetof(CC22_MoveEndOfChain_CC, DurationOfMove) == 0x000018, "Member 'CC22_MoveEndOfChain_CC::DurationOfMove' has a wrong offset!");
static_assert(offsetof(CC22_MoveEndOfChain_CC, AllowStartRotationAttached) == 0x00001C, "Member 'CC22_MoveEndOfChain_CC::AllowStartRotationAttached' has a wrong offset!");
static_assert(offsetof(CC22_MoveEndOfChain_CC, AllowStartRotationImmobilised) == 0x00001D, "Member 'CC22_MoveEndOfChain_CC::AllowStartRotationImmobilised' has a wrong offset!");

// Function RopeCutting.CC22.MoveStartOfChain_CC
// 0x0020 (0x0020 - 0x0000)
struct CC22_MoveStartOfChain_CC final
{
public:
	struct FVector                                MoveToLocation;                                    // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationOfMove;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowEndRotationAttached;                          // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowEndRotationImmobilised;                       // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1957[0x2];                                     // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CC22_MoveStartOfChain_CC) == 0x000008, "Wrong alignment on CC22_MoveStartOfChain_CC");
static_assert(sizeof(CC22_MoveStartOfChain_CC) == 0x000020, "Wrong size on CC22_MoveStartOfChain_CC");
static_assert(offsetof(CC22_MoveStartOfChain_CC, MoveToLocation) == 0x000000, "Member 'CC22_MoveStartOfChain_CC::MoveToLocation' has a wrong offset!");
static_assert(offsetof(CC22_MoveStartOfChain_CC, DurationOfMove) == 0x000018, "Member 'CC22_MoveStartOfChain_CC::DurationOfMove' has a wrong offset!");
static_assert(offsetof(CC22_MoveStartOfChain_CC, AllowEndRotationAttached) == 0x00001C, "Member 'CC22_MoveStartOfChain_CC::AllowEndRotationAttached' has a wrong offset!");
static_assert(offsetof(CC22_MoveStartOfChain_CC, AllowEndRotationImmobilised) == 0x00001D, "Member 'CC22_MoveStartOfChain_CC::AllowEndRotationImmobilised' has a wrong offset!");

// Function RopeCutting.CC22.OnCompHit
// 0x0118 (0x0118 - 0x0000)
struct CC22_OnCompHit final
{
public:
	class UPrimitiveComponent*                    HitComp;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0030(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CC22_OnCompHit) == 0x000008, "Wrong alignment on CC22_OnCompHit");
static_assert(sizeof(CC22_OnCompHit) == 0x000118, "Wrong size on CC22_OnCompHit");
static_assert(offsetof(CC22_OnCompHit, HitComp) == 0x000000, "Member 'CC22_OnCompHit::HitComp' has a wrong offset!");
static_assert(offsetof(CC22_OnCompHit, OtherActor) == 0x000008, "Member 'CC22_OnCompHit::OtherActor' has a wrong offset!");
static_assert(offsetof(CC22_OnCompHit, OtherComp) == 0x000010, "Member 'CC22_OnCompHit::OtherComp' has a wrong offset!");
static_assert(offsetof(CC22_OnCompHit, NormalImpulse) == 0x000018, "Member 'CC22_OnCompHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(CC22_OnCompHit, Hit) == 0x000030, "Member 'CC22_OnCompHit::Hit' has a wrong offset!");

// Function RopeCutting.CC22.ResetChainAfterMove_CC
// 0x0002 (0x0002 - 0x0000)
struct CC22_ResetChainAfterMove_CC final
{
public:
	bool                                          ImmobiliseStart;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ImmobiliseEnd;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CC22_ResetChainAfterMove_CC) == 0x000001, "Wrong alignment on CC22_ResetChainAfterMove_CC");
static_assert(sizeof(CC22_ResetChainAfterMove_CC) == 0x000002, "Wrong size on CC22_ResetChainAfterMove_CC");
static_assert(offsetof(CC22_ResetChainAfterMove_CC, ImmobiliseStart) == 0x000000, "Member 'CC22_ResetChainAfterMove_CC::ImmobiliseStart' has a wrong offset!");
static_assert(offsetof(CC22_ResetChainAfterMove_CC, ImmobiliseEnd) == 0x000001, "Member 'CC22_ResetChainAfterMove_CC::ImmobiliseEnd' has a wrong offset!");

// Function RopeCutting.RC22.AddPointsToBuildingSpline
// 0x0010 (0x0010 - 0x0000)
struct RC22_AddPointsToBuildingSpline final
{
public:
	class USplineComponent*                       SplineToGrow;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfLoopsAPTSIn;                               // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnitLengthAPTSIn;                                  // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RC22_AddPointsToBuildingSpline) == 0x000008, "Wrong alignment on RC22_AddPointsToBuildingSpline");
static_assert(sizeof(RC22_AddPointsToBuildingSpline) == 0x000010, "Wrong size on RC22_AddPointsToBuildingSpline");
static_assert(offsetof(RC22_AddPointsToBuildingSpline, SplineToGrow) == 0x000000, "Member 'RC22_AddPointsToBuildingSpline::SplineToGrow' has a wrong offset!");
static_assert(offsetof(RC22_AddPointsToBuildingSpline, NumberOfLoopsAPTSIn) == 0x000008, "Member 'RC22_AddPointsToBuildingSpline::NumberOfLoopsAPTSIn' has a wrong offset!");
static_assert(offsetof(RC22_AddPointsToBuildingSpline, UnitLengthAPTSIn) == 0x00000C, "Member 'RC22_AddPointsToBuildingSpline::UnitLengthAPTSIn' has a wrong offset!");

// Function RopeCutting.RC22.AddPointsToSpline
// 0x0030 (0x0030 - 0x0000)
struct RC22_AddPointsToSpline final
{
public:
	class USplineComponent*                       SplineToGrow;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       UserSplineCRSIn;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfLoopsAPTSIn;                               // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnitLengthAPTSIn;                                  // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RopeOffsetAPTSIn;                                  // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RC22_AddPointsToSpline) == 0x000008, "Wrong alignment on RC22_AddPointsToSpline");
static_assert(sizeof(RC22_AddPointsToSpline) == 0x000030, "Wrong size on RC22_AddPointsToSpline");
static_assert(offsetof(RC22_AddPointsToSpline, SplineToGrow) == 0x000000, "Member 'RC22_AddPointsToSpline::SplineToGrow' has a wrong offset!");
static_assert(offsetof(RC22_AddPointsToSpline, UserSplineCRSIn) == 0x000008, "Member 'RC22_AddPointsToSpline::UserSplineCRSIn' has a wrong offset!");
static_assert(offsetof(RC22_AddPointsToSpline, NumberOfLoopsAPTSIn) == 0x000010, "Member 'RC22_AddPointsToSpline::NumberOfLoopsAPTSIn' has a wrong offset!");
static_assert(offsetof(RC22_AddPointsToSpline, UnitLengthAPTSIn) == 0x000014, "Member 'RC22_AddPointsToSpline::UnitLengthAPTSIn' has a wrong offset!");
static_assert(offsetof(RC22_AddPointsToSpline, RopeOffsetAPTSIn) == 0x000018, "Member 'RC22_AddPointsToSpline::RopeOffsetAPTSIn' has a wrong offset!");

// Function RopeCutting.RC22.AdjustRenderSplineLocation
// 0x0028 (0x0028 - 0x0000)
struct RC22_AdjustRenderSplineLocation final
{
public:
	class USplineComponent*                       RenderSpline;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       UserSpline;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    AttachedPrimitive;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfLoops;                                     // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x001C(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1985[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RC22_AdjustRenderSplineLocation) == 0x000008, "Wrong alignment on RC22_AdjustRenderSplineLocation");
static_assert(sizeof(RC22_AdjustRenderSplineLocation) == 0x000028, "Wrong size on RC22_AdjustRenderSplineLocation");
static_assert(offsetof(RC22_AdjustRenderSplineLocation, RenderSpline) == 0x000000, "Member 'RC22_AdjustRenderSplineLocation::RenderSpline' has a wrong offset!");
static_assert(offsetof(RC22_AdjustRenderSplineLocation, UserSpline) == 0x000008, "Member 'RC22_AdjustRenderSplineLocation::UserSpline' has a wrong offset!");
static_assert(offsetof(RC22_AdjustRenderSplineLocation, AttachedPrimitive) == 0x000010, "Member 'RC22_AdjustRenderSplineLocation::AttachedPrimitive' has a wrong offset!");
static_assert(offsetof(RC22_AdjustRenderSplineLocation, NumberOfLoops) == 0x000018, "Member 'RC22_AdjustRenderSplineLocation::NumberOfLoops' has a wrong offset!");
static_assert(offsetof(RC22_AdjustRenderSplineLocation, SocketName) == 0x00001C, "Member 'RC22_AdjustRenderSplineLocation::SocketName' has a wrong offset!");

// Function RopeCutting.RC22.CreateSphereCollision
// 0x0018 (0x0018 - 0x0000)
struct RC22_CreateSphereCollision final
{
public:
	class USphereComponent*                       SphereCollisionCSCIn;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 WorldRefCSCIn;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       SplineRefCSCIn;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RC22_CreateSphereCollision) == 0x000008, "Wrong alignment on RC22_CreateSphereCollision");
static_assert(sizeof(RC22_CreateSphereCollision) == 0x000018, "Wrong size on RC22_CreateSphereCollision");
static_assert(offsetof(RC22_CreateSphereCollision, SphereCollisionCSCIn) == 0x000000, "Member 'RC22_CreateSphereCollision::SphereCollisionCSCIn' has a wrong offset!");
static_assert(offsetof(RC22_CreateSphereCollision, WorldRefCSCIn) == 0x000008, "Member 'RC22_CreateSphereCollision::WorldRefCSCIn' has a wrong offset!");
static_assert(offsetof(RC22_CreateSphereCollision, SplineRefCSCIn) == 0x000010, "Member 'RC22_CreateSphereCollision::SplineRefCSCIn' has a wrong offset!");

// Function RopeCutting.RC22.CreateSpline
// 0x0048 (0x0048 - 0x0000)
struct RC22_CreateSpline final
{
public:
	class USplineComponent*                       InSplineCS;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocationCS;                                   // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               WorldRotationCS;                                   // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UWorld*                                 WorldRefCSIn;                                      // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        SelfRefCSIn;                                       // 0x0040(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RC22_CreateSpline) == 0x000008, "Wrong alignment on RC22_CreateSpline");
static_assert(sizeof(RC22_CreateSpline) == 0x000048, "Wrong size on RC22_CreateSpline");
static_assert(offsetof(RC22_CreateSpline, InSplineCS) == 0x000000, "Member 'RC22_CreateSpline::InSplineCS' has a wrong offset!");
static_assert(offsetof(RC22_CreateSpline, WorldLocationCS) == 0x000008, "Member 'RC22_CreateSpline::WorldLocationCS' has a wrong offset!");
static_assert(offsetof(RC22_CreateSpline, WorldRotationCS) == 0x000020, "Member 'RC22_CreateSpline::WorldRotationCS' has a wrong offset!");
static_assert(offsetof(RC22_CreateSpline, WorldRefCSIn) == 0x000038, "Member 'RC22_CreateSpline::WorldRefCSIn' has a wrong offset!");
static_assert(offsetof(RC22_CreateSpline, SelfRefCSIn) == 0x000040, "Member 'RC22_CreateSpline::SelfRefCSIn' has a wrong offset!");

// Function RopeCutting.RC22.CreateSplineMeshes
// 0x0018 (0x0018 - 0x0000)
struct RC22_CreateSplineMeshes final
{
public:
	class USplineMeshComponent*                   SplineMeshCSMInput;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 WorldRefCSMIn;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       SplineOwnerRefCSMIn;                               // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RC22_CreateSplineMeshes) == 0x000008, "Wrong alignment on RC22_CreateSplineMeshes");
static_assert(sizeof(RC22_CreateSplineMeshes) == 0x000018, "Wrong size on RC22_CreateSplineMeshes");
static_assert(offsetof(RC22_CreateSplineMeshes, SplineMeshCSMInput) == 0x000000, "Member 'RC22_CreateSplineMeshes::SplineMeshCSMInput' has a wrong offset!");
static_assert(offsetof(RC22_CreateSplineMeshes, WorldRefCSMIn) == 0x000008, "Member 'RC22_CreateSplineMeshes::WorldRefCSMIn' has a wrong offset!");
static_assert(offsetof(RC22_CreateSplineMeshes, SplineOwnerRefCSMIn) == 0x000010, "Member 'RC22_CreateSplineMeshes::SplineOwnerRefCSMIn' has a wrong offset!");

// Function RopeCutting.RC22.MakePhysConstr
// 0x0030 (0x0030 - 0x0000)
struct RC22_MakePhysConstr final
{
public:
	class UPhysicsConstraintComponent*            PhyConstrMPCIn;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 WorldRefMPCIn;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocationMPCIn;                                // 0x0010(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USphereComponent*                       CollRefAttachMPCIn;                                // 0x0028(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RC22_MakePhysConstr) == 0x000008, "Wrong alignment on RC22_MakePhysConstr");
static_assert(sizeof(RC22_MakePhysConstr) == 0x000030, "Wrong size on RC22_MakePhysConstr");
static_assert(offsetof(RC22_MakePhysConstr, PhyConstrMPCIn) == 0x000000, "Member 'RC22_MakePhysConstr::PhyConstrMPCIn' has a wrong offset!");
static_assert(offsetof(RC22_MakePhysConstr, WorldRefMPCIn) == 0x000008, "Member 'RC22_MakePhysConstr::WorldRefMPCIn' has a wrong offset!");
static_assert(offsetof(RC22_MakePhysConstr, WorldLocationMPCIn) == 0x000010, "Member 'RC22_MakePhysConstr::WorldLocationMPCIn' has a wrong offset!");
static_assert(offsetof(RC22_MakePhysConstr, CollRefAttachMPCIn) == 0x000028, "Member 'RC22_MakePhysConstr::CollRefAttachMPCIn' has a wrong offset!");

// Function RopeCutting.RC22.Mesh_RC
// 0x0028 (0x0028 - 0x0000)
struct RC22_Mesh_RC final
{
public:
	class USplineMeshComponent*                   SplineMeshToConfigure;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            MeshModel;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeshWidth_Config;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1986[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     MeshMat01;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     MeshMat02;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RC22_Mesh_RC) == 0x000008, "Wrong alignment on RC22_Mesh_RC");
static_assert(sizeof(RC22_Mesh_RC) == 0x000028, "Wrong size on RC22_Mesh_RC");
static_assert(offsetof(RC22_Mesh_RC, SplineMeshToConfigure) == 0x000000, "Member 'RC22_Mesh_RC::SplineMeshToConfigure' has a wrong offset!");
static_assert(offsetof(RC22_Mesh_RC, MeshModel) == 0x000008, "Member 'RC22_Mesh_RC::MeshModel' has a wrong offset!");
static_assert(offsetof(RC22_Mesh_RC, MeshWidth_Config) == 0x000010, "Member 'RC22_Mesh_RC::MeshWidth_Config' has a wrong offset!");
static_assert(offsetof(RC22_Mesh_RC, MeshMat01) == 0x000018, "Member 'RC22_Mesh_RC::MeshMat01' has a wrong offset!");
static_assert(offsetof(RC22_Mesh_RC, MeshMat02) == 0x000020, "Member 'RC22_Mesh_RC::MeshMat02' has a wrong offset!");

// Function RopeCutting.RC22.PhyConstrConfig
// 0x0028 (0x0028 - 0x0000)
struct RC22_PhyConstrConfig final
{
public:
	class UPhysicsConstraintComponent*            PhyConstrIn;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SetAngularSwing1LimitPCCIn;                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SetAngularSwing2LimitPCCIn;                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SetAngularTwistLimitPCCIn;                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularDrivePositionStrengthPCCIn;                 // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularDriveVelocityStrengthPCCIn;                 // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearLimit;                                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearDrive;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1987[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RC22_PhyConstrConfig) == 0x000008, "Wrong alignment on RC22_PhyConstrConfig");
static_assert(sizeof(RC22_PhyConstrConfig) == 0x000028, "Wrong size on RC22_PhyConstrConfig");
static_assert(offsetof(RC22_PhyConstrConfig, PhyConstrIn) == 0x000000, "Member 'RC22_PhyConstrConfig::PhyConstrIn' has a wrong offset!");
static_assert(offsetof(RC22_PhyConstrConfig, SetAngularSwing1LimitPCCIn) == 0x000008, "Member 'RC22_PhyConstrConfig::SetAngularSwing1LimitPCCIn' has a wrong offset!");
static_assert(offsetof(RC22_PhyConstrConfig, SetAngularSwing2LimitPCCIn) == 0x00000C, "Member 'RC22_PhyConstrConfig::SetAngularSwing2LimitPCCIn' has a wrong offset!");
static_assert(offsetof(RC22_PhyConstrConfig, SetAngularTwistLimitPCCIn) == 0x000010, "Member 'RC22_PhyConstrConfig::SetAngularTwistLimitPCCIn' has a wrong offset!");
static_assert(offsetof(RC22_PhyConstrConfig, AngularDrivePositionStrengthPCCIn) == 0x000014, "Member 'RC22_PhyConstrConfig::AngularDrivePositionStrengthPCCIn' has a wrong offset!");
static_assert(offsetof(RC22_PhyConstrConfig, AngularDriveVelocityStrengthPCCIn) == 0x000018, "Member 'RC22_PhyConstrConfig::AngularDriveVelocityStrengthPCCIn' has a wrong offset!");
static_assert(offsetof(RC22_PhyConstrConfig, LinearLimit) == 0x00001C, "Member 'RC22_PhyConstrConfig::LinearLimit' has a wrong offset!");
static_assert(offsetof(RC22_PhyConstrConfig, LinearDrive) == 0x000020, "Member 'RC22_PhyConstrConfig::LinearDrive' has a wrong offset!");

// Function RopeCutting.RC22.SetSplMLocTang
// 0x0018 (0x0018 - 0x0000)
struct RC22_SetSplMLocTang final
{
public:
	class USplineComponent*                       ITargetSpline;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineMeshComponent*                   InTargetSplM;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IEditPoint;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnitLengthSSMLTIn;                                 // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RC22_SetSplMLocTang) == 0x000008, "Wrong alignment on RC22_SetSplMLocTang");
static_assert(sizeof(RC22_SetSplMLocTang) == 0x000018, "Wrong size on RC22_SetSplMLocTang");
static_assert(offsetof(RC22_SetSplMLocTang, ITargetSpline) == 0x000000, "Member 'RC22_SetSplMLocTang::ITargetSpline' has a wrong offset!");
static_assert(offsetof(RC22_SetSplMLocTang, InTargetSplM) == 0x000008, "Member 'RC22_SetSplMLocTang::InTargetSplM' has a wrong offset!");
static_assert(offsetof(RC22_SetSplMLocTang, IEditPoint) == 0x000010, "Member 'RC22_SetSplMLocTang::IEditPoint' has a wrong offset!");
static_assert(offsetof(RC22_SetSplMLocTang, UnitLengthSSMLTIn) == 0x000014, "Member 'RC22_SetSplMLocTang::UnitLengthSSMLTIn' has a wrong offset!");

// Function RopeCutting.RC22.SplineUpDir
// 0x0010 (0x0010 - 0x0000)
struct RC22_SplineUpDir final
{
public:
	class USplineComponent*                       ITargetSpline;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ISplineUpDirClamp;                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1988[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RC22_SplineUpDir) == 0x000008, "Wrong alignment on RC22_SplineUpDir");
static_assert(sizeof(RC22_SplineUpDir) == 0x000010, "Wrong size on RC22_SplineUpDir");
static_assert(offsetof(RC22_SplineUpDir, ITargetSpline) == 0x000000, "Member 'RC22_SplineUpDir::ITargetSpline' has a wrong offset!");
static_assert(offsetof(RC22_SplineUpDir, ISplineUpDirClamp) == 0x000008, "Member 'RC22_SplineUpDir::ISplineUpDirClamp' has a wrong offset!");

// Function RopeCutting.RC22.TransferSphereCollision
// 0x0018 (0x0018 - 0x0000)
struct RC22_TransferSphereCollision final
{
public:
	class USphereComponent*                       SphereCollisionArrayTSCIn;                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       TargetSplineTSCIn;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EditPoint;                                         // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1989[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RC22_TransferSphereCollision) == 0x000008, "Wrong alignment on RC22_TransferSphereCollision");
static_assert(sizeof(RC22_TransferSphereCollision) == 0x000018, "Wrong size on RC22_TransferSphereCollision");
static_assert(offsetof(RC22_TransferSphereCollision, SphereCollisionArrayTSCIn) == 0x000000, "Member 'RC22_TransferSphereCollision::SphereCollisionArrayTSCIn' has a wrong offset!");
static_assert(offsetof(RC22_TransferSphereCollision, TargetSplineTSCIn) == 0x000008, "Member 'RC22_TransferSphereCollision::TargetSplineTSCIn' has a wrong offset!");
static_assert(offsetof(RC22_TransferSphereCollision, EditPoint) == 0x000010, "Member 'RC22_TransferSphereCollision::EditPoint' has a wrong offset!");

// Function RopeCutting.RC22.TransferSplineMeshes
// 0x0018 (0x0018 - 0x0000)
struct RC22_TransferSplineMeshes final
{
public:
	class USplineMeshComponent*                   SplMeshArrayTSMIn;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       TargetSplineTSMIn;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnitLengthTSMIn;                                   // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IEditPoint;                                        // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RC22_TransferSplineMeshes) == 0x000008, "Wrong alignment on RC22_TransferSplineMeshes");
static_assert(sizeof(RC22_TransferSplineMeshes) == 0x000018, "Wrong size on RC22_TransferSplineMeshes");
static_assert(offsetof(RC22_TransferSplineMeshes, SplMeshArrayTSMIn) == 0x000000, "Member 'RC22_TransferSplineMeshes::SplMeshArrayTSMIn' has a wrong offset!");
static_assert(offsetof(RC22_TransferSplineMeshes, TargetSplineTSMIn) == 0x000008, "Member 'RC22_TransferSplineMeshes::TargetSplineTSMIn' has a wrong offset!");
static_assert(offsetof(RC22_TransferSplineMeshes, UnitLengthTSMIn) == 0x000010, "Member 'RC22_TransferSplineMeshes::UnitLengthTSMIn' has a wrong offset!");
static_assert(offsetof(RC22_TransferSplineMeshes, IEditPoint) == 0x000014, "Member 'RC22_TransferSplineMeshes::IEditPoint' has a wrong offset!");

// Function RopeCutting.RC22.AttachRopeEnd_RC
// 0x0018 (0x0018 - 0x0000)
struct RC22_AttachRopeEnd_RC final
{
public:
	class UPrimitiveComponent*                    MeshToAttach;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RC22_AttachRopeEnd_RC) == 0x000008, "Wrong alignment on RC22_AttachRopeEnd_RC");
static_assert(sizeof(RC22_AttachRopeEnd_RC) == 0x000018, "Wrong size on RC22_AttachRopeEnd_RC");
static_assert(offsetof(RC22_AttachRopeEnd_RC, MeshToAttach) == 0x000000, "Member 'RC22_AttachRopeEnd_RC::MeshToAttach' has a wrong offset!");
static_assert(offsetof(RC22_AttachRopeEnd_RC, SocketName) == 0x000008, "Member 'RC22_AttachRopeEnd_RC::SocketName' has a wrong offset!");
static_assert(offsetof(RC22_AttachRopeEnd_RC, BoneName) == 0x000010, "Member 'RC22_AttachRopeEnd_RC::BoneName' has a wrong offset!");

// Function RopeCutting.RC22.AttachRopeStart_RC
// 0x0018 (0x0018 - 0x0000)
struct RC22_AttachRopeStart_RC final
{
public:
	class UPrimitiveComponent*                    MeshToAttach;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RC22_AttachRopeStart_RC) == 0x000008, "Wrong alignment on RC22_AttachRopeStart_RC");
static_assert(sizeof(RC22_AttachRopeStart_RC) == 0x000018, "Wrong size on RC22_AttachRopeStart_RC");
static_assert(offsetof(RC22_AttachRopeStart_RC, MeshToAttach) == 0x000000, "Member 'RC22_AttachRopeStart_RC::MeshToAttach' has a wrong offset!");
static_assert(offsetof(RC22_AttachRopeStart_RC, SocketName) == 0x000008, "Member 'RC22_AttachRopeStart_RC::SocketName' has a wrong offset!");
static_assert(offsetof(RC22_AttachRopeStart_RC, BoneName) == 0x000010, "Member 'RC22_AttachRopeStart_RC::BoneName' has a wrong offset!");

// Function RopeCutting.RC22.CreateUniqueName
// 0x0020 (0x0020 - 0x0000)
struct RC22_CreateUniqueName final
{
public:
	class FString                                 ComponentType;                                     // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComponentNumber;                                   // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0014(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_198A[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RC22_CreateUniqueName) == 0x000008, "Wrong alignment on RC22_CreateUniqueName");
static_assert(sizeof(RC22_CreateUniqueName) == 0x000020, "Wrong size on RC22_CreateUniqueName");
static_assert(offsetof(RC22_CreateUniqueName, ComponentType) == 0x000000, "Member 'RC22_CreateUniqueName::ComponentType' has a wrong offset!");
static_assert(offsetof(RC22_CreateUniqueName, ComponentNumber) == 0x000010, "Member 'RC22_CreateUniqueName::ComponentNumber' has a wrong offset!");
static_assert(offsetof(RC22_CreateUniqueName, ReturnValue) == 0x000014, "Member 'RC22_CreateUniqueName::ReturnValue' has a wrong offset!");

// Function RopeCutting.RC22.CutRopeUsingCollision_RC
// 0x0008 (0x0008 - 0x0000)
struct RC22_CutRopeUsingCollision_RC final
{
public:
	class USphereComponent*                       ChosenCollisionSphere;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RC22_CutRopeUsingCollision_RC) == 0x000008, "Wrong alignment on RC22_CutRopeUsingCollision_RC");
static_assert(sizeof(RC22_CutRopeUsingCollision_RC) == 0x000008, "Wrong size on RC22_CutRopeUsingCollision_RC");
static_assert(offsetof(RC22_CutRopeUsingCollision_RC, ChosenCollisionSphere) == 0x000000, "Member 'RC22_CutRopeUsingCollision_RC::ChosenCollisionSphere' has a wrong offset!");

// Function RopeCutting.RC22.CutRopeUsingNumber_RC
// 0x0004 (0x0004 - 0x0000)
struct RC22_CutRopeUsingNumber_RC final
{
public:
	int32                                         ChosenPosition;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RC22_CutRopeUsingNumber_RC) == 0x000004, "Wrong alignment on RC22_CutRopeUsingNumber_RC");
static_assert(sizeof(RC22_CutRopeUsingNumber_RC) == 0x000004, "Wrong size on RC22_CutRopeUsingNumber_RC");
static_assert(offsetof(RC22_CutRopeUsingNumber_RC, ChosenPosition) == 0x000000, "Member 'RC22_CutRopeUsingNumber_RC::ChosenPosition' has a wrong offset!");

// Function RopeCutting.RC22.GetCollisionArray_RC
// 0x0010 (0x0010 - 0x0000)
struct RC22_GetCollisionArray_RC final
{
public:
	TArray<class USphereComponent*>               ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RC22_GetCollisionArray_RC) == 0x000008, "Wrong alignment on RC22_GetCollisionArray_RC");
static_assert(sizeof(RC22_GetCollisionArray_RC) == 0x000010, "Wrong size on RC22_GetCollisionArray_RC");
static_assert(offsetof(RC22_GetCollisionArray_RC, ReturnValue) == 0x000000, "Member 'RC22_GetCollisionArray_RC::ReturnValue' has a wrong offset!");

// Function RopeCutting.RC22.GetEndAnchorConstraint_RC
// 0x0008 (0x0008 - 0x0000)
struct RC22_GetEndAnchorConstraint_RC final
{
public:
	class UPhysicsConstraintComponent*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RC22_GetEndAnchorConstraint_RC) == 0x000008, "Wrong alignment on RC22_GetEndAnchorConstraint_RC");
static_assert(sizeof(RC22_GetEndAnchorConstraint_RC) == 0x000008, "Wrong size on RC22_GetEndAnchorConstraint_RC");
static_assert(offsetof(RC22_GetEndAnchorConstraint_RC, ReturnValue) == 0x000000, "Member 'RC22_GetEndAnchorConstraint_RC::ReturnValue' has a wrong offset!");

// Function RopeCutting.RC22.GetFirstCollisionSphere_RC
// 0x0008 (0x0008 - 0x0000)
struct RC22_GetFirstCollisionSphere_RC final
{
public:
	class USphereComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RC22_GetFirstCollisionSphere_RC) == 0x000008, "Wrong alignment on RC22_GetFirstCollisionSphere_RC");
static_assert(sizeof(RC22_GetFirstCollisionSphere_RC) == 0x000008, "Wrong size on RC22_GetFirstCollisionSphere_RC");
static_assert(offsetof(RC22_GetFirstCollisionSphere_RC, ReturnValue) == 0x000000, "Member 'RC22_GetFirstCollisionSphere_RC::ReturnValue' has a wrong offset!");

// Function RopeCutting.RC22.GetLastCollisionSphere_RC
// 0x0008 (0x0008 - 0x0000)
struct RC22_GetLastCollisionSphere_RC final
{
public:
	class USphereComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RC22_GetLastCollisionSphere_RC) == 0x000008, "Wrong alignment on RC22_GetLastCollisionSphere_RC");
static_assert(sizeof(RC22_GetLastCollisionSphere_RC) == 0x000008, "Wrong size on RC22_GetLastCollisionSphere_RC");
static_assert(offsetof(RC22_GetLastCollisionSphere_RC, ReturnValue) == 0x000000, "Member 'RC22_GetLastCollisionSphere_RC::ReturnValue' has a wrong offset!");

// Function RopeCutting.RC22.GetPhysicsConstraintArray_RC
// 0x0010 (0x0010 - 0x0000)
struct RC22_GetPhysicsConstraintArray_RC final
{
public:
	TArray<class UPhysicsConstraintComponent*>    ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RC22_GetPhysicsConstraintArray_RC) == 0x000008, "Wrong alignment on RC22_GetPhysicsConstraintArray_RC");
static_assert(sizeof(RC22_GetPhysicsConstraintArray_RC) == 0x000010, "Wrong size on RC22_GetPhysicsConstraintArray_RC");
static_assert(offsetof(RC22_GetPhysicsConstraintArray_RC, ReturnValue) == 0x000000, "Member 'RC22_GetPhysicsConstraintArray_RC::ReturnValue' has a wrong offset!");

// Function RopeCutting.RC22.GetSplineComponent_RC
// 0x0008 (0x0008 - 0x0000)
struct RC22_GetSplineComponent_RC final
{
public:
	class USplineComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RC22_GetSplineComponent_RC) == 0x000008, "Wrong alignment on RC22_GetSplineComponent_RC");
static_assert(sizeof(RC22_GetSplineComponent_RC) == 0x000008, "Wrong size on RC22_GetSplineComponent_RC");
static_assert(offsetof(RC22_GetSplineComponent_RC, ReturnValue) == 0x000000, "Member 'RC22_GetSplineComponent_RC::ReturnValue' has a wrong offset!");

// Function RopeCutting.RC22.GetSplineMeshArray_RC
// 0x0010 (0x0010 - 0x0000)
struct RC22_GetSplineMeshArray_RC final
{
public:
	TArray<class USplineMeshComponent*>           ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RC22_GetSplineMeshArray_RC) == 0x000008, "Wrong alignment on RC22_GetSplineMeshArray_RC");
static_assert(sizeof(RC22_GetSplineMeshArray_RC) == 0x000010, "Wrong size on RC22_GetSplineMeshArray_RC");
static_assert(offsetof(RC22_GetSplineMeshArray_RC, ReturnValue) == 0x000000, "Member 'RC22_GetSplineMeshArray_RC::ReturnValue' has a wrong offset!");

// Function RopeCutting.RC22.GetStartAnchorConstraint_RC
// 0x0008 (0x0008 - 0x0000)
struct RC22_GetStartAnchorConstraint_RC final
{
public:
	class UPhysicsConstraintComponent*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RC22_GetStartAnchorConstraint_RC) == 0x000008, "Wrong alignment on RC22_GetStartAnchorConstraint_RC");
static_assert(sizeof(RC22_GetStartAnchorConstraint_RC) == 0x000008, "Wrong size on RC22_GetStartAnchorConstraint_RC");
static_assert(offsetof(RC22_GetStartAnchorConstraint_RC, ReturnValue) == 0x000000, "Member 'RC22_GetStartAnchorConstraint_RC::ReturnValue' has a wrong offset!");

// Function RopeCutting.RC22.GrowRope_RC
// 0x0004 (0x0004 - 0x0000)
struct RC22_GrowRope_RC final
{
public:
	float                                         RateOfAddition;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RC22_GrowRope_RC) == 0x000004, "Wrong alignment on RC22_GrowRope_RC");
static_assert(sizeof(RC22_GrowRope_RC) == 0x000004, "Wrong size on RC22_GrowRope_RC");
static_assert(offsetof(RC22_GrowRope_RC, RateOfAddition) == 0x000000, "Member 'RC22_GrowRope_RC::RateOfAddition' has a wrong offset!");

// Function RopeCutting.RC22.ImmobiliseEnd_RC
// 0x0001 (0x0001 - 0x0000)
struct RC22_ImmobiliseEnd_RC final
{
public:
	bool                                          FurtherImmobiliseRopeEnd;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RC22_ImmobiliseEnd_RC) == 0x000001, "Wrong alignment on RC22_ImmobiliseEnd_RC");
static_assert(sizeof(RC22_ImmobiliseEnd_RC) == 0x000001, "Wrong size on RC22_ImmobiliseEnd_RC");
static_assert(offsetof(RC22_ImmobiliseEnd_RC, FurtherImmobiliseRopeEnd) == 0x000000, "Member 'RC22_ImmobiliseEnd_RC::FurtherImmobiliseRopeEnd' has a wrong offset!");

// Function RopeCutting.RC22.ImmobiliseStart_RC
// 0x0001 (0x0001 - 0x0000)
struct RC22_ImmobiliseStart_RC final
{
public:
	bool                                          FurtherImmobiliseRopeStart;                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RC22_ImmobiliseStart_RC) == 0x000001, "Wrong alignment on RC22_ImmobiliseStart_RC");
static_assert(sizeof(RC22_ImmobiliseStart_RC) == 0x000001, "Wrong size on RC22_ImmobiliseStart_RC");
static_assert(offsetof(RC22_ImmobiliseStart_RC, FurtherImmobiliseRopeStart) == 0x000000, "Member 'RC22_ImmobiliseStart_RC::FurtherImmobiliseRopeStart' has a wrong offset!");

// Function RopeCutting.RC22.MoveEndOfRope_RC
// 0x0020 (0x0020 - 0x0000)
struct RC22_MoveEndOfRope_RC final
{
public:
	struct FVector                                MoveToLocation;                                    // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationOfMove;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowStartRotationAttached;                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowStartRotationImmobilised;                     // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_198B[0x2];                                     // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RC22_MoveEndOfRope_RC) == 0x000008, "Wrong alignment on RC22_MoveEndOfRope_RC");
static_assert(sizeof(RC22_MoveEndOfRope_RC) == 0x000020, "Wrong size on RC22_MoveEndOfRope_RC");
static_assert(offsetof(RC22_MoveEndOfRope_RC, MoveToLocation) == 0x000000, "Member 'RC22_MoveEndOfRope_RC::MoveToLocation' has a wrong offset!");
static_assert(offsetof(RC22_MoveEndOfRope_RC, DurationOfMove) == 0x000018, "Member 'RC22_MoveEndOfRope_RC::DurationOfMove' has a wrong offset!");
static_assert(offsetof(RC22_MoveEndOfRope_RC, AllowStartRotationAttached) == 0x00001C, "Member 'RC22_MoveEndOfRope_RC::AllowStartRotationAttached' has a wrong offset!");
static_assert(offsetof(RC22_MoveEndOfRope_RC, AllowStartRotationImmobilised) == 0x00001D, "Member 'RC22_MoveEndOfRope_RC::AllowStartRotationImmobilised' has a wrong offset!");

// Function RopeCutting.RC22.MoveStartOfRope_RC
// 0x0020 (0x0020 - 0x0000)
struct RC22_MoveStartOfRope_RC final
{
public:
	struct FVector                                MoveToLocation;                                    // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationOfMove;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowEndRotationAttached;                          // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowEndRotationImmobilised;                       // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_198C[0x2];                                     // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RC22_MoveStartOfRope_RC) == 0x000008, "Wrong alignment on RC22_MoveStartOfRope_RC");
static_assert(sizeof(RC22_MoveStartOfRope_RC) == 0x000020, "Wrong size on RC22_MoveStartOfRope_RC");
static_assert(offsetof(RC22_MoveStartOfRope_RC, MoveToLocation) == 0x000000, "Member 'RC22_MoveStartOfRope_RC::MoveToLocation' has a wrong offset!");
static_assert(offsetof(RC22_MoveStartOfRope_RC, DurationOfMove) == 0x000018, "Member 'RC22_MoveStartOfRope_RC::DurationOfMove' has a wrong offset!");
static_assert(offsetof(RC22_MoveStartOfRope_RC, AllowEndRotationAttached) == 0x00001C, "Member 'RC22_MoveStartOfRope_RC::AllowEndRotationAttached' has a wrong offset!");
static_assert(offsetof(RC22_MoveStartOfRope_RC, AllowEndRotationImmobilised) == 0x00001D, "Member 'RC22_MoveStartOfRope_RC::AllowEndRotationImmobilised' has a wrong offset!");

// Function RopeCutting.RC22.OnCompHit
// 0x0118 (0x0118 - 0x0000)
struct RC22_OnCompHit final
{
public:
	class UPrimitiveComponent*                    HitComp;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0030(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RC22_OnCompHit) == 0x000008, "Wrong alignment on RC22_OnCompHit");
static_assert(sizeof(RC22_OnCompHit) == 0x000118, "Wrong size on RC22_OnCompHit");
static_assert(offsetof(RC22_OnCompHit, HitComp) == 0x000000, "Member 'RC22_OnCompHit::HitComp' has a wrong offset!");
static_assert(offsetof(RC22_OnCompHit, OtherActor) == 0x000008, "Member 'RC22_OnCompHit::OtherActor' has a wrong offset!");
static_assert(offsetof(RC22_OnCompHit, OtherComp) == 0x000010, "Member 'RC22_OnCompHit::OtherComp' has a wrong offset!");
static_assert(offsetof(RC22_OnCompHit, NormalImpulse) == 0x000018, "Member 'RC22_OnCompHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(RC22_OnCompHit, Hit) == 0x000030, "Member 'RC22_OnCompHit::Hit' has a wrong offset!");

// Function RopeCutting.RC22.ResetRopeAfterMove_RC
// 0x0002 (0x0002 - 0x0000)
struct RC22_ResetRopeAfterMove_RC final
{
public:
	bool                                          ImmobiliseStart;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ImmobiliseEnd;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RC22_ResetRopeAfterMove_RC) == 0x000001, "Wrong alignment on RC22_ResetRopeAfterMove_RC");
static_assert(sizeof(RC22_ResetRopeAfterMove_RC) == 0x000002, "Wrong size on RC22_ResetRopeAfterMove_RC");
static_assert(offsetof(RC22_ResetRopeAfterMove_RC, ImmobiliseStart) == 0x000000, "Member 'RC22_ResetRopeAfterMove_RC::ImmobiliseStart' has a wrong offset!");
static_assert(offsetof(RC22_ResetRopeAfterMove_RC, ImmobiliseEnd) == 0x000001, "Member 'RC22_ResetRopeAfterMove_RC::ImmobiliseEnd' has a wrong offset!");

// Function RopeCutting.RC22.ShrinkRope_RC
// 0x0004 (0x0004 - 0x0000)
struct RC22_ShrinkRope_RC final
{
public:
	float                                         RateOfSubtraction;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RC22_ShrinkRope_RC) == 0x000004, "Wrong alignment on RC22_ShrinkRope_RC");
static_assert(sizeof(RC22_ShrinkRope_RC) == 0x000004, "Wrong size on RC22_ShrinkRope_RC");
static_assert(offsetof(RC22_ShrinkRope_RC, RateOfSubtraction) == 0x000000, "Member 'RC22_ShrinkRope_RC::RateOfSubtraction' has a wrong offset!");

// Function RopeCutting.RC22.SphereCollisionConfig
// 0x0038 (0x0038 - 0x0000)
struct RC22_SphereCollisionConfig final
{
public:
	bool                                          ShouldBlock;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SimPhysics;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_198D[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USphereComponent*                       SphereCollisionIn;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularDampeningSCCIn;                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearDampeningSCCIn;                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionSolverSCCIn;                               // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocitySolverSCCIn;                               // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StabilizationThresholdMultiplierSCCIn;             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SleepThresholdMultiplierSCCIn;                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InertiaTensorScaleSCCIn;                           // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollUnitScaleSCCIn;                                // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mass;                                              // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MassScale;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RC22_SphereCollisionConfig) == 0x000008, "Wrong alignment on RC22_SphereCollisionConfig");
static_assert(sizeof(RC22_SphereCollisionConfig) == 0x000038, "Wrong size on RC22_SphereCollisionConfig");
static_assert(offsetof(RC22_SphereCollisionConfig, ShouldBlock) == 0x000000, "Member 'RC22_SphereCollisionConfig::ShouldBlock' has a wrong offset!");
static_assert(offsetof(RC22_SphereCollisionConfig, SimPhysics) == 0x000001, "Member 'RC22_SphereCollisionConfig::SimPhysics' has a wrong offset!");
static_assert(offsetof(RC22_SphereCollisionConfig, SphereCollisionIn) == 0x000008, "Member 'RC22_SphereCollisionConfig::SphereCollisionIn' has a wrong offset!");
static_assert(offsetof(RC22_SphereCollisionConfig, AngularDampeningSCCIn) == 0x000010, "Member 'RC22_SphereCollisionConfig::AngularDampeningSCCIn' has a wrong offset!");
static_assert(offsetof(RC22_SphereCollisionConfig, LinearDampeningSCCIn) == 0x000014, "Member 'RC22_SphereCollisionConfig::LinearDampeningSCCIn' has a wrong offset!");
static_assert(offsetof(RC22_SphereCollisionConfig, PositionSolverSCCIn) == 0x000018, "Member 'RC22_SphereCollisionConfig::PositionSolverSCCIn' has a wrong offset!");
static_assert(offsetof(RC22_SphereCollisionConfig, VelocitySolverSCCIn) == 0x00001C, "Member 'RC22_SphereCollisionConfig::VelocitySolverSCCIn' has a wrong offset!");
static_assert(offsetof(RC22_SphereCollisionConfig, StabilizationThresholdMultiplierSCCIn) == 0x000020, "Member 'RC22_SphereCollisionConfig::StabilizationThresholdMultiplierSCCIn' has a wrong offset!");
static_assert(offsetof(RC22_SphereCollisionConfig, SleepThresholdMultiplierSCCIn) == 0x000024, "Member 'RC22_SphereCollisionConfig::SleepThresholdMultiplierSCCIn' has a wrong offset!");
static_assert(offsetof(RC22_SphereCollisionConfig, InertiaTensorScaleSCCIn) == 0x000028, "Member 'RC22_SphereCollisionConfig::InertiaTensorScaleSCCIn' has a wrong offset!");
static_assert(offsetof(RC22_SphereCollisionConfig, CollUnitScaleSCCIn) == 0x00002C, "Member 'RC22_SphereCollisionConfig::CollUnitScaleSCCIn' has a wrong offset!");
static_assert(offsetof(RC22_SphereCollisionConfig, Mass) == 0x000030, "Member 'RC22_SphereCollisionConfig::Mass' has a wrong offset!");
static_assert(offsetof(RC22_SphereCollisionConfig, MassScale) == 0x000034, "Member 'RC22_SphereCollisionConfig::MassScale' has a wrong offset!");

// Function RopeCutting.RC22Tracker.GetCollisionArray_RC22T
// 0x0010 (0x0010 - 0x0000)
struct RC22Tracker_GetCollisionArray_RC22T final
{
public:
	TArray<class USphereComponent*>               ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RC22Tracker_GetCollisionArray_RC22T) == 0x000008, "Wrong alignment on RC22Tracker_GetCollisionArray_RC22T");
static_assert(sizeof(RC22Tracker_GetCollisionArray_RC22T) == 0x000010, "Wrong size on RC22Tracker_GetCollisionArray_RC22T");
static_assert(offsetof(RC22Tracker_GetCollisionArray_RC22T, ReturnValue) == 0x000000, "Member 'RC22Tracker_GetCollisionArray_RC22T::ReturnValue' has a wrong offset!");

// Function RopeCutting.RC22Tracker.GetPhysicsConstraintArray_RC22T
// 0x0010 (0x0010 - 0x0000)
struct RC22Tracker_GetPhysicsConstraintArray_RC22T final
{
public:
	TArray<class UPhysicsConstraintComponent*>    ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RC22Tracker_GetPhysicsConstraintArray_RC22T) == 0x000008, "Wrong alignment on RC22Tracker_GetPhysicsConstraintArray_RC22T");
static_assert(sizeof(RC22Tracker_GetPhysicsConstraintArray_RC22T) == 0x000010, "Wrong size on RC22Tracker_GetPhysicsConstraintArray_RC22T");
static_assert(offsetof(RC22Tracker_GetPhysicsConstraintArray_RC22T, ReturnValue) == 0x000000, "Member 'RC22Tracker_GetPhysicsConstraintArray_RC22T::ReturnValue' has a wrong offset!");

// Function RopeCutting.RC22Tracker.GetSplineComponent_RC22T
// 0x0008 (0x0008 - 0x0000)
struct RC22Tracker_GetSplineComponent_RC22T final
{
public:
	class USplineComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RC22Tracker_GetSplineComponent_RC22T) == 0x000008, "Wrong alignment on RC22Tracker_GetSplineComponent_RC22T");
static_assert(sizeof(RC22Tracker_GetSplineComponent_RC22T) == 0x000008, "Wrong size on RC22Tracker_GetSplineComponent_RC22T");
static_assert(offsetof(RC22Tracker_GetSplineComponent_RC22T, ReturnValue) == 0x000000, "Member 'RC22Tracker_GetSplineComponent_RC22T::ReturnValue' has a wrong offset!");

// Function RopeCutting.RC22Tracker.GetSplineMeshArray_RC22T
// 0x0010 (0x0010 - 0x0000)
struct RC22Tracker_GetSplineMeshArray_RC22T final
{
public:
	TArray<class USplineMeshComponent*>           ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RC22Tracker_GetSplineMeshArray_RC22T) == 0x000008, "Wrong alignment on RC22Tracker_GetSplineMeshArray_RC22T");
static_assert(sizeof(RC22Tracker_GetSplineMeshArray_RC22T) == 0x000010, "Wrong size on RC22Tracker_GetSplineMeshArray_RC22T");
static_assert(offsetof(RC22Tracker_GetSplineMeshArray_RC22T, ReturnValue) == 0x000000, "Member 'RC22Tracker_GetSplineMeshArray_RC22T::ReturnValue' has a wrong offset!");

// Function RopeCutting.RC22Tracker.SetCollisionArray_RC22T
// 0x0010 (0x0010 - 0x0000)
struct RC22Tracker_SetCollisionArray_RC22T final
{
public:
	TArray<class USphereComponent*>               SetCollisionArrayIn;                               // 0x0000(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RC22Tracker_SetCollisionArray_RC22T) == 0x000008, "Wrong alignment on RC22Tracker_SetCollisionArray_RC22T");
static_assert(sizeof(RC22Tracker_SetCollisionArray_RC22T) == 0x000010, "Wrong size on RC22Tracker_SetCollisionArray_RC22T");
static_assert(offsetof(RC22Tracker_SetCollisionArray_RC22T, SetCollisionArrayIn) == 0x000000, "Member 'RC22Tracker_SetCollisionArray_RC22T::SetCollisionArrayIn' has a wrong offset!");

// Function RopeCutting.RC22Tracker.SetPhysicsConstraintArray_RC22T
// 0x0010 (0x0010 - 0x0000)
struct RC22Tracker_SetPhysicsConstraintArray_RC22T final
{
public:
	TArray<class UPhysicsConstraintComponent*>    SetPhysicsConstraintArrayIn;                       // 0x0000(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RC22Tracker_SetPhysicsConstraintArray_RC22T) == 0x000008, "Wrong alignment on RC22Tracker_SetPhysicsConstraintArray_RC22T");
static_assert(sizeof(RC22Tracker_SetPhysicsConstraintArray_RC22T) == 0x000010, "Wrong size on RC22Tracker_SetPhysicsConstraintArray_RC22T");
static_assert(offsetof(RC22Tracker_SetPhysicsConstraintArray_RC22T, SetPhysicsConstraintArrayIn) == 0x000000, "Member 'RC22Tracker_SetPhysicsConstraintArray_RC22T::SetPhysicsConstraintArrayIn' has a wrong offset!");

// Function RopeCutting.RC22Tracker.SetSplineComponent_RC22T
// 0x0008 (0x0008 - 0x0000)
struct RC22Tracker_SetSplineComponent_RC22T final
{
public:
	class USplineComponent*                       SplineComponentIn;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RC22Tracker_SetSplineComponent_RC22T) == 0x000008, "Wrong alignment on RC22Tracker_SetSplineComponent_RC22T");
static_assert(sizeof(RC22Tracker_SetSplineComponent_RC22T) == 0x000008, "Wrong size on RC22Tracker_SetSplineComponent_RC22T");
static_assert(offsetof(RC22Tracker_SetSplineComponent_RC22T, SplineComponentIn) == 0x000000, "Member 'RC22Tracker_SetSplineComponent_RC22T::SplineComponentIn' has a wrong offset!");

// Function RopeCutting.RC22Tracker.SetSplineMeshArray_RC22T
// 0x0010 (0x0010 - 0x0000)
struct RC22Tracker_SetSplineMeshArray_RC22T final
{
public:
	TArray<class USplineMeshComponent*>           SplineMeshArrayIn;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RC22Tracker_SetSplineMeshArray_RC22T) == 0x000008, "Wrong alignment on RC22Tracker_SetSplineMeshArray_RC22T");
static_assert(sizeof(RC22Tracker_SetSplineMeshArray_RC22T) == 0x000010, "Wrong size on RC22Tracker_SetSplineMeshArray_RC22T");
static_assert(offsetof(RC22Tracker_SetSplineMeshArray_RC22T, SplineMeshArrayIn) == 0x000000, "Member 'RC22Tracker_SetSplineMeshArray_RC22T::SplineMeshArrayIn' has a wrong offset!");

// Function RopeCutting.RCTracker.GetIsFirstOfCutLength
// 0x0001 (0x0001 - 0x0000)
struct RCTracker_GetIsFirstOfCutLength final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTracker_GetIsFirstOfCutLength) == 0x000001, "Wrong alignment on RCTracker_GetIsFirstOfCutLength");
static_assert(sizeof(RCTracker_GetIsFirstOfCutLength) == 0x000001, "Wrong size on RCTracker_GetIsFirstOfCutLength");
static_assert(offsetof(RCTracker_GetIsFirstOfCutLength, ReturnValue) == 0x000000, "Member 'RCTracker_GetIsFirstOfCutLength::ReturnValue' has a wrong offset!");

// Function RopeCutting.RCTracker.GetIsLastOfCutLength
// 0x0001 (0x0001 - 0x0000)
struct RCTracker_GetIsLastOfCutLength final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTracker_GetIsLastOfCutLength) == 0x000001, "Wrong alignment on RCTracker_GetIsLastOfCutLength");
static_assert(sizeof(RCTracker_GetIsLastOfCutLength) == 0x000001, "Wrong size on RCTracker_GetIsLastOfCutLength");
static_assert(offsetof(RCTracker_GetIsLastOfCutLength, ReturnValue) == 0x000000, "Member 'RCTracker_GetIsLastOfCutLength::ReturnValue' has a wrong offset!");

// Function RopeCutting.RCTracker.GetPhysicsConstraint
// 0x0008 (0x0008 - 0x0000)
struct RCTracker_GetPhysicsConstraint final
{
public:
	class UPhysicsConstraintComponent*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTracker_GetPhysicsConstraint) == 0x000008, "Wrong alignment on RCTracker_GetPhysicsConstraint");
static_assert(sizeof(RCTracker_GetPhysicsConstraint) == 0x000008, "Wrong size on RCTracker_GetPhysicsConstraint");
static_assert(offsetof(RCTracker_GetPhysicsConstraint, ReturnValue) == 0x000000, "Member 'RCTracker_GetPhysicsConstraint::ReturnValue' has a wrong offset!");

// Function RopeCutting.RCTracker.GetPositionNumber
// 0x0004 (0x0004 - 0x0000)
struct RCTracker_GetPositionNumber final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTracker_GetPositionNumber) == 0x000004, "Wrong alignment on RCTracker_GetPositionNumber");
static_assert(sizeof(RCTracker_GetPositionNumber) == 0x000004, "Wrong size on RCTracker_GetPositionNumber");
static_assert(offsetof(RCTracker_GetPositionNumber, ReturnValue) == 0x000000, "Member 'RCTracker_GetPositionNumber::ReturnValue' has a wrong offset!");

// Function RopeCutting.RCTracker.GetPrimarySphereCollision
// 0x0008 (0x0008 - 0x0000)
struct RCTracker_GetPrimarySphereCollision final
{
public:
	class USphereComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTracker_GetPrimarySphereCollision) == 0x000008, "Wrong alignment on RCTracker_GetPrimarySphereCollision");
static_assert(sizeof(RCTracker_GetPrimarySphereCollision) == 0x000008, "Wrong size on RCTracker_GetPrimarySphereCollision");
static_assert(offsetof(RCTracker_GetPrimarySphereCollision, ReturnValue) == 0x000000, "Member 'RCTracker_GetPrimarySphereCollision::ReturnValue' has a wrong offset!");

// Function RopeCutting.RCTracker.GetPrimarySphereCollisionName
// 0x0008 (0x0008 - 0x0000)
struct RCTracker_GetPrimarySphereCollisionName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTracker_GetPrimarySphereCollisionName) == 0x000004, "Wrong alignment on RCTracker_GetPrimarySphereCollisionName");
static_assert(sizeof(RCTracker_GetPrimarySphereCollisionName) == 0x000008, "Wrong size on RCTracker_GetPrimarySphereCollisionName");
static_assert(offsetof(RCTracker_GetPrimarySphereCollisionName, ReturnValue) == 0x000000, "Member 'RCTracker_GetPrimarySphereCollisionName::ReturnValue' has a wrong offset!");

// Function RopeCutting.RCTracker.GetSecondarySphereCollision
// 0x0008 (0x0008 - 0x0000)
struct RCTracker_GetSecondarySphereCollision final
{
public:
	class USphereComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTracker_GetSecondarySphereCollision) == 0x000008, "Wrong alignment on RCTracker_GetSecondarySphereCollision");
static_assert(sizeof(RCTracker_GetSecondarySphereCollision) == 0x000008, "Wrong size on RCTracker_GetSecondarySphereCollision");
static_assert(offsetof(RCTracker_GetSecondarySphereCollision, ReturnValue) == 0x000000, "Member 'RCTracker_GetSecondarySphereCollision::ReturnValue' has a wrong offset!");

// Function RopeCutting.RCTracker.GetSecondarySphereCollisionName
// 0x0008 (0x0008 - 0x0000)
struct RCTracker_GetSecondarySphereCollisionName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTracker_GetSecondarySphereCollisionName) == 0x000004, "Wrong alignment on RCTracker_GetSecondarySphereCollisionName");
static_assert(sizeof(RCTracker_GetSecondarySphereCollisionName) == 0x000008, "Wrong size on RCTracker_GetSecondarySphereCollisionName");
static_assert(offsetof(RCTracker_GetSecondarySphereCollisionName, ReturnValue) == 0x000000, "Member 'RCTracker_GetSecondarySphereCollisionName::ReturnValue' has a wrong offset!");

// Function RopeCutting.RCTracker.GetSplineComponent
// 0x0008 (0x0008 - 0x0000)
struct RCTracker_GetSplineComponent final
{
public:
	class USplineComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTracker_GetSplineComponent) == 0x000008, "Wrong alignment on RCTracker_GetSplineComponent");
static_assert(sizeof(RCTracker_GetSplineComponent) == 0x000008, "Wrong size on RCTracker_GetSplineComponent");
static_assert(offsetof(RCTracker_GetSplineComponent, ReturnValue) == 0x000000, "Member 'RCTracker_GetSplineComponent::ReturnValue' has a wrong offset!");

// Function RopeCutting.RCTracker.GetSplineMesh
// 0x0008 (0x0008 - 0x0000)
struct RCTracker_GetSplineMesh final
{
public:
	class USplineMeshComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTracker_GetSplineMesh) == 0x000008, "Wrong alignment on RCTracker_GetSplineMesh");
static_assert(sizeof(RCTracker_GetSplineMesh) == 0x000008, "Wrong size on RCTracker_GetSplineMesh");
static_assert(offsetof(RCTracker_GetSplineMesh, ReturnValue) == 0x000000, "Member 'RCTracker_GetSplineMesh::ReturnValue' has a wrong offset!");

// Function RopeCutting.RCTracker.SetIsFirstOfCutLength
// 0x0001 (0x0001 - 0x0000)
struct RCTracker_SetIsFirstOfCutLength final
{
public:
	bool                                          IsFirstOfCutLengthIn;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTracker_SetIsFirstOfCutLength) == 0x000001, "Wrong alignment on RCTracker_SetIsFirstOfCutLength");
static_assert(sizeof(RCTracker_SetIsFirstOfCutLength) == 0x000001, "Wrong size on RCTracker_SetIsFirstOfCutLength");
static_assert(offsetof(RCTracker_SetIsFirstOfCutLength, IsFirstOfCutLengthIn) == 0x000000, "Member 'RCTracker_SetIsFirstOfCutLength::IsFirstOfCutLengthIn' has a wrong offset!");

// Function RopeCutting.RCTracker.SetIsLastOfCutLength
// 0x0001 (0x0001 - 0x0000)
struct RCTracker_SetIsLastOfCutLength final
{
public:
	bool                                          IsLastOfCutLengthIn;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTracker_SetIsLastOfCutLength) == 0x000001, "Wrong alignment on RCTracker_SetIsLastOfCutLength");
static_assert(sizeof(RCTracker_SetIsLastOfCutLength) == 0x000001, "Wrong size on RCTracker_SetIsLastOfCutLength");
static_assert(offsetof(RCTracker_SetIsLastOfCutLength, IsLastOfCutLengthIn) == 0x000000, "Member 'RCTracker_SetIsLastOfCutLength::IsLastOfCutLengthIn' has a wrong offset!");

// Function RopeCutting.RCTracker.SetPhysicsConstraint
// 0x0008 (0x0008 - 0x0000)
struct RCTracker_SetPhysicsConstraint final
{
public:
	class UPhysicsConstraintComponent*            PrimaryPhysicsConstraintIn;                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTracker_SetPhysicsConstraint) == 0x000008, "Wrong alignment on RCTracker_SetPhysicsConstraint");
static_assert(sizeof(RCTracker_SetPhysicsConstraint) == 0x000008, "Wrong size on RCTracker_SetPhysicsConstraint");
static_assert(offsetof(RCTracker_SetPhysicsConstraint, PrimaryPhysicsConstraintIn) == 0x000000, "Member 'RCTracker_SetPhysicsConstraint::PrimaryPhysicsConstraintIn' has a wrong offset!");

// Function RopeCutting.RCTracker.SetPositionNumber
// 0x0004 (0x0004 - 0x0000)
struct RCTracker_SetPositionNumber final
{
public:
	int32                                         PositionNumberIn;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTracker_SetPositionNumber) == 0x000004, "Wrong alignment on RCTracker_SetPositionNumber");
static_assert(sizeof(RCTracker_SetPositionNumber) == 0x000004, "Wrong size on RCTracker_SetPositionNumber");
static_assert(offsetof(RCTracker_SetPositionNumber, PositionNumberIn) == 0x000000, "Member 'RCTracker_SetPositionNumber::PositionNumberIn' has a wrong offset!");

// Function RopeCutting.RCTracker.SetPrimarySphereCollision
// 0x0008 (0x0008 - 0x0000)
struct RCTracker_SetPrimarySphereCollision final
{
public:
	class USphereComponent*                       PrimarySphereCollisionIn;                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTracker_SetPrimarySphereCollision) == 0x000008, "Wrong alignment on RCTracker_SetPrimarySphereCollision");
static_assert(sizeof(RCTracker_SetPrimarySphereCollision) == 0x000008, "Wrong size on RCTracker_SetPrimarySphereCollision");
static_assert(offsetof(RCTracker_SetPrimarySphereCollision, PrimarySphereCollisionIn) == 0x000000, "Member 'RCTracker_SetPrimarySphereCollision::PrimarySphereCollisionIn' has a wrong offset!");

// Function RopeCutting.RCTracker.SetPrimarySphereCollisionName
// 0x0008 (0x0008 - 0x0000)
struct RCTracker_SetPrimarySphereCollisionName final
{
public:
	class FName                                   PrimarySphereCollisionNameIn;                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTracker_SetPrimarySphereCollisionName) == 0x000004, "Wrong alignment on RCTracker_SetPrimarySphereCollisionName");
static_assert(sizeof(RCTracker_SetPrimarySphereCollisionName) == 0x000008, "Wrong size on RCTracker_SetPrimarySphereCollisionName");
static_assert(offsetof(RCTracker_SetPrimarySphereCollisionName, PrimarySphereCollisionNameIn) == 0x000000, "Member 'RCTracker_SetPrimarySphereCollisionName::PrimarySphereCollisionNameIn' has a wrong offset!");

// Function RopeCutting.RCTracker.SetSecondarySphereCollision
// 0x0008 (0x0008 - 0x0000)
struct RCTracker_SetSecondarySphereCollision final
{
public:
	class USphereComponent*                       SecondarySphereCollisionIn;                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTracker_SetSecondarySphereCollision) == 0x000008, "Wrong alignment on RCTracker_SetSecondarySphereCollision");
static_assert(sizeof(RCTracker_SetSecondarySphereCollision) == 0x000008, "Wrong size on RCTracker_SetSecondarySphereCollision");
static_assert(offsetof(RCTracker_SetSecondarySphereCollision, SecondarySphereCollisionIn) == 0x000000, "Member 'RCTracker_SetSecondarySphereCollision::SecondarySphereCollisionIn' has a wrong offset!");

// Function RopeCutting.RCTracker.SetSecondarySphereCollisionName
// 0x0008 (0x0008 - 0x0000)
struct RCTracker_SetSecondarySphereCollisionName final
{
public:
	class FName                                   SecondarySphereCollisionNameIn;                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTracker_SetSecondarySphereCollisionName) == 0x000004, "Wrong alignment on RCTracker_SetSecondarySphereCollisionName");
static_assert(sizeof(RCTracker_SetSecondarySphereCollisionName) == 0x000008, "Wrong size on RCTracker_SetSecondarySphereCollisionName");
static_assert(offsetof(RCTracker_SetSecondarySphereCollisionName, SecondarySphereCollisionNameIn) == 0x000000, "Member 'RCTracker_SetSecondarySphereCollisionName::SecondarySphereCollisionNameIn' has a wrong offset!");

// Function RopeCutting.RCTracker.SetSplineComponent
// 0x0008 (0x0008 - 0x0000)
struct RCTracker_SetSplineComponent final
{
public:
	class USplineComponent*                       SplineComponentIn;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTracker_SetSplineComponent) == 0x000008, "Wrong alignment on RCTracker_SetSplineComponent");
static_assert(sizeof(RCTracker_SetSplineComponent) == 0x000008, "Wrong size on RCTracker_SetSplineComponent");
static_assert(offsetof(RCTracker_SetSplineComponent, SplineComponentIn) == 0x000000, "Member 'RCTracker_SetSplineComponent::SplineComponentIn' has a wrong offset!");

// Function RopeCutting.RCTracker.SetSplineMesh
// 0x0008 (0x0008 - 0x0000)
struct RCTracker_SetSplineMesh final
{
public:
	class USplineMeshComponent*                   SplineMeshIn;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCTracker_SetSplineMesh) == 0x000008, "Wrong alignment on RCTracker_SetSplineMesh");
static_assert(sizeof(RCTracker_SetSplineMesh) == 0x000008, "Wrong size on RCTracker_SetSplineMesh");
static_assert(offsetof(RCTracker_SetSplineMesh, SplineMeshIn) == 0x000000, "Member 'RCTracker_SetSplineMesh::SplineMeshIn' has a wrong offset!");

// Function RopeCutting.RopeCuttingController.GetCutComponentName_RC
// 0x0010 (0x0010 - 0x0000)
struct RopeCuttingController_GetCutComponentName_RC final
{
public:
	class UPrimitiveComponent*                    HitCollisionComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RopeCuttingController_GetCutComponentName_RC) == 0x000008, "Wrong alignment on RopeCuttingController_GetCutComponentName_RC");
static_assert(sizeof(RopeCuttingController_GetCutComponentName_RC) == 0x000010, "Wrong size on RopeCuttingController_GetCutComponentName_RC");
static_assert(offsetof(RopeCuttingController_GetCutComponentName_RC, HitCollisionComponent) == 0x000000, "Member 'RopeCuttingController_GetCutComponentName_RC::HitCollisionComponent' has a wrong offset!");
static_assert(offsetof(RopeCuttingController_GetCutComponentName_RC, ReturnValue) == 0x000008, "Member 'RopeCuttingController_GetCutComponentName_RC::ReturnValue' has a wrong offset!");

// Function RopeCutting.RopeCuttingMessage.ActorMessageBeginCut_RC
// 0x0010 (0x0010 - 0x0000)
struct RopeCuttingMessage_ActorMessageBeginCut_RC final
{
public:
	class UPrimitiveComponent*                    HitCollisionComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RopeComponentUniqueIdentifier;                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RopeCuttingMessage_ActorMessageBeginCut_RC) == 0x000008, "Wrong alignment on RopeCuttingMessage_ActorMessageBeginCut_RC");
static_assert(sizeof(RopeCuttingMessage_ActorMessageBeginCut_RC) == 0x000010, "Wrong size on RopeCuttingMessage_ActorMessageBeginCut_RC");
static_assert(offsetof(RopeCuttingMessage_ActorMessageBeginCut_RC, HitCollisionComponent) == 0x000000, "Member 'RopeCuttingMessage_ActorMessageBeginCut_RC::HitCollisionComponent' has a wrong offset!");
static_assert(offsetof(RopeCuttingMessage_ActorMessageBeginCut_RC, RopeComponentUniqueIdentifier) == 0x000008, "Member 'RopeCuttingMessage_ActorMessageBeginCut_RC::RopeComponentUniqueIdentifier' has a wrong offset!");

// Function RopeCutting.RopePhy.AddPointsToSpline
// 0x0030 (0x0030 - 0x0000)
struct RopePhy_AddPointsToSpline final
{
public:
	class USplineComponent*                       SplineToGrow;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       UserSplineCRSIn;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfLoopsAPTSIn;                               // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnitLengthAPTSIn;                                  // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RopeOffsetAPTSIn;                                  // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RopePhy_AddPointsToSpline) == 0x000008, "Wrong alignment on RopePhy_AddPointsToSpline");
static_assert(sizeof(RopePhy_AddPointsToSpline) == 0x000030, "Wrong size on RopePhy_AddPointsToSpline");
static_assert(offsetof(RopePhy_AddPointsToSpline, SplineToGrow) == 0x000000, "Member 'RopePhy_AddPointsToSpline::SplineToGrow' has a wrong offset!");
static_assert(offsetof(RopePhy_AddPointsToSpline, UserSplineCRSIn) == 0x000008, "Member 'RopePhy_AddPointsToSpline::UserSplineCRSIn' has a wrong offset!");
static_assert(offsetof(RopePhy_AddPointsToSpline, NumberOfLoopsAPTSIn) == 0x000010, "Member 'RopePhy_AddPointsToSpline::NumberOfLoopsAPTSIn' has a wrong offset!");
static_assert(offsetof(RopePhy_AddPointsToSpline, UnitLengthAPTSIn) == 0x000014, "Member 'RopePhy_AddPointsToSpline::UnitLengthAPTSIn' has a wrong offset!");
static_assert(offsetof(RopePhy_AddPointsToSpline, RopeOffsetAPTSIn) == 0x000018, "Member 'RopePhy_AddPointsToSpline::RopeOffsetAPTSIn' has a wrong offset!");

// Function RopeCutting.RopePhy.AdjustRenderSplineLocation
// 0x0028 (0x0028 - 0x0000)
struct RopePhy_AdjustRenderSplineLocation final
{
public:
	class USplineComponent*                       RenderSpline;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       UserSpline;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    AttachedPrimitive;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfLoops;                                     // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x001C(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1998[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RopePhy_AdjustRenderSplineLocation) == 0x000008, "Wrong alignment on RopePhy_AdjustRenderSplineLocation");
static_assert(sizeof(RopePhy_AdjustRenderSplineLocation) == 0x000028, "Wrong size on RopePhy_AdjustRenderSplineLocation");
static_assert(offsetof(RopePhy_AdjustRenderSplineLocation, RenderSpline) == 0x000000, "Member 'RopePhy_AdjustRenderSplineLocation::RenderSpline' has a wrong offset!");
static_assert(offsetof(RopePhy_AdjustRenderSplineLocation, UserSpline) == 0x000008, "Member 'RopePhy_AdjustRenderSplineLocation::UserSpline' has a wrong offset!");
static_assert(offsetof(RopePhy_AdjustRenderSplineLocation, AttachedPrimitive) == 0x000010, "Member 'RopePhy_AdjustRenderSplineLocation::AttachedPrimitive' has a wrong offset!");
static_assert(offsetof(RopePhy_AdjustRenderSplineLocation, NumberOfLoops) == 0x000018, "Member 'RopePhy_AdjustRenderSplineLocation::NumberOfLoops' has a wrong offset!");
static_assert(offsetof(RopePhy_AdjustRenderSplineLocation, SocketName) == 0x00001C, "Member 'RopePhy_AdjustRenderSplineLocation::SocketName' has a wrong offset!");

// Function RopeCutting.RopePhy.ConfigureSplineMeshes
// 0x0028 (0x0028 - 0x0000)
struct RopePhy_ConfigureSplineMeshes final
{
public:
	class USplineMeshComponent*                   SplineMeshConfigSMInput;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            MeshTypeConfigSMInput;                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeshWidthConfigSMInput;                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1999[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     MeshMaterial01ConfigSMInput;                       // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     MeshMaterial02ConfigSMInput;                       // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RopePhy_ConfigureSplineMeshes) == 0x000008, "Wrong alignment on RopePhy_ConfigureSplineMeshes");
static_assert(sizeof(RopePhy_ConfigureSplineMeshes) == 0x000028, "Wrong size on RopePhy_ConfigureSplineMeshes");
static_assert(offsetof(RopePhy_ConfigureSplineMeshes, SplineMeshConfigSMInput) == 0x000000, "Member 'RopePhy_ConfigureSplineMeshes::SplineMeshConfigSMInput' has a wrong offset!");
static_assert(offsetof(RopePhy_ConfigureSplineMeshes, MeshTypeConfigSMInput) == 0x000008, "Member 'RopePhy_ConfigureSplineMeshes::MeshTypeConfigSMInput' has a wrong offset!");
static_assert(offsetof(RopePhy_ConfigureSplineMeshes, MeshWidthConfigSMInput) == 0x000010, "Member 'RopePhy_ConfigureSplineMeshes::MeshWidthConfigSMInput' has a wrong offset!");
static_assert(offsetof(RopePhy_ConfigureSplineMeshes, MeshMaterial01ConfigSMInput) == 0x000018, "Member 'RopePhy_ConfigureSplineMeshes::MeshMaterial01ConfigSMInput' has a wrong offset!");
static_assert(offsetof(RopePhy_ConfigureSplineMeshes, MeshMaterial02ConfigSMInput) == 0x000020, "Member 'RopePhy_ConfigureSplineMeshes::MeshMaterial02ConfigSMInput' has a wrong offset!");

// Function RopeCutting.RopePhy.CreateSpline
// 0x0048 (0x0048 - 0x0000)
struct RopePhy_CreateSpline final
{
public:
	class USplineComponent*                       InSplineCS;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocationCS;                                   // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               WorldRotationCS;                                   // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UWorld*                                 WorldRefCSIn;                                      // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        SelfRefCSIn;                                       // 0x0040(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RopePhy_CreateSpline) == 0x000008, "Wrong alignment on RopePhy_CreateSpline");
static_assert(sizeof(RopePhy_CreateSpline) == 0x000048, "Wrong size on RopePhy_CreateSpline");
static_assert(offsetof(RopePhy_CreateSpline, InSplineCS) == 0x000000, "Member 'RopePhy_CreateSpline::InSplineCS' has a wrong offset!");
static_assert(offsetof(RopePhy_CreateSpline, WorldLocationCS) == 0x000008, "Member 'RopePhy_CreateSpline::WorldLocationCS' has a wrong offset!");
static_assert(offsetof(RopePhy_CreateSpline, WorldRotationCS) == 0x000020, "Member 'RopePhy_CreateSpline::WorldRotationCS' has a wrong offset!");
static_assert(offsetof(RopePhy_CreateSpline, WorldRefCSIn) == 0x000038, "Member 'RopePhy_CreateSpline::WorldRefCSIn' has a wrong offset!");
static_assert(offsetof(RopePhy_CreateSpline, SelfRefCSIn) == 0x000040, "Member 'RopePhy_CreateSpline::SelfRefCSIn' has a wrong offset!");

// Function RopeCutting.RopePhy.CreateSplineMeshes
// 0x0018 (0x0018 - 0x0000)
struct RopePhy_CreateSplineMeshes final
{
public:
	class USplineMeshComponent*                   SplineMeshCSMInput;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 WorldRefCSMIn;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       SplineOwnerRefCSMIn;                               // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RopePhy_CreateSplineMeshes) == 0x000008, "Wrong alignment on RopePhy_CreateSplineMeshes");
static_assert(sizeof(RopePhy_CreateSplineMeshes) == 0x000018, "Wrong size on RopePhy_CreateSplineMeshes");
static_assert(offsetof(RopePhy_CreateSplineMeshes, SplineMeshCSMInput) == 0x000000, "Member 'RopePhy_CreateSplineMeshes::SplineMeshCSMInput' has a wrong offset!");
static_assert(offsetof(RopePhy_CreateSplineMeshes, WorldRefCSMIn) == 0x000008, "Member 'RopePhy_CreateSplineMeshes::WorldRefCSMIn' has a wrong offset!");
static_assert(offsetof(RopePhy_CreateSplineMeshes, SplineOwnerRefCSMIn) == 0x000010, "Member 'RopePhy_CreateSplineMeshes::SplineOwnerRefCSMIn' has a wrong offset!");

// Function RopeCutting.RopePhy.CreateUniqueName
// 0x0030 (0x0030 - 0x0000)
struct RopePhy_CreateUniqueName final
{
public:
	class FString                                 ComponentType;                                     // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComponentNumber;                                   // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_199A[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ThisComponentStrNameCUNIn;                         // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0028(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RopePhy_CreateUniqueName) == 0x000008, "Wrong alignment on RopePhy_CreateUniqueName");
static_assert(sizeof(RopePhy_CreateUniqueName) == 0x000030, "Wrong size on RopePhy_CreateUniqueName");
static_assert(offsetof(RopePhy_CreateUniqueName, ComponentType) == 0x000000, "Member 'RopePhy_CreateUniqueName::ComponentType' has a wrong offset!");
static_assert(offsetof(RopePhy_CreateUniqueName, ComponentNumber) == 0x000010, "Member 'RopePhy_CreateUniqueName::ComponentNumber' has a wrong offset!");
static_assert(offsetof(RopePhy_CreateUniqueName, ThisComponentStrNameCUNIn) == 0x000018, "Member 'RopePhy_CreateUniqueName::ThisComponentStrNameCUNIn' has a wrong offset!");
static_assert(offsetof(RopePhy_CreateUniqueName, ReturnValue) == 0x000028, "Member 'RopePhy_CreateUniqueName::ReturnValue' has a wrong offset!");

// Function RopeCutting.RopePhy.MakePhysConstr
// 0x0030 (0x0030 - 0x0000)
struct RopePhy_MakePhysConstr final
{
public:
	class UPhysicsConstraintComponent*            PhyConstrMPCIn;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 WorldRefMPCIn;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocationMPCIn;                                // 0x0010(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USphereComponent*                       CollRefAttachMPCIn;                                // 0x0028(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RopePhy_MakePhysConstr) == 0x000008, "Wrong alignment on RopePhy_MakePhysConstr");
static_assert(sizeof(RopePhy_MakePhysConstr) == 0x000030, "Wrong size on RopePhy_MakePhysConstr");
static_assert(offsetof(RopePhy_MakePhysConstr, PhyConstrMPCIn) == 0x000000, "Member 'RopePhy_MakePhysConstr::PhyConstrMPCIn' has a wrong offset!");
static_assert(offsetof(RopePhy_MakePhysConstr, WorldRefMPCIn) == 0x000008, "Member 'RopePhy_MakePhysConstr::WorldRefMPCIn' has a wrong offset!");
static_assert(offsetof(RopePhy_MakePhysConstr, WorldLocationMPCIn) == 0x000010, "Member 'RopePhy_MakePhysConstr::WorldLocationMPCIn' has a wrong offset!");
static_assert(offsetof(RopePhy_MakePhysConstr, CollRefAttachMPCIn) == 0x000028, "Member 'RopePhy_MakePhysConstr::CollRefAttachMPCIn' has a wrong offset!");

// Function RopeCutting.RopePhy.PhyConstrConfig
// 0x0020 (0x0020 - 0x0000)
struct RopePhy_PhyConstrConfig final
{
public:
	class UPhysicsConstraintComponent*            PhyConstrIn;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SetAngularSwing1LimitPCCIn;                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SetAngularSwing2LimitPCCIn;                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SetAngularTwistLimitPCCIn;                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionStrengthPCCIn;                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityStrengthPCCIn;                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_199B[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RopePhy_PhyConstrConfig) == 0x000008, "Wrong alignment on RopePhy_PhyConstrConfig");
static_assert(sizeof(RopePhy_PhyConstrConfig) == 0x000020, "Wrong size on RopePhy_PhyConstrConfig");
static_assert(offsetof(RopePhy_PhyConstrConfig, PhyConstrIn) == 0x000000, "Member 'RopePhy_PhyConstrConfig::PhyConstrIn' has a wrong offset!");
static_assert(offsetof(RopePhy_PhyConstrConfig, SetAngularSwing1LimitPCCIn) == 0x000008, "Member 'RopePhy_PhyConstrConfig::SetAngularSwing1LimitPCCIn' has a wrong offset!");
static_assert(offsetof(RopePhy_PhyConstrConfig, SetAngularSwing2LimitPCCIn) == 0x00000C, "Member 'RopePhy_PhyConstrConfig::SetAngularSwing2LimitPCCIn' has a wrong offset!");
static_assert(offsetof(RopePhy_PhyConstrConfig, SetAngularTwistLimitPCCIn) == 0x000010, "Member 'RopePhy_PhyConstrConfig::SetAngularTwistLimitPCCIn' has a wrong offset!");
static_assert(offsetof(RopePhy_PhyConstrConfig, PositionStrengthPCCIn) == 0x000014, "Member 'RopePhy_PhyConstrConfig::PositionStrengthPCCIn' has a wrong offset!");
static_assert(offsetof(RopePhy_PhyConstrConfig, VelocityStrengthPCCIn) == 0x000018, "Member 'RopePhy_PhyConstrConfig::VelocityStrengthPCCIn' has a wrong offset!");

// Function RopeCutting.RopePhy.SetSplMLocTang
// 0x0018 (0x0018 - 0x0000)
struct RopePhy_SetSplMLocTang final
{
public:
	class USplineComponent*                       ITargetSpline;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineMeshComponent*                   InTargetSplM;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IEditPoint;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnitLengthSSMLTIn;                                 // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RopePhy_SetSplMLocTang) == 0x000008, "Wrong alignment on RopePhy_SetSplMLocTang");
static_assert(sizeof(RopePhy_SetSplMLocTang) == 0x000018, "Wrong size on RopePhy_SetSplMLocTang");
static_assert(offsetof(RopePhy_SetSplMLocTang, ITargetSpline) == 0x000000, "Member 'RopePhy_SetSplMLocTang::ITargetSpline' has a wrong offset!");
static_assert(offsetof(RopePhy_SetSplMLocTang, InTargetSplM) == 0x000008, "Member 'RopePhy_SetSplMLocTang::InTargetSplM' has a wrong offset!");
static_assert(offsetof(RopePhy_SetSplMLocTang, IEditPoint) == 0x000010, "Member 'RopePhy_SetSplMLocTang::IEditPoint' has a wrong offset!");
static_assert(offsetof(RopePhy_SetSplMLocTang, UnitLengthSSMLTIn) == 0x000014, "Member 'RopePhy_SetSplMLocTang::UnitLengthSSMLTIn' has a wrong offset!");

// Function RopeCutting.RopePhy.SphereCollisionConfig
// 0x0038 (0x0038 - 0x0000)
struct RopePhy_SphereCollisionConfig final
{
public:
	bool                                          ShouldBlock;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SimPhysics;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_199C[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USphereComponent*                       SphereCollisionIn;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularDampeningSCCIn;                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearDampeningSCCIn;                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionSolverSCCIn;                               // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocitySolverSCCIn;                               // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StabilizationThresholdMultiplierSCCIn;             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SleepThresholdMultiplierSCCIn;                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InertiaTensorScaleSCCIn;                           // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollUnitScaleSCCIn;                                // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mass;                                              // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MassScale;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RopePhy_SphereCollisionConfig) == 0x000008, "Wrong alignment on RopePhy_SphereCollisionConfig");
static_assert(sizeof(RopePhy_SphereCollisionConfig) == 0x000038, "Wrong size on RopePhy_SphereCollisionConfig");
static_assert(offsetof(RopePhy_SphereCollisionConfig, ShouldBlock) == 0x000000, "Member 'RopePhy_SphereCollisionConfig::ShouldBlock' has a wrong offset!");
static_assert(offsetof(RopePhy_SphereCollisionConfig, SimPhysics) == 0x000001, "Member 'RopePhy_SphereCollisionConfig::SimPhysics' has a wrong offset!");
static_assert(offsetof(RopePhy_SphereCollisionConfig, SphereCollisionIn) == 0x000008, "Member 'RopePhy_SphereCollisionConfig::SphereCollisionIn' has a wrong offset!");
static_assert(offsetof(RopePhy_SphereCollisionConfig, AngularDampeningSCCIn) == 0x000010, "Member 'RopePhy_SphereCollisionConfig::AngularDampeningSCCIn' has a wrong offset!");
static_assert(offsetof(RopePhy_SphereCollisionConfig, LinearDampeningSCCIn) == 0x000014, "Member 'RopePhy_SphereCollisionConfig::LinearDampeningSCCIn' has a wrong offset!");
static_assert(offsetof(RopePhy_SphereCollisionConfig, PositionSolverSCCIn) == 0x000018, "Member 'RopePhy_SphereCollisionConfig::PositionSolverSCCIn' has a wrong offset!");
static_assert(offsetof(RopePhy_SphereCollisionConfig, VelocitySolverSCCIn) == 0x00001C, "Member 'RopePhy_SphereCollisionConfig::VelocitySolverSCCIn' has a wrong offset!");
static_assert(offsetof(RopePhy_SphereCollisionConfig, StabilizationThresholdMultiplierSCCIn) == 0x000020, "Member 'RopePhy_SphereCollisionConfig::StabilizationThresholdMultiplierSCCIn' has a wrong offset!");
static_assert(offsetof(RopePhy_SphereCollisionConfig, SleepThresholdMultiplierSCCIn) == 0x000024, "Member 'RopePhy_SphereCollisionConfig::SleepThresholdMultiplierSCCIn' has a wrong offset!");
static_assert(offsetof(RopePhy_SphereCollisionConfig, InertiaTensorScaleSCCIn) == 0x000028, "Member 'RopePhy_SphereCollisionConfig::InertiaTensorScaleSCCIn' has a wrong offset!");
static_assert(offsetof(RopePhy_SphereCollisionConfig, CollUnitScaleSCCIn) == 0x00002C, "Member 'RopePhy_SphereCollisionConfig::CollUnitScaleSCCIn' has a wrong offset!");
static_assert(offsetof(RopePhy_SphereCollisionConfig, Mass) == 0x000030, "Member 'RopePhy_SphereCollisionConfig::Mass' has a wrong offset!");
static_assert(offsetof(RopePhy_SphereCollisionConfig, MassScale) == 0x000034, "Member 'RopePhy_SphereCollisionConfig::MassScale' has a wrong offset!");

// Function RopeCutting.RopePhy.SplineUpDir
// 0x0010 (0x0010 - 0x0000)
struct RopePhy_SplineUpDir final
{
public:
	class USplineComponent*                       ITargetSpline;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ISplineUpDirClamp;                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_199D[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RopePhy_SplineUpDir) == 0x000008, "Wrong alignment on RopePhy_SplineUpDir");
static_assert(sizeof(RopePhy_SplineUpDir) == 0x000010, "Wrong size on RopePhy_SplineUpDir");
static_assert(offsetof(RopePhy_SplineUpDir, ITargetSpline) == 0x000000, "Member 'RopePhy_SplineUpDir::ITargetSpline' has a wrong offset!");
static_assert(offsetof(RopePhy_SplineUpDir, ISplineUpDirClamp) == 0x000008, "Member 'RopePhy_SplineUpDir::ISplineUpDirClamp' has a wrong offset!");

// Function RopeCutting.RopePhy.Build_RC
// 0x0058 (0x0058 - 0x0000)
struct RopePhy_Build_RC final
{
public:
	class UStaticMesh*                            Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            StartEndMesh;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionScale;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_199E[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USplineComponent*                       UserSpline;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnitLength;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_199F[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RopeOffset;                                        // 0x0028(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableRopeOffset;                                 // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19A0[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USphereComponent*>               ReturnValue;                                       // 0x0048(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RopePhy_Build_RC) == 0x000008, "Wrong alignment on RopePhy_Build_RC");
static_assert(sizeof(RopePhy_Build_RC) == 0x000058, "Wrong size on RopePhy_Build_RC");
static_assert(offsetof(RopePhy_Build_RC, Mesh) == 0x000000, "Member 'RopePhy_Build_RC::Mesh' has a wrong offset!");
static_assert(offsetof(RopePhy_Build_RC, StartEndMesh) == 0x000008, "Member 'RopePhy_Build_RC::StartEndMesh' has a wrong offset!");
static_assert(offsetof(RopePhy_Build_RC, CollisionScale) == 0x000010, "Member 'RopePhy_Build_RC::CollisionScale' has a wrong offset!");
static_assert(offsetof(RopePhy_Build_RC, UserSpline) == 0x000018, "Member 'RopePhy_Build_RC::UserSpline' has a wrong offset!");
static_assert(offsetof(RopePhy_Build_RC, UnitLength) == 0x000020, "Member 'RopePhy_Build_RC::UnitLength' has a wrong offset!");
static_assert(offsetof(RopePhy_Build_RC, RopeOffset) == 0x000028, "Member 'RopePhy_Build_RC::RopeOffset' has a wrong offset!");
static_assert(offsetof(RopePhy_Build_RC, DisableRopeOffset) == 0x000040, "Member 'RopePhy_Build_RC::DisableRopeOffset' has a wrong offset!");
static_assert(offsetof(RopePhy_Build_RC, ReturnValue) == 0x000048, "Member 'RopePhy_Build_RC::ReturnValue' has a wrong offset!");

// Function RopeCutting.RopePhy.Collision_RC
// 0x0038 (0x0038 - 0x0000)
struct RopePhy_Collision_RC final
{
public:
	float                                         CollisionScale;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularDampening;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearDampening;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocitySolverIterationCount;                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionSolverIterationCount;                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StabilizationThresholdMultiplier;                  // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SleepThresholdMultiplier;                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InertiaTensorScale;                                // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mass;                                              // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MassScale;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USphereComponent*>               ReturnValue;                                       // 0x0028(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RopePhy_Collision_RC) == 0x000008, "Wrong alignment on RopePhy_Collision_RC");
static_assert(sizeof(RopePhy_Collision_RC) == 0x000038, "Wrong size on RopePhy_Collision_RC");
static_assert(offsetof(RopePhy_Collision_RC, CollisionScale) == 0x000000, "Member 'RopePhy_Collision_RC::CollisionScale' has a wrong offset!");
static_assert(offsetof(RopePhy_Collision_RC, AngularDampening) == 0x000004, "Member 'RopePhy_Collision_RC::AngularDampening' has a wrong offset!");
static_assert(offsetof(RopePhy_Collision_RC, LinearDampening) == 0x000008, "Member 'RopePhy_Collision_RC::LinearDampening' has a wrong offset!");
static_assert(offsetof(RopePhy_Collision_RC, VelocitySolverIterationCount) == 0x00000C, "Member 'RopePhy_Collision_RC::VelocitySolverIterationCount' has a wrong offset!");
static_assert(offsetof(RopePhy_Collision_RC, PositionSolverIterationCount) == 0x000010, "Member 'RopePhy_Collision_RC::PositionSolverIterationCount' has a wrong offset!");
static_assert(offsetof(RopePhy_Collision_RC, StabilizationThresholdMultiplier) == 0x000014, "Member 'RopePhy_Collision_RC::StabilizationThresholdMultiplier' has a wrong offset!");
static_assert(offsetof(RopePhy_Collision_RC, SleepThresholdMultiplier) == 0x000018, "Member 'RopePhy_Collision_RC::SleepThresholdMultiplier' has a wrong offset!");
static_assert(offsetof(RopePhy_Collision_RC, InertiaTensorScale) == 0x00001C, "Member 'RopePhy_Collision_RC::InertiaTensorScale' has a wrong offset!");
static_assert(offsetof(RopePhy_Collision_RC, Mass) == 0x000020, "Member 'RopePhy_Collision_RC::Mass' has a wrong offset!");
static_assert(offsetof(RopePhy_Collision_RC, MassScale) == 0x000024, "Member 'RopePhy_Collision_RC::MassScale' has a wrong offset!");
static_assert(offsetof(RopePhy_Collision_RC, ReturnValue) == 0x000028, "Member 'RopePhy_Collision_RC::ReturnValue' has a wrong offset!");

// Function RopeCutting.RopePhy.Constraint_RC
// 0x0028 (0x0028 - 0x0000)
struct RopePhy_Constraint_RC final
{
public:
	int32                                         AngularDrivePositionStrength;                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AngularDriveVelocityStrength;                      // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SetAngularSwing1Limit;                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SetAngularSwing2Limit;                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SetAngularTwistLimit;                              // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19A1[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPhysicsConstraintComponent*>    ReturnValue;                                       // 0x0018(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RopePhy_Constraint_RC) == 0x000008, "Wrong alignment on RopePhy_Constraint_RC");
static_assert(sizeof(RopePhy_Constraint_RC) == 0x000028, "Wrong size on RopePhy_Constraint_RC");
static_assert(offsetof(RopePhy_Constraint_RC, AngularDrivePositionStrength) == 0x000000, "Member 'RopePhy_Constraint_RC::AngularDrivePositionStrength' has a wrong offset!");
static_assert(offsetof(RopePhy_Constraint_RC, AngularDriveVelocityStrength) == 0x000004, "Member 'RopePhy_Constraint_RC::AngularDriveVelocityStrength' has a wrong offset!");
static_assert(offsetof(RopePhy_Constraint_RC, SetAngularSwing1Limit) == 0x000008, "Member 'RopePhy_Constraint_RC::SetAngularSwing1Limit' has a wrong offset!");
static_assert(offsetof(RopePhy_Constraint_RC, SetAngularSwing2Limit) == 0x00000C, "Member 'RopePhy_Constraint_RC::SetAngularSwing2Limit' has a wrong offset!");
static_assert(offsetof(RopePhy_Constraint_RC, SetAngularTwistLimit) == 0x000010, "Member 'RopePhy_Constraint_RC::SetAngularTwistLimit' has a wrong offset!");
static_assert(offsetof(RopePhy_Constraint_RC, ReturnValue) == 0x000018, "Member 'RopePhy_Constraint_RC::ReturnValue' has a wrong offset!");

// Function RopeCutting.RopePhy.GetCollisionArray_RC
// 0x0010 (0x0010 - 0x0000)
struct RopePhy_GetCollisionArray_RC final
{
public:
	TArray<class USphereComponent*>               ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RopePhy_GetCollisionArray_RC) == 0x000008, "Wrong alignment on RopePhy_GetCollisionArray_RC");
static_assert(sizeof(RopePhy_GetCollisionArray_RC) == 0x000010, "Wrong size on RopePhy_GetCollisionArray_RC");
static_assert(offsetof(RopePhy_GetCollisionArray_RC, ReturnValue) == 0x000000, "Member 'RopePhy_GetCollisionArray_RC::ReturnValue' has a wrong offset!");

// Function RopeCutting.RopePhy.GetFirstCollisionObject_RC
// 0x0008 (0x0008 - 0x0000)
struct RopePhy_GetFirstCollisionObject_RC final
{
public:
	class USphereComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RopePhy_GetFirstCollisionObject_RC) == 0x000008, "Wrong alignment on RopePhy_GetFirstCollisionObject_RC");
static_assert(sizeof(RopePhy_GetFirstCollisionObject_RC) == 0x000008, "Wrong size on RopePhy_GetFirstCollisionObject_RC");
static_assert(offsetof(RopePhy_GetFirstCollisionObject_RC, ReturnValue) == 0x000000, "Member 'RopePhy_GetFirstCollisionObject_RC::ReturnValue' has a wrong offset!");

// Function RopeCutting.RopePhy.GetLastCollisionObject_RC
// 0x0008 (0x0008 - 0x0000)
struct RopePhy_GetLastCollisionObject_RC final
{
public:
	class USphereComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RopePhy_GetLastCollisionObject_RC) == 0x000008, "Wrong alignment on RopePhy_GetLastCollisionObject_RC");
static_assert(sizeof(RopePhy_GetLastCollisionObject_RC) == 0x000008, "Wrong size on RopePhy_GetLastCollisionObject_RC");
static_assert(offsetof(RopePhy_GetLastCollisionObject_RC, ReturnValue) == 0x000000, "Member 'RopePhy_GetLastCollisionObject_RC::ReturnValue' has a wrong offset!");

// Function RopeCutting.RopePhy.GetSpline_RC
// 0x0008 (0x0008 - 0x0000)
struct RopePhy_GetSpline_RC final
{
public:
	class USplineComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RopePhy_GetSpline_RC) == 0x000008, "Wrong alignment on RopePhy_GetSpline_RC");
static_assert(sizeof(RopePhy_GetSpline_RC) == 0x000008, "Wrong size on RopePhy_GetSpline_RC");
static_assert(offsetof(RopePhy_GetSpline_RC, ReturnValue) == 0x000000, "Member 'RopePhy_GetSpline_RC::ReturnValue' has a wrong offset!");

// Function RopeCutting.RopePhy.Mesh_RC
// 0x00D0 (0x00D0 - 0x0000)
struct RopePhy_Mesh_RC final
{
public:
	class UStaticMesh*                            StartMesh;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartMeshWidth;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19A2[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     StartMeshMat01;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     StartMeshMat02;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            Mesh01;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mesh01Width;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19A3[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Mesh01Mat01;                                       // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Mesh01Mat02;                                       // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            Mesh02;                                            // 0x0040(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mesh02Width;                                       // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19A4[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Mesh02Mat01;                                       // 0x0050(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Mesh02Mat02;                                       // 0x0058(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            Mesh03;                                            // 0x0060(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mesh03Width;                                       // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19A5[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Mesh03Mat01;                                       // 0x0070(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Mesh03Mat02;                                       // 0x0078(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            Mesh04;                                            // 0x0080(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mesh04Width;                                       // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19A6[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Mesh04Mat01;                                       // 0x0090(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Mesh04Mat02;                                       // 0x0098(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            EndMesh;                                           // 0x00A0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndMeshWidth;                                      // 0x00A8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19A7[0x4];                                     // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     EndMeshMat01;                                      // 0x00B0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     EndMeshMat02;                                      // 0x00B8(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USplineMeshComponent*>           ReturnValue;                                       // 0x00C0(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RopePhy_Mesh_RC) == 0x000008, "Wrong alignment on RopePhy_Mesh_RC");
static_assert(sizeof(RopePhy_Mesh_RC) == 0x0000D0, "Wrong size on RopePhy_Mesh_RC");
static_assert(offsetof(RopePhy_Mesh_RC, StartMesh) == 0x000000, "Member 'RopePhy_Mesh_RC::StartMesh' has a wrong offset!");
static_assert(offsetof(RopePhy_Mesh_RC, StartMeshWidth) == 0x000008, "Member 'RopePhy_Mesh_RC::StartMeshWidth' has a wrong offset!");
static_assert(offsetof(RopePhy_Mesh_RC, StartMeshMat01) == 0x000010, "Member 'RopePhy_Mesh_RC::StartMeshMat01' has a wrong offset!");
static_assert(offsetof(RopePhy_Mesh_RC, StartMeshMat02) == 0x000018, "Member 'RopePhy_Mesh_RC::StartMeshMat02' has a wrong offset!");
static_assert(offsetof(RopePhy_Mesh_RC, Mesh01) == 0x000020, "Member 'RopePhy_Mesh_RC::Mesh01' has a wrong offset!");
static_assert(offsetof(RopePhy_Mesh_RC, Mesh01Width) == 0x000028, "Member 'RopePhy_Mesh_RC::Mesh01Width' has a wrong offset!");
static_assert(offsetof(RopePhy_Mesh_RC, Mesh01Mat01) == 0x000030, "Member 'RopePhy_Mesh_RC::Mesh01Mat01' has a wrong offset!");
static_assert(offsetof(RopePhy_Mesh_RC, Mesh01Mat02) == 0x000038, "Member 'RopePhy_Mesh_RC::Mesh01Mat02' has a wrong offset!");
static_assert(offsetof(RopePhy_Mesh_RC, Mesh02) == 0x000040, "Member 'RopePhy_Mesh_RC::Mesh02' has a wrong offset!");
static_assert(offsetof(RopePhy_Mesh_RC, Mesh02Width) == 0x000048, "Member 'RopePhy_Mesh_RC::Mesh02Width' has a wrong offset!");
static_assert(offsetof(RopePhy_Mesh_RC, Mesh02Mat01) == 0x000050, "Member 'RopePhy_Mesh_RC::Mesh02Mat01' has a wrong offset!");
static_assert(offsetof(RopePhy_Mesh_RC, Mesh02Mat02) == 0x000058, "Member 'RopePhy_Mesh_RC::Mesh02Mat02' has a wrong offset!");
static_assert(offsetof(RopePhy_Mesh_RC, Mesh03) == 0x000060, "Member 'RopePhy_Mesh_RC::Mesh03' has a wrong offset!");
static_assert(offsetof(RopePhy_Mesh_RC, Mesh03Width) == 0x000068, "Member 'RopePhy_Mesh_RC::Mesh03Width' has a wrong offset!");
static_assert(offsetof(RopePhy_Mesh_RC, Mesh03Mat01) == 0x000070, "Member 'RopePhy_Mesh_RC::Mesh03Mat01' has a wrong offset!");
static_assert(offsetof(RopePhy_Mesh_RC, Mesh03Mat02) == 0x000078, "Member 'RopePhy_Mesh_RC::Mesh03Mat02' has a wrong offset!");
static_assert(offsetof(RopePhy_Mesh_RC, Mesh04) == 0x000080, "Member 'RopePhy_Mesh_RC::Mesh04' has a wrong offset!");
static_assert(offsetof(RopePhy_Mesh_RC, Mesh04Width) == 0x000088, "Member 'RopePhy_Mesh_RC::Mesh04Width' has a wrong offset!");
static_assert(offsetof(RopePhy_Mesh_RC, Mesh04Mat01) == 0x000090, "Member 'RopePhy_Mesh_RC::Mesh04Mat01' has a wrong offset!");
static_assert(offsetof(RopePhy_Mesh_RC, Mesh04Mat02) == 0x000098, "Member 'RopePhy_Mesh_RC::Mesh04Mat02' has a wrong offset!");
static_assert(offsetof(RopePhy_Mesh_RC, EndMesh) == 0x0000A0, "Member 'RopePhy_Mesh_RC::EndMesh' has a wrong offset!");
static_assert(offsetof(RopePhy_Mesh_RC, EndMeshWidth) == 0x0000A8, "Member 'RopePhy_Mesh_RC::EndMeshWidth' has a wrong offset!");
static_assert(offsetof(RopePhy_Mesh_RC, EndMeshMat01) == 0x0000B0, "Member 'RopePhy_Mesh_RC::EndMeshMat01' has a wrong offset!");
static_assert(offsetof(RopePhy_Mesh_RC, EndMeshMat02) == 0x0000B8, "Member 'RopePhy_Mesh_RC::EndMeshMat02' has a wrong offset!");
static_assert(offsetof(RopePhy_Mesh_RC, ReturnValue) == 0x0000C0, "Member 'RopePhy_Mesh_RC::ReturnValue' has a wrong offset!");

// Function RopeCutting.RopePhy.SetUserSplineEndLocation_RC
// 0x0028 (0x0028 - 0x0000)
struct RopePhy_SetUserSplineEndLocation_RC final
{
public:
	class USplineComponent*                       UserSpline;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationUserSplineEnd;                             // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseRelativeLocationUserSplineEnd;                  // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19A8[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RopePhy_SetUserSplineEndLocation_RC) == 0x000008, "Wrong alignment on RopePhy_SetUserSplineEndLocation_RC");
static_assert(sizeof(RopePhy_SetUserSplineEndLocation_RC) == 0x000028, "Wrong size on RopePhy_SetUserSplineEndLocation_RC");
static_assert(offsetof(RopePhy_SetUserSplineEndLocation_RC, UserSpline) == 0x000000, "Member 'RopePhy_SetUserSplineEndLocation_RC::UserSpline' has a wrong offset!");
static_assert(offsetof(RopePhy_SetUserSplineEndLocation_RC, LocationUserSplineEnd) == 0x000008, "Member 'RopePhy_SetUserSplineEndLocation_RC::LocationUserSplineEnd' has a wrong offset!");
static_assert(offsetof(RopePhy_SetUserSplineEndLocation_RC, UseRelativeLocationUserSplineEnd) == 0x000020, "Member 'RopePhy_SetUserSplineEndLocation_RC::UseRelativeLocationUserSplineEnd' has a wrong offset!");

// Function RopeCutting.RopePhy.SetUserSplineStartLocation_RC
// 0x0028 (0x0028 - 0x0000)
struct RopePhy_SetUserSplineStartLocation_RC final
{
public:
	class USplineComponent*                       UserSpline;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationUserSplineStart;                           // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseRelativeLocationUserSplineStart;                // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19A9[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RopePhy_SetUserSplineStartLocation_RC) == 0x000008, "Wrong alignment on RopePhy_SetUserSplineStartLocation_RC");
static_assert(sizeof(RopePhy_SetUserSplineStartLocation_RC) == 0x000028, "Wrong size on RopePhy_SetUserSplineStartLocation_RC");
static_assert(offsetof(RopePhy_SetUserSplineStartLocation_RC, UserSpline) == 0x000000, "Member 'RopePhy_SetUserSplineStartLocation_RC::UserSpline' has a wrong offset!");
static_assert(offsetof(RopePhy_SetUserSplineStartLocation_RC, LocationUserSplineStart) == 0x000008, "Member 'RopePhy_SetUserSplineStartLocation_RC::LocationUserSplineStart' has a wrong offset!");
static_assert(offsetof(RopePhy_SetUserSplineStartLocation_RC, UseRelativeLocationUserSplineStart) == 0x000020, "Member 'RopePhy_SetUserSplineStartLocation_RC::UseRelativeLocationUserSplineStart' has a wrong offset!");

// Function RopeCutting.RopeStatic.AddPointsToSpline
// 0x0030 (0x0030 - 0x0000)
struct RopeStatic_AddPointsToSpline final
{
public:
	class USplineComponent*                       SplineToGrow;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       UserSplineCRSIn;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfLoopsAPTSIn;                               // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnitLengthAPTSIn;                                  // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RopeOffsetAPTSIn;                                  // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RopeStatic_AddPointsToSpline) == 0x000008, "Wrong alignment on RopeStatic_AddPointsToSpline");
static_assert(sizeof(RopeStatic_AddPointsToSpline) == 0x000030, "Wrong size on RopeStatic_AddPointsToSpline");
static_assert(offsetof(RopeStatic_AddPointsToSpline, SplineToGrow) == 0x000000, "Member 'RopeStatic_AddPointsToSpline::SplineToGrow' has a wrong offset!");
static_assert(offsetof(RopeStatic_AddPointsToSpline, UserSplineCRSIn) == 0x000008, "Member 'RopeStatic_AddPointsToSpline::UserSplineCRSIn' has a wrong offset!");
static_assert(offsetof(RopeStatic_AddPointsToSpline, NumberOfLoopsAPTSIn) == 0x000010, "Member 'RopeStatic_AddPointsToSpline::NumberOfLoopsAPTSIn' has a wrong offset!");
static_assert(offsetof(RopeStatic_AddPointsToSpline, UnitLengthAPTSIn) == 0x000014, "Member 'RopeStatic_AddPointsToSpline::UnitLengthAPTSIn' has a wrong offset!");
static_assert(offsetof(RopeStatic_AddPointsToSpline, RopeOffsetAPTSIn) == 0x000018, "Member 'RopeStatic_AddPointsToSpline::RopeOffsetAPTSIn' has a wrong offset!");

// Function RopeCutting.RopeStatic.AdjustRenderSplineLocation
// 0x0028 (0x0028 - 0x0000)
struct RopeStatic_AdjustRenderSplineLocation final
{
public:
	class USplineComponent*                       RenderSpline;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       UserSpline;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    AttachedPrimitive;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfLoops;                                     // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x001C(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19B2[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RopeStatic_AdjustRenderSplineLocation) == 0x000008, "Wrong alignment on RopeStatic_AdjustRenderSplineLocation");
static_assert(sizeof(RopeStatic_AdjustRenderSplineLocation) == 0x000028, "Wrong size on RopeStatic_AdjustRenderSplineLocation");
static_assert(offsetof(RopeStatic_AdjustRenderSplineLocation, RenderSpline) == 0x000000, "Member 'RopeStatic_AdjustRenderSplineLocation::RenderSpline' has a wrong offset!");
static_assert(offsetof(RopeStatic_AdjustRenderSplineLocation, UserSpline) == 0x000008, "Member 'RopeStatic_AdjustRenderSplineLocation::UserSpline' has a wrong offset!");
static_assert(offsetof(RopeStatic_AdjustRenderSplineLocation, AttachedPrimitive) == 0x000010, "Member 'RopeStatic_AdjustRenderSplineLocation::AttachedPrimitive' has a wrong offset!");
static_assert(offsetof(RopeStatic_AdjustRenderSplineLocation, NumberOfLoops) == 0x000018, "Member 'RopeStatic_AdjustRenderSplineLocation::NumberOfLoops' has a wrong offset!");
static_assert(offsetof(RopeStatic_AdjustRenderSplineLocation, SocketName) == 0x00001C, "Member 'RopeStatic_AdjustRenderSplineLocation::SocketName' has a wrong offset!");

// Function RopeCutting.RopeStatic.ConfigureSplineMeshes
// 0x0028 (0x0028 - 0x0000)
struct RopeStatic_ConfigureSplineMeshes final
{
public:
	class USplineMeshComponent*                   SplineMeshConfigSMInput;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            MeshTypeConfigSMInput;                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeshWidthConfigSMInput;                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19B3[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     MeshMaterial01ConfigSMInput;                       // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     MeshMaterial02ConfigSMInput;                       // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RopeStatic_ConfigureSplineMeshes) == 0x000008, "Wrong alignment on RopeStatic_ConfigureSplineMeshes");
static_assert(sizeof(RopeStatic_ConfigureSplineMeshes) == 0x000028, "Wrong size on RopeStatic_ConfigureSplineMeshes");
static_assert(offsetof(RopeStatic_ConfigureSplineMeshes, SplineMeshConfigSMInput) == 0x000000, "Member 'RopeStatic_ConfigureSplineMeshes::SplineMeshConfigSMInput' has a wrong offset!");
static_assert(offsetof(RopeStatic_ConfigureSplineMeshes, MeshTypeConfigSMInput) == 0x000008, "Member 'RopeStatic_ConfigureSplineMeshes::MeshTypeConfigSMInput' has a wrong offset!");
static_assert(offsetof(RopeStatic_ConfigureSplineMeshes, MeshWidthConfigSMInput) == 0x000010, "Member 'RopeStatic_ConfigureSplineMeshes::MeshWidthConfigSMInput' has a wrong offset!");
static_assert(offsetof(RopeStatic_ConfigureSplineMeshes, MeshMaterial01ConfigSMInput) == 0x000018, "Member 'RopeStatic_ConfigureSplineMeshes::MeshMaterial01ConfigSMInput' has a wrong offset!");
static_assert(offsetof(RopeStatic_ConfigureSplineMeshes, MeshMaterial02ConfigSMInput) == 0x000020, "Member 'RopeStatic_ConfigureSplineMeshes::MeshMaterial02ConfigSMInput' has a wrong offset!");

// Function RopeCutting.RopeStatic.CreateSpline
// 0x0048 (0x0048 - 0x0000)
struct RopeStatic_CreateSpline final
{
public:
	class USplineComponent*                       InSplineCS;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocationCS;                                   // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               WorldRotationCS;                                   // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UWorld*                                 WorldRefCSIn;                                      // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        SelfRefCSIn;                                       // 0x0040(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RopeStatic_CreateSpline) == 0x000008, "Wrong alignment on RopeStatic_CreateSpline");
static_assert(sizeof(RopeStatic_CreateSpline) == 0x000048, "Wrong size on RopeStatic_CreateSpline");
static_assert(offsetof(RopeStatic_CreateSpline, InSplineCS) == 0x000000, "Member 'RopeStatic_CreateSpline::InSplineCS' has a wrong offset!");
static_assert(offsetof(RopeStatic_CreateSpline, WorldLocationCS) == 0x000008, "Member 'RopeStatic_CreateSpline::WorldLocationCS' has a wrong offset!");
static_assert(offsetof(RopeStatic_CreateSpline, WorldRotationCS) == 0x000020, "Member 'RopeStatic_CreateSpline::WorldRotationCS' has a wrong offset!");
static_assert(offsetof(RopeStatic_CreateSpline, WorldRefCSIn) == 0x000038, "Member 'RopeStatic_CreateSpline::WorldRefCSIn' has a wrong offset!");
static_assert(offsetof(RopeStatic_CreateSpline, SelfRefCSIn) == 0x000040, "Member 'RopeStatic_CreateSpline::SelfRefCSIn' has a wrong offset!");

// Function RopeCutting.RopeStatic.CreateSplineMeshes
// 0x0018 (0x0018 - 0x0000)
struct RopeStatic_CreateSplineMeshes final
{
public:
	class USplineMeshComponent*                   SplineMeshCSMInput;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 WorldRefCSMIn;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       SplineOwnerRefCSMIn;                               // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RopeStatic_CreateSplineMeshes) == 0x000008, "Wrong alignment on RopeStatic_CreateSplineMeshes");
static_assert(sizeof(RopeStatic_CreateSplineMeshes) == 0x000018, "Wrong size on RopeStatic_CreateSplineMeshes");
static_assert(offsetof(RopeStatic_CreateSplineMeshes, SplineMeshCSMInput) == 0x000000, "Member 'RopeStatic_CreateSplineMeshes::SplineMeshCSMInput' has a wrong offset!");
static_assert(offsetof(RopeStatic_CreateSplineMeshes, WorldRefCSMIn) == 0x000008, "Member 'RopeStatic_CreateSplineMeshes::WorldRefCSMIn' has a wrong offset!");
static_assert(offsetof(RopeStatic_CreateSplineMeshes, SplineOwnerRefCSMIn) == 0x000010, "Member 'RopeStatic_CreateSplineMeshes::SplineOwnerRefCSMIn' has a wrong offset!");

// Function RopeCutting.RopeStatic.CreateUniqueName
// 0x0030 (0x0030 - 0x0000)
struct RopeStatic_CreateUniqueName final
{
public:
	class FString                                 ComponentType;                                     // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComponentNumber;                                   // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19B4[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ThisComponentStrNameCUNIn;                         // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0028(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RopeStatic_CreateUniqueName) == 0x000008, "Wrong alignment on RopeStatic_CreateUniqueName");
static_assert(sizeof(RopeStatic_CreateUniqueName) == 0x000030, "Wrong size on RopeStatic_CreateUniqueName");
static_assert(offsetof(RopeStatic_CreateUniqueName, ComponentType) == 0x000000, "Member 'RopeStatic_CreateUniqueName::ComponentType' has a wrong offset!");
static_assert(offsetof(RopeStatic_CreateUniqueName, ComponentNumber) == 0x000010, "Member 'RopeStatic_CreateUniqueName::ComponentNumber' has a wrong offset!");
static_assert(offsetof(RopeStatic_CreateUniqueName, ThisComponentStrNameCUNIn) == 0x000018, "Member 'RopeStatic_CreateUniqueName::ThisComponentStrNameCUNIn' has a wrong offset!");
static_assert(offsetof(RopeStatic_CreateUniqueName, ReturnValue) == 0x000028, "Member 'RopeStatic_CreateUniqueName::ReturnValue' has a wrong offset!");

// Function RopeCutting.RopeStatic.SetSplMLocTang
// 0x0018 (0x0018 - 0x0000)
struct RopeStatic_SetSplMLocTang final
{
public:
	class USplineComponent*                       ITargetSpline;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineMeshComponent*                   InTargetSplM;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IEditPoint;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnitLengthSSMLTIn;                                 // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RopeStatic_SetSplMLocTang) == 0x000008, "Wrong alignment on RopeStatic_SetSplMLocTang");
static_assert(sizeof(RopeStatic_SetSplMLocTang) == 0x000018, "Wrong size on RopeStatic_SetSplMLocTang");
static_assert(offsetof(RopeStatic_SetSplMLocTang, ITargetSpline) == 0x000000, "Member 'RopeStatic_SetSplMLocTang::ITargetSpline' has a wrong offset!");
static_assert(offsetof(RopeStatic_SetSplMLocTang, InTargetSplM) == 0x000008, "Member 'RopeStatic_SetSplMLocTang::InTargetSplM' has a wrong offset!");
static_assert(offsetof(RopeStatic_SetSplMLocTang, IEditPoint) == 0x000010, "Member 'RopeStatic_SetSplMLocTang::IEditPoint' has a wrong offset!");
static_assert(offsetof(RopeStatic_SetSplMLocTang, UnitLengthSSMLTIn) == 0x000014, "Member 'RopeStatic_SetSplMLocTang::UnitLengthSSMLTIn' has a wrong offset!");

// Function RopeCutting.RopeStatic.SplineUpDir
// 0x0010 (0x0010 - 0x0000)
struct RopeStatic_SplineUpDir final
{
public:
	class USplineComponent*                       ITargetSpline;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ISplineUpDirClamp;                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19B5[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RopeStatic_SplineUpDir) == 0x000008, "Wrong alignment on RopeStatic_SplineUpDir");
static_assert(sizeof(RopeStatic_SplineUpDir) == 0x000010, "Wrong size on RopeStatic_SplineUpDir");
static_assert(offsetof(RopeStatic_SplineUpDir, ITargetSpline) == 0x000000, "Member 'RopeStatic_SplineUpDir::ITargetSpline' has a wrong offset!");
static_assert(offsetof(RopeStatic_SplineUpDir, ISplineUpDirClamp) == 0x000008, "Member 'RopeStatic_SplineUpDir::ISplineUpDirClamp' has a wrong offset!");

// Function RopeCutting.RopeStatic.Build_RC
// 0x0050 (0x0050 - 0x0000)
struct RopeStatic_Build_RC final
{
public:
	class USplineComponent*                       UserSpline;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            Mesh;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            StartEndMesh;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CollisionScale;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnitLength;                                        // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RopeOffset;                                        // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableRopeOffset;                                 // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19B6[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USphereComponent*>               ReturnValue;                                       // 0x0040(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RopeStatic_Build_RC) == 0x000008, "Wrong alignment on RopeStatic_Build_RC");
static_assert(sizeof(RopeStatic_Build_RC) == 0x000050, "Wrong size on RopeStatic_Build_RC");
static_assert(offsetof(RopeStatic_Build_RC, UserSpline) == 0x000000, "Member 'RopeStatic_Build_RC::UserSpline' has a wrong offset!");
static_assert(offsetof(RopeStatic_Build_RC, Mesh) == 0x000008, "Member 'RopeStatic_Build_RC::Mesh' has a wrong offset!");
static_assert(offsetof(RopeStatic_Build_RC, StartEndMesh) == 0x000010, "Member 'RopeStatic_Build_RC::StartEndMesh' has a wrong offset!");
static_assert(offsetof(RopeStatic_Build_RC, CollisionScale) == 0x000018, "Member 'RopeStatic_Build_RC::CollisionScale' has a wrong offset!");
static_assert(offsetof(RopeStatic_Build_RC, UnitLength) == 0x00001C, "Member 'RopeStatic_Build_RC::UnitLength' has a wrong offset!");
static_assert(offsetof(RopeStatic_Build_RC, RopeOffset) == 0x000020, "Member 'RopeStatic_Build_RC::RopeOffset' has a wrong offset!");
static_assert(offsetof(RopeStatic_Build_RC, DisableRopeOffset) == 0x000038, "Member 'RopeStatic_Build_RC::DisableRopeOffset' has a wrong offset!");
static_assert(offsetof(RopeStatic_Build_RC, ReturnValue) == 0x000040, "Member 'RopeStatic_Build_RC::ReturnValue' has a wrong offset!");

// Function RopeCutting.RopeStatic.Get_Spline_RC
// 0x0008 (0x0008 - 0x0000)
struct RopeStatic_Get_Spline_RC final
{
public:
	class USplineComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RopeStatic_Get_Spline_RC) == 0x000008, "Wrong alignment on RopeStatic_Get_Spline_RC");
static_assert(sizeof(RopeStatic_Get_Spline_RC) == 0x000008, "Wrong size on RopeStatic_Get_Spline_RC");
static_assert(offsetof(RopeStatic_Get_Spline_RC, ReturnValue) == 0x000000, "Member 'RopeStatic_Get_Spline_RC::ReturnValue' has a wrong offset!");

// Function RopeCutting.RopeStatic.GetCollisionArray_RC
// 0x0010 (0x0010 - 0x0000)
struct RopeStatic_GetCollisionArray_RC final
{
public:
	TArray<class USphereComponent*>               ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RopeStatic_GetCollisionArray_RC) == 0x000008, "Wrong alignment on RopeStatic_GetCollisionArray_RC");
static_assert(sizeof(RopeStatic_GetCollisionArray_RC) == 0x000010, "Wrong size on RopeStatic_GetCollisionArray_RC");
static_assert(offsetof(RopeStatic_GetCollisionArray_RC, ReturnValue) == 0x000000, "Member 'RopeStatic_GetCollisionArray_RC::ReturnValue' has a wrong offset!");

// Function RopeCutting.RopeStatic.GetFirstCollisionObject_RC
// 0x0008 (0x0008 - 0x0000)
struct RopeStatic_GetFirstCollisionObject_RC final
{
public:
	class USphereComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RopeStatic_GetFirstCollisionObject_RC) == 0x000008, "Wrong alignment on RopeStatic_GetFirstCollisionObject_RC");
static_assert(sizeof(RopeStatic_GetFirstCollisionObject_RC) == 0x000008, "Wrong size on RopeStatic_GetFirstCollisionObject_RC");
static_assert(offsetof(RopeStatic_GetFirstCollisionObject_RC, ReturnValue) == 0x000000, "Member 'RopeStatic_GetFirstCollisionObject_RC::ReturnValue' has a wrong offset!");

// Function RopeCutting.RopeStatic.GetLastCollisionObject_RC
// 0x0008 (0x0008 - 0x0000)
struct RopeStatic_GetLastCollisionObject_RC final
{
public:
	class USphereComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RopeStatic_GetLastCollisionObject_RC) == 0x000008, "Wrong alignment on RopeStatic_GetLastCollisionObject_RC");
static_assert(sizeof(RopeStatic_GetLastCollisionObject_RC) == 0x000008, "Wrong size on RopeStatic_GetLastCollisionObject_RC");
static_assert(offsetof(RopeStatic_GetLastCollisionObject_RC, ReturnValue) == 0x000000, "Member 'RopeStatic_GetLastCollisionObject_RC::ReturnValue' has a wrong offset!");

// Function RopeCutting.RopeStatic.Mesh_RC
// 0x00D0 (0x00D0 - 0x0000)
struct RopeStatic_Mesh_RC final
{
public:
	class UStaticMesh*                            StartMesh;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartMeshWidth;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19B7[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     StartMeshMat01;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     StartMeshMat02;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            Mesh01;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mesh01Width;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19B8[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Mesh01Mat01;                                       // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Mesh01Mat02;                                       // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            Mesh02;                                            // 0x0040(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mesh02Width;                                       // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19B9[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Mesh02Mat01;                                       // 0x0050(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Mesh02Mat02;                                       // 0x0058(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            Mesh03;                                            // 0x0060(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mesh03Width;                                       // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19BA[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Mesh03Mat01;                                       // 0x0070(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Mesh03Mat02;                                       // 0x0078(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            Mesh04;                                            // 0x0080(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mesh04Width;                                       // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19BB[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Mesh04Mat01;                                       // 0x0090(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Mesh04Mat02;                                       // 0x0098(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            EndMesh;                                           // 0x00A0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndMeshWidth;                                      // 0x00A8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19BC[0x4];                                     // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     EndMeshMat01;                                      // 0x00B0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     EndMeshMat02;                                      // 0x00B8(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USplineMeshComponent*>           ReturnValue;                                       // 0x00C0(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RopeStatic_Mesh_RC) == 0x000008, "Wrong alignment on RopeStatic_Mesh_RC");
static_assert(sizeof(RopeStatic_Mesh_RC) == 0x0000D0, "Wrong size on RopeStatic_Mesh_RC");
static_assert(offsetof(RopeStatic_Mesh_RC, StartMesh) == 0x000000, "Member 'RopeStatic_Mesh_RC::StartMesh' has a wrong offset!");
static_assert(offsetof(RopeStatic_Mesh_RC, StartMeshWidth) == 0x000008, "Member 'RopeStatic_Mesh_RC::StartMeshWidth' has a wrong offset!");
static_assert(offsetof(RopeStatic_Mesh_RC, StartMeshMat01) == 0x000010, "Member 'RopeStatic_Mesh_RC::StartMeshMat01' has a wrong offset!");
static_assert(offsetof(RopeStatic_Mesh_RC, StartMeshMat02) == 0x000018, "Member 'RopeStatic_Mesh_RC::StartMeshMat02' has a wrong offset!");
static_assert(offsetof(RopeStatic_Mesh_RC, Mesh01) == 0x000020, "Member 'RopeStatic_Mesh_RC::Mesh01' has a wrong offset!");
static_assert(offsetof(RopeStatic_Mesh_RC, Mesh01Width) == 0x000028, "Member 'RopeStatic_Mesh_RC::Mesh01Width' has a wrong offset!");
static_assert(offsetof(RopeStatic_Mesh_RC, Mesh01Mat01) == 0x000030, "Member 'RopeStatic_Mesh_RC::Mesh01Mat01' has a wrong offset!");
static_assert(offsetof(RopeStatic_Mesh_RC, Mesh01Mat02) == 0x000038, "Member 'RopeStatic_Mesh_RC::Mesh01Mat02' has a wrong offset!");
static_assert(offsetof(RopeStatic_Mesh_RC, Mesh02) == 0x000040, "Member 'RopeStatic_Mesh_RC::Mesh02' has a wrong offset!");
static_assert(offsetof(RopeStatic_Mesh_RC, Mesh02Width) == 0x000048, "Member 'RopeStatic_Mesh_RC::Mesh02Width' has a wrong offset!");
static_assert(offsetof(RopeStatic_Mesh_RC, Mesh02Mat01) == 0x000050, "Member 'RopeStatic_Mesh_RC::Mesh02Mat01' has a wrong offset!");
static_assert(offsetof(RopeStatic_Mesh_RC, Mesh02Mat02) == 0x000058, "Member 'RopeStatic_Mesh_RC::Mesh02Mat02' has a wrong offset!");
static_assert(offsetof(RopeStatic_Mesh_RC, Mesh03) == 0x000060, "Member 'RopeStatic_Mesh_RC::Mesh03' has a wrong offset!");
static_assert(offsetof(RopeStatic_Mesh_RC, Mesh03Width) == 0x000068, "Member 'RopeStatic_Mesh_RC::Mesh03Width' has a wrong offset!");
static_assert(offsetof(RopeStatic_Mesh_RC, Mesh03Mat01) == 0x000070, "Member 'RopeStatic_Mesh_RC::Mesh03Mat01' has a wrong offset!");
static_assert(offsetof(RopeStatic_Mesh_RC, Mesh03Mat02) == 0x000078, "Member 'RopeStatic_Mesh_RC::Mesh03Mat02' has a wrong offset!");
static_assert(offsetof(RopeStatic_Mesh_RC, Mesh04) == 0x000080, "Member 'RopeStatic_Mesh_RC::Mesh04' has a wrong offset!");
static_assert(offsetof(RopeStatic_Mesh_RC, Mesh04Width) == 0x000088, "Member 'RopeStatic_Mesh_RC::Mesh04Width' has a wrong offset!");
static_assert(offsetof(RopeStatic_Mesh_RC, Mesh04Mat01) == 0x000090, "Member 'RopeStatic_Mesh_RC::Mesh04Mat01' has a wrong offset!");
static_assert(offsetof(RopeStatic_Mesh_RC, Mesh04Mat02) == 0x000098, "Member 'RopeStatic_Mesh_RC::Mesh04Mat02' has a wrong offset!");
static_assert(offsetof(RopeStatic_Mesh_RC, EndMesh) == 0x0000A0, "Member 'RopeStatic_Mesh_RC::EndMesh' has a wrong offset!");
static_assert(offsetof(RopeStatic_Mesh_RC, EndMeshWidth) == 0x0000A8, "Member 'RopeStatic_Mesh_RC::EndMeshWidth' has a wrong offset!");
static_assert(offsetof(RopeStatic_Mesh_RC, EndMeshMat01) == 0x0000B0, "Member 'RopeStatic_Mesh_RC::EndMeshMat01' has a wrong offset!");
static_assert(offsetof(RopeStatic_Mesh_RC, EndMeshMat02) == 0x0000B8, "Member 'RopeStatic_Mesh_RC::EndMeshMat02' has a wrong offset!");
static_assert(offsetof(RopeStatic_Mesh_RC, ReturnValue) == 0x0000C0, "Member 'RopeStatic_Mesh_RC::ReturnValue' has a wrong offset!");

// Function RopeCutting.RopeStatic.SetUserSplineEndLocation_RC
// 0x0028 (0x0028 - 0x0000)
struct RopeStatic_SetUserSplineEndLocation_RC final
{
public:
	class USplineComponent*                       UserSpline;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseRelativeLocation;                               // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19BD[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RopeStatic_SetUserSplineEndLocation_RC) == 0x000008, "Wrong alignment on RopeStatic_SetUserSplineEndLocation_RC");
static_assert(sizeof(RopeStatic_SetUserSplineEndLocation_RC) == 0x000028, "Wrong size on RopeStatic_SetUserSplineEndLocation_RC");
static_assert(offsetof(RopeStatic_SetUserSplineEndLocation_RC, UserSpline) == 0x000000, "Member 'RopeStatic_SetUserSplineEndLocation_RC::UserSpline' has a wrong offset!");
static_assert(offsetof(RopeStatic_SetUserSplineEndLocation_RC, Location) == 0x000008, "Member 'RopeStatic_SetUserSplineEndLocation_RC::Location' has a wrong offset!");
static_assert(offsetof(RopeStatic_SetUserSplineEndLocation_RC, UseRelativeLocation) == 0x000020, "Member 'RopeStatic_SetUserSplineEndLocation_RC::UseRelativeLocation' has a wrong offset!");

// Function RopeCutting.RopeStatic.SetUserSplineStartLocation_RC
// 0x0028 (0x0028 - 0x0000)
struct RopeStatic_SetUserSplineStartLocation_RC final
{
public:
	class USplineComponent*                       UserSpline;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseRelativeLocation;                               // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19BE[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RopeStatic_SetUserSplineStartLocation_RC) == 0x000008, "Wrong alignment on RopeStatic_SetUserSplineStartLocation_RC");
static_assert(sizeof(RopeStatic_SetUserSplineStartLocation_RC) == 0x000028, "Wrong size on RopeStatic_SetUserSplineStartLocation_RC");
static_assert(offsetof(RopeStatic_SetUserSplineStartLocation_RC, UserSpline) == 0x000000, "Member 'RopeStatic_SetUserSplineStartLocation_RC::UserSpline' has a wrong offset!");
static_assert(offsetof(RopeStatic_SetUserSplineStartLocation_RC, Location) == 0x000008, "Member 'RopeStatic_SetUserSplineStartLocation_RC::Location' has a wrong offset!");
static_assert(offsetof(RopeStatic_SetUserSplineStartLocation_RC, UseRelativeLocation) == 0x000020, "Member 'RopeStatic_SetUserSplineStartLocation_RC::UseRelativeLocation' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.AddPointsToBuildingSpline
// 0x0010 (0x0010 - 0x0000)
struct Rope_Cutting_AddPointsToBuildingSpline final
{
public:
	class USplineComponent*                       SplineToGrow;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfLoopsAPTSIn;                               // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnitLengthAPTSIn;                                  // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Rope_Cutting_AddPointsToBuildingSpline) == 0x000008, "Wrong alignment on Rope_Cutting_AddPointsToBuildingSpline");
static_assert(sizeof(Rope_Cutting_AddPointsToBuildingSpline) == 0x000010, "Wrong size on Rope_Cutting_AddPointsToBuildingSpline");
static_assert(offsetof(Rope_Cutting_AddPointsToBuildingSpline, SplineToGrow) == 0x000000, "Member 'Rope_Cutting_AddPointsToBuildingSpline::SplineToGrow' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_AddPointsToBuildingSpline, NumberOfLoopsAPTSIn) == 0x000008, "Member 'Rope_Cutting_AddPointsToBuildingSpline::NumberOfLoopsAPTSIn' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_AddPointsToBuildingSpline, UnitLengthAPTSIn) == 0x00000C, "Member 'Rope_Cutting_AddPointsToBuildingSpline::UnitLengthAPTSIn' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.AddPointsToSpline
// 0x0030 (0x0030 - 0x0000)
struct Rope_Cutting_AddPointsToSpline final
{
public:
	class USplineComponent*                       SplineToGrow;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       UserSplineCRSIn;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfLoopsAPTSIn;                               // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnitLengthAPTSIn;                                  // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RopeOffsetAPTSIn;                                  // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Rope_Cutting_AddPointsToSpline) == 0x000008, "Wrong alignment on Rope_Cutting_AddPointsToSpline");
static_assert(sizeof(Rope_Cutting_AddPointsToSpline) == 0x000030, "Wrong size on Rope_Cutting_AddPointsToSpline");
static_assert(offsetof(Rope_Cutting_AddPointsToSpline, SplineToGrow) == 0x000000, "Member 'Rope_Cutting_AddPointsToSpline::SplineToGrow' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_AddPointsToSpline, UserSplineCRSIn) == 0x000008, "Member 'Rope_Cutting_AddPointsToSpline::UserSplineCRSIn' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_AddPointsToSpline, NumberOfLoopsAPTSIn) == 0x000010, "Member 'Rope_Cutting_AddPointsToSpline::NumberOfLoopsAPTSIn' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_AddPointsToSpline, UnitLengthAPTSIn) == 0x000014, "Member 'Rope_Cutting_AddPointsToSpline::UnitLengthAPTSIn' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_AddPointsToSpline, RopeOffsetAPTSIn) == 0x000018, "Member 'Rope_Cutting_AddPointsToSpline::RopeOffsetAPTSIn' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.AdjustRenderSplineLocation
// 0x0028 (0x0028 - 0x0000)
struct Rope_Cutting_AdjustRenderSplineLocation final
{
public:
	class USplineComponent*                       RenderSpline;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       UserSpline;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    AttachedPrimitive;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfLoops;                                     // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x001C(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19CF[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Rope_Cutting_AdjustRenderSplineLocation) == 0x000008, "Wrong alignment on Rope_Cutting_AdjustRenderSplineLocation");
static_assert(sizeof(Rope_Cutting_AdjustRenderSplineLocation) == 0x000028, "Wrong size on Rope_Cutting_AdjustRenderSplineLocation");
static_assert(offsetof(Rope_Cutting_AdjustRenderSplineLocation, RenderSpline) == 0x000000, "Member 'Rope_Cutting_AdjustRenderSplineLocation::RenderSpline' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_AdjustRenderSplineLocation, UserSpline) == 0x000008, "Member 'Rope_Cutting_AdjustRenderSplineLocation::UserSpline' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_AdjustRenderSplineLocation, AttachedPrimitive) == 0x000010, "Member 'Rope_Cutting_AdjustRenderSplineLocation::AttachedPrimitive' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_AdjustRenderSplineLocation, NumberOfLoops) == 0x000018, "Member 'Rope_Cutting_AdjustRenderSplineLocation::NumberOfLoops' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_AdjustRenderSplineLocation, SocketName) == 0x00001C, "Member 'Rope_Cutting_AdjustRenderSplineLocation::SocketName' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.ConfigureSplineMeshes
// 0x0028 (0x0028 - 0x0000)
struct Rope_Cutting_ConfigureSplineMeshes final
{
public:
	class USplineMeshComponent*                   SplineMeshConfigSMInput;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            MeshTypeConfigSMInput;                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeshWidthConfigSMInput;                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19D0[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     MeshMaterial01ConfigSMInput;                       // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     MeshMaterial02ConfigSMInput;                       // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Rope_Cutting_ConfigureSplineMeshes) == 0x000008, "Wrong alignment on Rope_Cutting_ConfigureSplineMeshes");
static_assert(sizeof(Rope_Cutting_ConfigureSplineMeshes) == 0x000028, "Wrong size on Rope_Cutting_ConfigureSplineMeshes");
static_assert(offsetof(Rope_Cutting_ConfigureSplineMeshes, SplineMeshConfigSMInput) == 0x000000, "Member 'Rope_Cutting_ConfigureSplineMeshes::SplineMeshConfigSMInput' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_ConfigureSplineMeshes, MeshTypeConfigSMInput) == 0x000008, "Member 'Rope_Cutting_ConfigureSplineMeshes::MeshTypeConfigSMInput' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_ConfigureSplineMeshes, MeshWidthConfigSMInput) == 0x000010, "Member 'Rope_Cutting_ConfigureSplineMeshes::MeshWidthConfigSMInput' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_ConfigureSplineMeshes, MeshMaterial01ConfigSMInput) == 0x000018, "Member 'Rope_Cutting_ConfigureSplineMeshes::MeshMaterial01ConfigSMInput' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_ConfigureSplineMeshes, MeshMaterial02ConfigSMInput) == 0x000020, "Member 'Rope_Cutting_ConfigureSplineMeshes::MeshMaterial02ConfigSMInput' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.CreateSphereCollision
// 0x0018 (0x0018 - 0x0000)
struct Rope_Cutting_CreateSphereCollision final
{
public:
	class USphereComponent*                       SphereCollisionCSCIn;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 WorldRefCSCIn;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       SplineRefCSCIn;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Rope_Cutting_CreateSphereCollision) == 0x000008, "Wrong alignment on Rope_Cutting_CreateSphereCollision");
static_assert(sizeof(Rope_Cutting_CreateSphereCollision) == 0x000018, "Wrong size on Rope_Cutting_CreateSphereCollision");
static_assert(offsetof(Rope_Cutting_CreateSphereCollision, SphereCollisionCSCIn) == 0x000000, "Member 'Rope_Cutting_CreateSphereCollision::SphereCollisionCSCIn' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_CreateSphereCollision, WorldRefCSCIn) == 0x000008, "Member 'Rope_Cutting_CreateSphereCollision::WorldRefCSCIn' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_CreateSphereCollision, SplineRefCSCIn) == 0x000010, "Member 'Rope_Cutting_CreateSphereCollision::SplineRefCSCIn' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.CreateSpline
// 0x0048 (0x0048 - 0x0000)
struct Rope_Cutting_CreateSpline final
{
public:
	class USplineComponent*                       InSplineCS;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocationCS;                                   // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               WorldRotationCS;                                   // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UWorld*                                 WorldRefCSIn;                                      // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        SelfRefCSIn;                                       // 0x0040(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Rope_Cutting_CreateSpline) == 0x000008, "Wrong alignment on Rope_Cutting_CreateSpline");
static_assert(sizeof(Rope_Cutting_CreateSpline) == 0x000048, "Wrong size on Rope_Cutting_CreateSpline");
static_assert(offsetof(Rope_Cutting_CreateSpline, InSplineCS) == 0x000000, "Member 'Rope_Cutting_CreateSpline::InSplineCS' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_CreateSpline, WorldLocationCS) == 0x000008, "Member 'Rope_Cutting_CreateSpline::WorldLocationCS' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_CreateSpline, WorldRotationCS) == 0x000020, "Member 'Rope_Cutting_CreateSpline::WorldRotationCS' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_CreateSpline, WorldRefCSIn) == 0x000038, "Member 'Rope_Cutting_CreateSpline::WorldRefCSIn' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_CreateSpline, SelfRefCSIn) == 0x000040, "Member 'Rope_Cutting_CreateSpline::SelfRefCSIn' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.CreateSplineMeshes
// 0x0018 (0x0018 - 0x0000)
struct Rope_Cutting_CreateSplineMeshes final
{
public:
	class USplineMeshComponent*                   SplineMeshCSMInput;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 WorldRefCSMIn;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       SplineOwnerRefCSMIn;                               // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Rope_Cutting_CreateSplineMeshes) == 0x000008, "Wrong alignment on Rope_Cutting_CreateSplineMeshes");
static_assert(sizeof(Rope_Cutting_CreateSplineMeshes) == 0x000018, "Wrong size on Rope_Cutting_CreateSplineMeshes");
static_assert(offsetof(Rope_Cutting_CreateSplineMeshes, SplineMeshCSMInput) == 0x000000, "Member 'Rope_Cutting_CreateSplineMeshes::SplineMeshCSMInput' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_CreateSplineMeshes, WorldRefCSMIn) == 0x000008, "Member 'Rope_Cutting_CreateSplineMeshes::WorldRefCSMIn' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_CreateSplineMeshes, SplineOwnerRefCSMIn) == 0x000010, "Member 'Rope_Cutting_CreateSplineMeshes::SplineOwnerRefCSMIn' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.CreateUniqueName
// 0x0030 (0x0030 - 0x0000)
struct Rope_Cutting_CreateUniqueName final
{
public:
	class FString                                 ComponentType;                                     // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComponentNumber;                                   // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19D1[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ThisComponentStrNameCUNIn;                         // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0028(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Rope_Cutting_CreateUniqueName) == 0x000008, "Wrong alignment on Rope_Cutting_CreateUniqueName");
static_assert(sizeof(Rope_Cutting_CreateUniqueName) == 0x000030, "Wrong size on Rope_Cutting_CreateUniqueName");
static_assert(offsetof(Rope_Cutting_CreateUniqueName, ComponentType) == 0x000000, "Member 'Rope_Cutting_CreateUniqueName::ComponentType' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_CreateUniqueName, ComponentNumber) == 0x000010, "Member 'Rope_Cutting_CreateUniqueName::ComponentNumber' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_CreateUniqueName, ThisComponentStrNameCUNIn) == 0x000018, "Member 'Rope_Cutting_CreateUniqueName::ThisComponentStrNameCUNIn' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_CreateUniqueName, ReturnValue) == 0x000028, "Member 'Rope_Cutting_CreateUniqueName::ReturnValue' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.MakePhysConstr
// 0x0030 (0x0030 - 0x0000)
struct Rope_Cutting_MakePhysConstr final
{
public:
	class UPhysicsConstraintComponent*            PhyConstrMPCIn;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 WorldRefMPCIn;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocationMPCIn;                                // 0x0010(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USphereComponent*                       CollRefAttachMPCIn;                                // 0x0028(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Rope_Cutting_MakePhysConstr) == 0x000008, "Wrong alignment on Rope_Cutting_MakePhysConstr");
static_assert(sizeof(Rope_Cutting_MakePhysConstr) == 0x000030, "Wrong size on Rope_Cutting_MakePhysConstr");
static_assert(offsetof(Rope_Cutting_MakePhysConstr, PhyConstrMPCIn) == 0x000000, "Member 'Rope_Cutting_MakePhysConstr::PhyConstrMPCIn' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_MakePhysConstr, WorldRefMPCIn) == 0x000008, "Member 'Rope_Cutting_MakePhysConstr::WorldRefMPCIn' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_MakePhysConstr, WorldLocationMPCIn) == 0x000010, "Member 'Rope_Cutting_MakePhysConstr::WorldLocationMPCIn' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_MakePhysConstr, CollRefAttachMPCIn) == 0x000028, "Member 'Rope_Cutting_MakePhysConstr::CollRefAttachMPCIn' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.PhyConstrConfig
// 0x0020 (0x0020 - 0x0000)
struct Rope_Cutting_PhyConstrConfig final
{
public:
	class UPhysicsConstraintComponent*            PhyConstrIn;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SetAngularSwing1LimitPCCIn;                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SetAngularSwing2LimitPCCIn;                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SetAngularTwistLimitPCCIn;                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionStrengthPCCIn;                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityStrengthPCCIn;                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19D2[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Rope_Cutting_PhyConstrConfig) == 0x000008, "Wrong alignment on Rope_Cutting_PhyConstrConfig");
static_assert(sizeof(Rope_Cutting_PhyConstrConfig) == 0x000020, "Wrong size on Rope_Cutting_PhyConstrConfig");
static_assert(offsetof(Rope_Cutting_PhyConstrConfig, PhyConstrIn) == 0x000000, "Member 'Rope_Cutting_PhyConstrConfig::PhyConstrIn' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_PhyConstrConfig, SetAngularSwing1LimitPCCIn) == 0x000008, "Member 'Rope_Cutting_PhyConstrConfig::SetAngularSwing1LimitPCCIn' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_PhyConstrConfig, SetAngularSwing2LimitPCCIn) == 0x00000C, "Member 'Rope_Cutting_PhyConstrConfig::SetAngularSwing2LimitPCCIn' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_PhyConstrConfig, SetAngularTwistLimitPCCIn) == 0x000010, "Member 'Rope_Cutting_PhyConstrConfig::SetAngularTwistLimitPCCIn' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_PhyConstrConfig, PositionStrengthPCCIn) == 0x000014, "Member 'Rope_Cutting_PhyConstrConfig::PositionStrengthPCCIn' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_PhyConstrConfig, VelocityStrengthPCCIn) == 0x000018, "Member 'Rope_Cutting_PhyConstrConfig::VelocityStrengthPCCIn' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.SetSplMLocTang
// 0x0018 (0x0018 - 0x0000)
struct Rope_Cutting_SetSplMLocTang final
{
public:
	class USplineComponent*                       ITargetSpline;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineMeshComponent*                   InTargetSplM;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IEditPoint;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnitLengthSSMLTIn;                                 // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Rope_Cutting_SetSplMLocTang) == 0x000008, "Wrong alignment on Rope_Cutting_SetSplMLocTang");
static_assert(sizeof(Rope_Cutting_SetSplMLocTang) == 0x000018, "Wrong size on Rope_Cutting_SetSplMLocTang");
static_assert(offsetof(Rope_Cutting_SetSplMLocTang, ITargetSpline) == 0x000000, "Member 'Rope_Cutting_SetSplMLocTang::ITargetSpline' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_SetSplMLocTang, InTargetSplM) == 0x000008, "Member 'Rope_Cutting_SetSplMLocTang::InTargetSplM' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_SetSplMLocTang, IEditPoint) == 0x000010, "Member 'Rope_Cutting_SetSplMLocTang::IEditPoint' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_SetSplMLocTang, UnitLengthSSMLTIn) == 0x000014, "Member 'Rope_Cutting_SetSplMLocTang::UnitLengthSSMLTIn' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.SphereCollisionConfig
// 0x0048 (0x0048 - 0x0000)
struct Rope_Cutting_SphereCollisionConfig final
{
public:
	bool                                          ShouldBlock;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SimPhysics;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19D3[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USphereComponent*                       SphereCollisionIn;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularDampeningSCCIn;                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearDampeningSCCIn;                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionSolverSCCIn;                               // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocitySolverSCCIn;                               // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StabilizationThresholdMultiplierSCCIn;             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SleepThresholdMultiplierSCCIn;                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InertiaTensorScaleSCCIn;                           // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollUnitScaleSCCIn;                                // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GeneralName;                                       // 0x0030(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpecificInstanceNameCSCIn;                         // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mass;                                              // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MassScale;                                         // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Rope_Cutting_SphereCollisionConfig) == 0x000008, "Wrong alignment on Rope_Cutting_SphereCollisionConfig");
static_assert(sizeof(Rope_Cutting_SphereCollisionConfig) == 0x000048, "Wrong size on Rope_Cutting_SphereCollisionConfig");
static_assert(offsetof(Rope_Cutting_SphereCollisionConfig, ShouldBlock) == 0x000000, "Member 'Rope_Cutting_SphereCollisionConfig::ShouldBlock' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_SphereCollisionConfig, SimPhysics) == 0x000001, "Member 'Rope_Cutting_SphereCollisionConfig::SimPhysics' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_SphereCollisionConfig, SphereCollisionIn) == 0x000008, "Member 'Rope_Cutting_SphereCollisionConfig::SphereCollisionIn' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_SphereCollisionConfig, AngularDampeningSCCIn) == 0x000010, "Member 'Rope_Cutting_SphereCollisionConfig::AngularDampeningSCCIn' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_SphereCollisionConfig, LinearDampeningSCCIn) == 0x000014, "Member 'Rope_Cutting_SphereCollisionConfig::LinearDampeningSCCIn' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_SphereCollisionConfig, PositionSolverSCCIn) == 0x000018, "Member 'Rope_Cutting_SphereCollisionConfig::PositionSolverSCCIn' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_SphereCollisionConfig, VelocitySolverSCCIn) == 0x00001C, "Member 'Rope_Cutting_SphereCollisionConfig::VelocitySolverSCCIn' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_SphereCollisionConfig, StabilizationThresholdMultiplierSCCIn) == 0x000020, "Member 'Rope_Cutting_SphereCollisionConfig::StabilizationThresholdMultiplierSCCIn' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_SphereCollisionConfig, SleepThresholdMultiplierSCCIn) == 0x000024, "Member 'Rope_Cutting_SphereCollisionConfig::SleepThresholdMultiplierSCCIn' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_SphereCollisionConfig, InertiaTensorScaleSCCIn) == 0x000028, "Member 'Rope_Cutting_SphereCollisionConfig::InertiaTensorScaleSCCIn' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_SphereCollisionConfig, CollUnitScaleSCCIn) == 0x00002C, "Member 'Rope_Cutting_SphereCollisionConfig::CollUnitScaleSCCIn' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_SphereCollisionConfig, GeneralName) == 0x000030, "Member 'Rope_Cutting_SphereCollisionConfig::GeneralName' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_SphereCollisionConfig, SpecificInstanceNameCSCIn) == 0x000038, "Member 'Rope_Cutting_SphereCollisionConfig::SpecificInstanceNameCSCIn' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_SphereCollisionConfig, Mass) == 0x000040, "Member 'Rope_Cutting_SphereCollisionConfig::Mass' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_SphereCollisionConfig, MassScale) == 0x000044, "Member 'Rope_Cutting_SphereCollisionConfig::MassScale' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.SplineUpDir
// 0x0010 (0x0010 - 0x0000)
struct Rope_Cutting_SplineUpDir final
{
public:
	class USplineComponent*                       ITargetSpline;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ISplineUpDirClamp;                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19D4[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Rope_Cutting_SplineUpDir) == 0x000008, "Wrong alignment on Rope_Cutting_SplineUpDir");
static_assert(sizeof(Rope_Cutting_SplineUpDir) == 0x000010, "Wrong size on Rope_Cutting_SplineUpDir");
static_assert(offsetof(Rope_Cutting_SplineUpDir, ITargetSpline) == 0x000000, "Member 'Rope_Cutting_SplineUpDir::ITargetSpline' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_SplineUpDir, ISplineUpDirClamp) == 0x000008, "Member 'Rope_Cutting_SplineUpDir::ISplineUpDirClamp' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.TransferSphereCollision
// 0x0018 (0x0018 - 0x0000)
struct Rope_Cutting_TransferSphereCollision final
{
public:
	class USphereComponent*                       SphereCollisionArrayTSCIn;                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       TargetSplineTSCIn;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EditPoint;                                         // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19D5[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Rope_Cutting_TransferSphereCollision) == 0x000008, "Wrong alignment on Rope_Cutting_TransferSphereCollision");
static_assert(sizeof(Rope_Cutting_TransferSphereCollision) == 0x000018, "Wrong size on Rope_Cutting_TransferSphereCollision");
static_assert(offsetof(Rope_Cutting_TransferSphereCollision, SphereCollisionArrayTSCIn) == 0x000000, "Member 'Rope_Cutting_TransferSphereCollision::SphereCollisionArrayTSCIn' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_TransferSphereCollision, TargetSplineTSCIn) == 0x000008, "Member 'Rope_Cutting_TransferSphereCollision::TargetSplineTSCIn' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_TransferSphereCollision, EditPoint) == 0x000010, "Member 'Rope_Cutting_TransferSphereCollision::EditPoint' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.TransferSplineMeshes
// 0x0018 (0x0018 - 0x0000)
struct Rope_Cutting_TransferSplineMeshes final
{
public:
	class USplineMeshComponent*                   SplMeshArrayTSMIn;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       TargetSplineTSMIn;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnitLengthTSMIn;                                   // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IEditPoint;                                        // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Rope_Cutting_TransferSplineMeshes) == 0x000008, "Wrong alignment on Rope_Cutting_TransferSplineMeshes");
static_assert(sizeof(Rope_Cutting_TransferSplineMeshes) == 0x000018, "Wrong size on Rope_Cutting_TransferSplineMeshes");
static_assert(offsetof(Rope_Cutting_TransferSplineMeshes, SplMeshArrayTSMIn) == 0x000000, "Member 'Rope_Cutting_TransferSplineMeshes::SplMeshArrayTSMIn' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_TransferSplineMeshes, TargetSplineTSMIn) == 0x000008, "Member 'Rope_Cutting_TransferSplineMeshes::TargetSplineTSMIn' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_TransferSplineMeshes, UnitLengthTSMIn) == 0x000010, "Member 'Rope_Cutting_TransferSplineMeshes::UnitLengthTSMIn' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_TransferSplineMeshes, IEditPoint) == 0x000014, "Member 'Rope_Cutting_TransferSplineMeshes::IEditPoint' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.Attach_End_RC
// 0x0040 (0x0040 - 0x0000)
struct Rope_Cutting_Attach_End_RC final
{
public:
	class UPrimitiveComponent*                    EndPrimitive;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndSocket;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndBone;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FurtherConstrain;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsImmobile;                                        // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19D6[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AngularSwing1Limit;                                // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularSwing2Limit;                                // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularTwistLimit;                                 // 0x0024(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionStrength;                                  // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityStrength;                                  // 0x002C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPhysicsConstraintComponent*>    ReturnValue;                                       // 0x0030(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Rope_Cutting_Attach_End_RC) == 0x000008, "Wrong alignment on Rope_Cutting_Attach_End_RC");
static_assert(sizeof(Rope_Cutting_Attach_End_RC) == 0x000040, "Wrong size on Rope_Cutting_Attach_End_RC");
static_assert(offsetof(Rope_Cutting_Attach_End_RC, EndPrimitive) == 0x000000, "Member 'Rope_Cutting_Attach_End_RC::EndPrimitive' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Attach_End_RC, EndSocket) == 0x000008, "Member 'Rope_Cutting_Attach_End_RC::EndSocket' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Attach_End_RC, EndBone) == 0x000010, "Member 'Rope_Cutting_Attach_End_RC::EndBone' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Attach_End_RC, FurtherConstrain) == 0x000018, "Member 'Rope_Cutting_Attach_End_RC::FurtherConstrain' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Attach_End_RC, IsImmobile) == 0x000019, "Member 'Rope_Cutting_Attach_End_RC::IsImmobile' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Attach_End_RC, AngularSwing1Limit) == 0x00001C, "Member 'Rope_Cutting_Attach_End_RC::AngularSwing1Limit' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Attach_End_RC, AngularSwing2Limit) == 0x000020, "Member 'Rope_Cutting_Attach_End_RC::AngularSwing2Limit' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Attach_End_RC, AngularTwistLimit) == 0x000024, "Member 'Rope_Cutting_Attach_End_RC::AngularTwistLimit' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Attach_End_RC, PositionStrength) == 0x000028, "Member 'Rope_Cutting_Attach_End_RC::PositionStrength' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Attach_End_RC, VelocityStrength) == 0x00002C, "Member 'Rope_Cutting_Attach_End_RC::VelocityStrength' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Attach_End_RC, ReturnValue) == 0x000030, "Member 'Rope_Cutting_Attach_End_RC::ReturnValue' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.Attach_Start_RC
// 0x0040 (0x0040 - 0x0000)
struct Rope_Cutting_Attach_Start_RC final
{
public:
	class UPrimitiveComponent*                    StartPrimitive;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartSocket;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartBone;                                         // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FurtherConstrain;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsImmobile;                                        // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19D7[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AngularSwing1Limit;                                // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularSwing2Limit;                                // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularTwistLimit;                                 // 0x0024(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionStrength;                                  // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityStrength;                                  // 0x002C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPhysicsConstraintComponent*>    ReturnValue;                                       // 0x0030(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Rope_Cutting_Attach_Start_RC) == 0x000008, "Wrong alignment on Rope_Cutting_Attach_Start_RC");
static_assert(sizeof(Rope_Cutting_Attach_Start_RC) == 0x000040, "Wrong size on Rope_Cutting_Attach_Start_RC");
static_assert(offsetof(Rope_Cutting_Attach_Start_RC, StartPrimitive) == 0x000000, "Member 'Rope_Cutting_Attach_Start_RC::StartPrimitive' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Attach_Start_RC, StartSocket) == 0x000008, "Member 'Rope_Cutting_Attach_Start_RC::StartSocket' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Attach_Start_RC, StartBone) == 0x000010, "Member 'Rope_Cutting_Attach_Start_RC::StartBone' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Attach_Start_RC, FurtherConstrain) == 0x000018, "Member 'Rope_Cutting_Attach_Start_RC::FurtherConstrain' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Attach_Start_RC, IsImmobile) == 0x000019, "Member 'Rope_Cutting_Attach_Start_RC::IsImmobile' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Attach_Start_RC, AngularSwing1Limit) == 0x00001C, "Member 'Rope_Cutting_Attach_Start_RC::AngularSwing1Limit' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Attach_Start_RC, AngularSwing2Limit) == 0x000020, "Member 'Rope_Cutting_Attach_Start_RC::AngularSwing2Limit' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Attach_Start_RC, AngularTwistLimit) == 0x000024, "Member 'Rope_Cutting_Attach_Start_RC::AngularTwistLimit' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Attach_Start_RC, PositionStrength) == 0x000028, "Member 'Rope_Cutting_Attach_Start_RC::PositionStrength' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Attach_Start_RC, VelocityStrength) == 0x00002C, "Member 'Rope_Cutting_Attach_Start_RC::VelocityStrength' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Attach_Start_RC, ReturnValue) == 0x000030, "Member 'Rope_Cutting_Attach_Start_RC::ReturnValue' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.Build_RC
// 0x0058 (0x0058 - 0x0000)
struct Rope_Cutting_Build_RC final
{
public:
	class USplineComponent*                       UserSpline;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            Mesh;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            StartEndMesh;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnitLength;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19D8[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RopeOffset;                                        // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableRopeOffset;                                 // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19D9[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RuntimeUpdateRate;                                 // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BlockCutting;                                      // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19DA[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USphereComponent*>               ReturnValue;                                       // 0x0048(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Rope_Cutting_Build_RC) == 0x000008, "Wrong alignment on Rope_Cutting_Build_RC");
static_assert(sizeof(Rope_Cutting_Build_RC) == 0x000058, "Wrong size on Rope_Cutting_Build_RC");
static_assert(offsetof(Rope_Cutting_Build_RC, UserSpline) == 0x000000, "Member 'Rope_Cutting_Build_RC::UserSpline' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Build_RC, Mesh) == 0x000008, "Member 'Rope_Cutting_Build_RC::Mesh' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Build_RC, StartEndMesh) == 0x000010, "Member 'Rope_Cutting_Build_RC::StartEndMesh' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Build_RC, UnitLength) == 0x000018, "Member 'Rope_Cutting_Build_RC::UnitLength' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Build_RC, RopeOffset) == 0x000020, "Member 'Rope_Cutting_Build_RC::RopeOffset' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Build_RC, DisableRopeOffset) == 0x000038, "Member 'Rope_Cutting_Build_RC::DisableRopeOffset' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Build_RC, RuntimeUpdateRate) == 0x00003C, "Member 'Rope_Cutting_Build_RC::RuntimeUpdateRate' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Build_RC, BlockCutting) == 0x000040, "Member 'Rope_Cutting_Build_RC::BlockCutting' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Build_RC, ReturnValue) == 0x000048, "Member 'Rope_Cutting_Build_RC::ReturnValue' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.Collision_RC
// 0x0038 (0x0038 - 0x0000)
struct Rope_Cutting_Collision_RC final
{
public:
	float                                         CollisionScale;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularDampening;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearDampening;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocitySolverIterationCount;                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionSolverIterationCount;                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StabilizationThresholdMultiplier;                  // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SleepThresholdMultiplier;                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InertiaTensorScale;                                // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mass;                                              // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MassScale;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USphereComponent*>               ReturnValue;                                       // 0x0028(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Rope_Cutting_Collision_RC) == 0x000008, "Wrong alignment on Rope_Cutting_Collision_RC");
static_assert(sizeof(Rope_Cutting_Collision_RC) == 0x000038, "Wrong size on Rope_Cutting_Collision_RC");
static_assert(offsetof(Rope_Cutting_Collision_RC, CollisionScale) == 0x000000, "Member 'Rope_Cutting_Collision_RC::CollisionScale' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Collision_RC, AngularDampening) == 0x000004, "Member 'Rope_Cutting_Collision_RC::AngularDampening' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Collision_RC, LinearDampening) == 0x000008, "Member 'Rope_Cutting_Collision_RC::LinearDampening' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Collision_RC, VelocitySolverIterationCount) == 0x00000C, "Member 'Rope_Cutting_Collision_RC::VelocitySolverIterationCount' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Collision_RC, PositionSolverIterationCount) == 0x000010, "Member 'Rope_Cutting_Collision_RC::PositionSolverIterationCount' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Collision_RC, StabilizationThresholdMultiplier) == 0x000014, "Member 'Rope_Cutting_Collision_RC::StabilizationThresholdMultiplier' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Collision_RC, SleepThresholdMultiplier) == 0x000018, "Member 'Rope_Cutting_Collision_RC::SleepThresholdMultiplier' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Collision_RC, InertiaTensorScale) == 0x00001C, "Member 'Rope_Cutting_Collision_RC::InertiaTensorScale' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Collision_RC, Mass) == 0x000020, "Member 'Rope_Cutting_Collision_RC::Mass' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Collision_RC, MassScale) == 0x000024, "Member 'Rope_Cutting_Collision_RC::MassScale' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Collision_RC, ReturnValue) == 0x000028, "Member 'Rope_Cutting_Collision_RC::ReturnValue' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.Constraint_RC
// 0x0028 (0x0028 - 0x0000)
struct Rope_Cutting_Constraint_RC final
{
public:
	int32                                         AngularDrivePositionStrength;                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AngularDriveVelocityStrength;                      // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SetAngularSwing1Limit;                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SetAngularSwing2Limit;                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SetAngularTwistLimit;                              // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19DB[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPhysicsConstraintComponent*>    ReturnValue;                                       // 0x0018(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Rope_Cutting_Constraint_RC) == 0x000008, "Wrong alignment on Rope_Cutting_Constraint_RC");
static_assert(sizeof(Rope_Cutting_Constraint_RC) == 0x000028, "Wrong size on Rope_Cutting_Constraint_RC");
static_assert(offsetof(Rope_Cutting_Constraint_RC, AngularDrivePositionStrength) == 0x000000, "Member 'Rope_Cutting_Constraint_RC::AngularDrivePositionStrength' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Constraint_RC, AngularDriveVelocityStrength) == 0x000004, "Member 'Rope_Cutting_Constraint_RC::AngularDriveVelocityStrength' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Constraint_RC, SetAngularSwing1Limit) == 0x000008, "Member 'Rope_Cutting_Constraint_RC::SetAngularSwing1Limit' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Constraint_RC, SetAngularSwing2Limit) == 0x00000C, "Member 'Rope_Cutting_Constraint_RC::SetAngularSwing2Limit' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Constraint_RC, SetAngularTwistLimit) == 0x000010, "Member 'Rope_Cutting_Constraint_RC::SetAngularTwistLimit' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Constraint_RC, ReturnValue) == 0x000018, "Member 'Rope_Cutting_Constraint_RC::ReturnValue' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.Effect_RC
// 0x0010 (0x0010 - 0x0000)
struct Rope_Cutting_Effect_RC final
{
public:
	class UParticleSystem*                        Emitter;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              Sound;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Rope_Cutting_Effect_RC) == 0x000008, "Wrong alignment on Rope_Cutting_Effect_RC");
static_assert(sizeof(Rope_Cutting_Effect_RC) == 0x000010, "Wrong size on Rope_Cutting_Effect_RC");
static_assert(offsetof(Rope_Cutting_Effect_RC, Emitter) == 0x000000, "Member 'Rope_Cutting_Effect_RC::Emitter' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Effect_RC, Sound) == 0x000008, "Member 'Rope_Cutting_Effect_RC::Sound' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.Get_Attached_End_Constraints_RC
// 0x0010 (0x0010 - 0x0000)
struct Rope_Cutting_Get_Attached_End_Constraints_RC final
{
public:
	TArray<class UPhysicsConstraintComponent*>    ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Rope_Cutting_Get_Attached_End_Constraints_RC) == 0x000008, "Wrong alignment on Rope_Cutting_Get_Attached_End_Constraints_RC");
static_assert(sizeof(Rope_Cutting_Get_Attached_End_Constraints_RC) == 0x000010, "Wrong size on Rope_Cutting_Get_Attached_End_Constraints_RC");
static_assert(offsetof(Rope_Cutting_Get_Attached_End_Constraints_RC, ReturnValue) == 0x000000, "Member 'Rope_Cutting_Get_Attached_End_Constraints_RC::ReturnValue' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.Get_Attached_Start_Constraints_RC
// 0x0010 (0x0010 - 0x0000)
struct Rope_Cutting_Get_Attached_Start_Constraints_RC final
{
public:
	TArray<class UPhysicsConstraintComponent*>    ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Rope_Cutting_Get_Attached_Start_Constraints_RC) == 0x000008, "Wrong alignment on Rope_Cutting_Get_Attached_Start_Constraints_RC");
static_assert(sizeof(Rope_Cutting_Get_Attached_Start_Constraints_RC) == 0x000010, "Wrong size on Rope_Cutting_Get_Attached_Start_Constraints_RC");
static_assert(offsetof(Rope_Cutting_Get_Attached_Start_Constraints_RC, ReturnValue) == 0x000000, "Member 'Rope_Cutting_Get_Attached_Start_Constraints_RC::ReturnValue' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.Get_Collision_Sphere_Position
// 0x0010 (0x0010 - 0x0000)
struct Rope_Cutting_Get_Collision_Sphere_Position final
{
public:
	class UPrimitiveComponent*                    CollisionObjectForLookUp;                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19DC[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Rope_Cutting_Get_Collision_Sphere_Position) == 0x000008, "Wrong alignment on Rope_Cutting_Get_Collision_Sphere_Position");
static_assert(sizeof(Rope_Cutting_Get_Collision_Sphere_Position) == 0x000010, "Wrong size on Rope_Cutting_Get_Collision_Sphere_Position");
static_assert(offsetof(Rope_Cutting_Get_Collision_Sphere_Position, CollisionObjectForLookUp) == 0x000000, "Member 'Rope_Cutting_Get_Collision_Sphere_Position::CollisionObjectForLookUp' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Get_Collision_Sphere_Position, ReturnValue) == 0x000008, "Member 'Rope_Cutting_Get_Collision_Sphere_Position::ReturnValue' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.Get_Cut_Collision_Array
// 0x0018 (0x0018 - 0x0000)
struct Rope_Cutting_Get_Cut_Collision_Array final
{
public:
	class UPrimitiveComponent*                    CollisionObjectForLookUp;                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USphereComponent*>               ReturnValue;                                       // 0x0008(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Rope_Cutting_Get_Cut_Collision_Array) == 0x000008, "Wrong alignment on Rope_Cutting_Get_Cut_Collision_Array");
static_assert(sizeof(Rope_Cutting_Get_Cut_Collision_Array) == 0x000018, "Wrong size on Rope_Cutting_Get_Cut_Collision_Array");
static_assert(offsetof(Rope_Cutting_Get_Cut_Collision_Array, CollisionObjectForLookUp) == 0x000000, "Member 'Rope_Cutting_Get_Cut_Collision_Array::CollisionObjectForLookUp' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Get_Cut_Collision_Array, ReturnValue) == 0x000008, "Member 'Rope_Cutting_Get_Cut_Collision_Array::ReturnValue' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.Get_Cut_Constraint_Array
// 0x0018 (0x0018 - 0x0000)
struct Rope_Cutting_Get_Cut_Constraint_Array final
{
public:
	class UPrimitiveComponent*                    CollisionObjectForLookUp;                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPhysicsConstraintComponent*>    ReturnValue;                                       // 0x0008(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Rope_Cutting_Get_Cut_Constraint_Array) == 0x000008, "Wrong alignment on Rope_Cutting_Get_Cut_Constraint_Array");
static_assert(sizeof(Rope_Cutting_Get_Cut_Constraint_Array) == 0x000018, "Wrong size on Rope_Cutting_Get_Cut_Constraint_Array");
static_assert(offsetof(Rope_Cutting_Get_Cut_Constraint_Array, CollisionObjectForLookUp) == 0x000000, "Member 'Rope_Cutting_Get_Cut_Constraint_Array::CollisionObjectForLookUp' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Get_Cut_Constraint_Array, ReturnValue) == 0x000008, "Member 'Rope_Cutting_Get_Cut_Constraint_Array::ReturnValue' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.Get_Cut_Rope_Data_RC
// 0x0080 (0x0080 - 0x0000)
struct Rope_Cutting_Get_Cut_Rope_Data_RC final
{
public:
	class UPrimitiveComponent*                    CollisionObjectForLookUp;                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Position;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19DD[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USphereComponent*>               CollisionArray;                                    // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    PreviousCollisionSphere;                           // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    NextCollisionSphere;                               // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicsConstraintComponent*            Constraint;                                        // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPhysicsConstraintComponent*>    ConstraintArray;                                   // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class USplineMeshComponent*                   SplineMesh;                                        // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USplineMeshComponent*>           SplineMeshArray;                                   // 0x0068(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class USplineComponent*                       Spline;                                            // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Rope_Cutting_Get_Cut_Rope_Data_RC) == 0x000008, "Wrong alignment on Rope_Cutting_Get_Cut_Rope_Data_RC");
static_assert(sizeof(Rope_Cutting_Get_Cut_Rope_Data_RC) == 0x000080, "Wrong size on Rope_Cutting_Get_Cut_Rope_Data_RC");
static_assert(offsetof(Rope_Cutting_Get_Cut_Rope_Data_RC, CollisionObjectForLookUp) == 0x000000, "Member 'Rope_Cutting_Get_Cut_Rope_Data_RC::CollisionObjectForLookUp' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Get_Cut_Rope_Data_RC, Position) == 0x000008, "Member 'Rope_Cutting_Get_Cut_Rope_Data_RC::Position' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Get_Cut_Rope_Data_RC, Location) == 0x000010, "Member 'Rope_Cutting_Get_Cut_Rope_Data_RC::Location' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Get_Cut_Rope_Data_RC, CollisionArray) == 0x000028, "Member 'Rope_Cutting_Get_Cut_Rope_Data_RC::CollisionArray' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Get_Cut_Rope_Data_RC, PreviousCollisionSphere) == 0x000038, "Member 'Rope_Cutting_Get_Cut_Rope_Data_RC::PreviousCollisionSphere' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Get_Cut_Rope_Data_RC, NextCollisionSphere) == 0x000040, "Member 'Rope_Cutting_Get_Cut_Rope_Data_RC::NextCollisionSphere' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Get_Cut_Rope_Data_RC, Constraint) == 0x000048, "Member 'Rope_Cutting_Get_Cut_Rope_Data_RC::Constraint' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Get_Cut_Rope_Data_RC, ConstraintArray) == 0x000050, "Member 'Rope_Cutting_Get_Cut_Rope_Data_RC::ConstraintArray' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Get_Cut_Rope_Data_RC, SplineMesh) == 0x000060, "Member 'Rope_Cutting_Get_Cut_Rope_Data_RC::SplineMesh' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Get_Cut_Rope_Data_RC, SplineMeshArray) == 0x000068, "Member 'Rope_Cutting_Get_Cut_Rope_Data_RC::SplineMeshArray' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Get_Cut_Rope_Data_RC, Spline) == 0x000078, "Member 'Rope_Cutting_Get_Cut_Rope_Data_RC::Spline' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.Get_Cut_Spline
// 0x0010 (0x0010 - 0x0000)
struct Rope_Cutting_Get_Cut_Spline final
{
public:
	class UPrimitiveComponent*                    CollisionObjectForLookUp;                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Rope_Cutting_Get_Cut_Spline) == 0x000008, "Wrong alignment on Rope_Cutting_Get_Cut_Spline");
static_assert(sizeof(Rope_Cutting_Get_Cut_Spline) == 0x000010, "Wrong size on Rope_Cutting_Get_Cut_Spline");
static_assert(offsetof(Rope_Cutting_Get_Cut_Spline, CollisionObjectForLookUp) == 0x000000, "Member 'Rope_Cutting_Get_Cut_Spline::CollisionObjectForLookUp' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Get_Cut_Spline, ReturnValue) == 0x000008, "Member 'Rope_Cutting_Get_Cut_Spline::ReturnValue' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.Get_Cut_Spline_Mesh_Array
// 0x0018 (0x0018 - 0x0000)
struct Rope_Cutting_Get_Cut_Spline_Mesh_Array final
{
public:
	class UPrimitiveComponent*                    CollisionObjectForLookUp;                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USplineMeshComponent*>           ReturnValue;                                       // 0x0008(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Rope_Cutting_Get_Cut_Spline_Mesh_Array) == 0x000008, "Wrong alignment on Rope_Cutting_Get_Cut_Spline_Mesh_Array");
static_assert(sizeof(Rope_Cutting_Get_Cut_Spline_Mesh_Array) == 0x000018, "Wrong size on Rope_Cutting_Get_Cut_Spline_Mesh_Array");
static_assert(offsetof(Rope_Cutting_Get_Cut_Spline_Mesh_Array, CollisionObjectForLookUp) == 0x000000, "Member 'Rope_Cutting_Get_Cut_Spline_Mesh_Array::CollisionObjectForLookUp' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Get_Cut_Spline_Mesh_Array, ReturnValue) == 0x000008, "Member 'Rope_Cutting_Get_Cut_Spline_Mesh_Array::ReturnValue' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.Get_Spline_RC
// 0x0008 (0x0008 - 0x0000)
struct Rope_Cutting_Get_Spline_RC final
{
public:
	class USplineComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Rope_Cutting_Get_Spline_RC) == 0x000008, "Wrong alignment on Rope_Cutting_Get_Spline_RC");
static_assert(sizeof(Rope_Cutting_Get_Spline_RC) == 0x000008, "Wrong size on Rope_Cutting_Get_Spline_RC");
static_assert(offsetof(Rope_Cutting_Get_Spline_RC, ReturnValue) == 0x000000, "Member 'Rope_Cutting_Get_Spline_RC::ReturnValue' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.GetCollisionArray_RC
// 0x0010 (0x0010 - 0x0000)
struct Rope_Cutting_GetCollisionArray_RC final
{
public:
	TArray<class USphereComponent*>               ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Rope_Cutting_GetCollisionArray_RC) == 0x000008, "Wrong alignment on Rope_Cutting_GetCollisionArray_RC");
static_assert(sizeof(Rope_Cutting_GetCollisionArray_RC) == 0x000010, "Wrong size on Rope_Cutting_GetCollisionArray_RC");
static_assert(offsetof(Rope_Cutting_GetCollisionArray_RC, ReturnValue) == 0x000000, "Member 'Rope_Cutting_GetCollisionArray_RC::ReturnValue' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.GetFirstCollisionObject_RC
// 0x0008 (0x0008 - 0x0000)
struct Rope_Cutting_GetFirstCollisionObject_RC final
{
public:
	class USphereComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Rope_Cutting_GetFirstCollisionObject_RC) == 0x000008, "Wrong alignment on Rope_Cutting_GetFirstCollisionObject_RC");
static_assert(sizeof(Rope_Cutting_GetFirstCollisionObject_RC) == 0x000008, "Wrong size on Rope_Cutting_GetFirstCollisionObject_RC");
static_assert(offsetof(Rope_Cutting_GetFirstCollisionObject_RC, ReturnValue) == 0x000000, "Member 'Rope_Cutting_GetFirstCollisionObject_RC::ReturnValue' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.GetGrowTargetLocation_RC
// 0x0040 (0x0040 - 0x0000)
struct Rope_Cutting_GetGrowTargetLocation_RC final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Add;                                               // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          XAxis;                                             // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          YAxis;                                             // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ZAxis;                                             // 0x001B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19DE[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USphereComponent*                       FirstCollisionSphere;                              // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Rope_Cutting_GetGrowTargetLocation_RC) == 0x000008, "Wrong alignment on Rope_Cutting_GetGrowTargetLocation_RC");
static_assert(sizeof(Rope_Cutting_GetGrowTargetLocation_RC) == 0x000040, "Wrong size on Rope_Cutting_GetGrowTargetLocation_RC");
static_assert(offsetof(Rope_Cutting_GetGrowTargetLocation_RC, Location) == 0x000000, "Member 'Rope_Cutting_GetGrowTargetLocation_RC::Location' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_GetGrowTargetLocation_RC, Add) == 0x000018, "Member 'Rope_Cutting_GetGrowTargetLocation_RC::Add' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_GetGrowTargetLocation_RC, XAxis) == 0x000019, "Member 'Rope_Cutting_GetGrowTargetLocation_RC::XAxis' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_GetGrowTargetLocation_RC, YAxis) == 0x00001A, "Member 'Rope_Cutting_GetGrowTargetLocation_RC::YAxis' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_GetGrowTargetLocation_RC, ZAxis) == 0x00001B, "Member 'Rope_Cutting_GetGrowTargetLocation_RC::ZAxis' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_GetGrowTargetLocation_RC, FirstCollisionSphere) == 0x000020, "Member 'Rope_Cutting_GetGrowTargetLocation_RC::FirstCollisionSphere' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_GetGrowTargetLocation_RC, ReturnValue) == 0x000028, "Member 'Rope_Cutting_GetGrowTargetLocation_RC::ReturnValue' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.GetLastCollisionObject_RC
// 0x0008 (0x0008 - 0x0000)
struct Rope_Cutting_GetLastCollisionObject_RC final
{
public:
	class USphereComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Rope_Cutting_GetLastCollisionObject_RC) == 0x000008, "Wrong alignment on Rope_Cutting_GetLastCollisionObject_RC");
static_assert(sizeof(Rope_Cutting_GetLastCollisionObject_RC) == 0x000008, "Wrong size on Rope_Cutting_GetLastCollisionObject_RC");
static_assert(offsetof(Rope_Cutting_GetLastCollisionObject_RC, ReturnValue) == 0x000000, "Member 'Rope_Cutting_GetLastCollisionObject_RC::ReturnValue' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.GetOrderedTrackerArray
// 0x0018 (0x0018 - 0x0000)
struct Rope_Cutting_GetOrderedTrackerArray final
{
public:
	class USplineComponent*                       LookupSpline;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class URCTracker*>                     ReturnValue;                                       // 0x0008(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Rope_Cutting_GetOrderedTrackerArray) == 0x000008, "Wrong alignment on Rope_Cutting_GetOrderedTrackerArray");
static_assert(sizeof(Rope_Cutting_GetOrderedTrackerArray) == 0x000018, "Wrong size on Rope_Cutting_GetOrderedTrackerArray");
static_assert(offsetof(Rope_Cutting_GetOrderedTrackerArray, LookupSpline) == 0x000000, "Member 'Rope_Cutting_GetOrderedTrackerArray::LookupSpline' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_GetOrderedTrackerArray, ReturnValue) == 0x000008, "Member 'Rope_Cutting_GetOrderedTrackerArray::ReturnValue' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.GetRopeCollisionObjectName_RC
// 0x0010 (0x0010 - 0x0000)
struct Rope_Cutting_GetRopeCollisionObjectName_RC final
{
public:
	class USphereComponent*                       RopeCollisionSphere;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Rope_Cutting_GetRopeCollisionObjectName_RC) == 0x000008, "Wrong alignment on Rope_Cutting_GetRopeCollisionObjectName_RC");
static_assert(sizeof(Rope_Cutting_GetRopeCollisionObjectName_RC) == 0x000010, "Wrong size on Rope_Cutting_GetRopeCollisionObjectName_RC");
static_assert(offsetof(Rope_Cutting_GetRopeCollisionObjectName_RC, RopeCollisionSphere) == 0x000000, "Member 'Rope_Cutting_GetRopeCollisionObjectName_RC::RopeCollisionSphere' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_GetRopeCollisionObjectName_RC, ReturnValue) == 0x000008, "Member 'Rope_Cutting_GetRopeCollisionObjectName_RC::ReturnValue' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.GetShrinkTargetLocation_RC
// 0x0040 (0x0040 - 0x0000)
struct Rope_Cutting_GetShrinkTargetLocation_RC final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Add;                                               // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          XAxis;                                             // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          YAxis;                                             // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ZAxis;                                             // 0x001B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19DF[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USphereComponent*                       SecondCollisionSphere;                             // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Rope_Cutting_GetShrinkTargetLocation_RC) == 0x000008, "Wrong alignment on Rope_Cutting_GetShrinkTargetLocation_RC");
static_assert(sizeof(Rope_Cutting_GetShrinkTargetLocation_RC) == 0x000040, "Wrong size on Rope_Cutting_GetShrinkTargetLocation_RC");
static_assert(offsetof(Rope_Cutting_GetShrinkTargetLocation_RC, Location) == 0x000000, "Member 'Rope_Cutting_GetShrinkTargetLocation_RC::Location' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_GetShrinkTargetLocation_RC, Add) == 0x000018, "Member 'Rope_Cutting_GetShrinkTargetLocation_RC::Add' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_GetShrinkTargetLocation_RC, XAxis) == 0x000019, "Member 'Rope_Cutting_GetShrinkTargetLocation_RC::XAxis' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_GetShrinkTargetLocation_RC, YAxis) == 0x00001A, "Member 'Rope_Cutting_GetShrinkTargetLocation_RC::YAxis' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_GetShrinkTargetLocation_RC, ZAxis) == 0x00001B, "Member 'Rope_Cutting_GetShrinkTargetLocation_RC::ZAxis' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_GetShrinkTargetLocation_RC, SecondCollisionSphere) == 0x000020, "Member 'Rope_Cutting_GetShrinkTargetLocation_RC::SecondCollisionSphere' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_GetShrinkTargetLocation_RC, ReturnValue) == 0x000028, "Member 'Rope_Cutting_GetShrinkTargetLocation_RC::ReturnValue' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.GrowRope_RC
// 0x0008 (0x0008 - 0x0000)
struct Rope_Cutting_GrowRope_RC final
{
public:
	class UPrimitiveComponent*                    GrowLocation;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Rope_Cutting_GrowRope_RC) == 0x000008, "Wrong alignment on Rope_Cutting_GrowRope_RC");
static_assert(sizeof(Rope_Cutting_GrowRope_RC) == 0x000008, "Wrong size on Rope_Cutting_GrowRope_RC");
static_assert(offsetof(Rope_Cutting_GrowRope_RC, GrowLocation) == 0x000000, "Member 'Rope_Cutting_GrowRope_RC::GrowLocation' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.Immobilise_End_RC
// 0x0001 (0x0001 - 0x0000)
struct Rope_Cutting_Immobilise_End_RC final
{
public:
	bool                                          StopTilt;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Rope_Cutting_Immobilise_End_RC) == 0x000001, "Wrong alignment on Rope_Cutting_Immobilise_End_RC");
static_assert(sizeof(Rope_Cutting_Immobilise_End_RC) == 0x000001, "Wrong size on Rope_Cutting_Immobilise_End_RC");
static_assert(offsetof(Rope_Cutting_Immobilise_End_RC, StopTilt) == 0x000000, "Member 'Rope_Cutting_Immobilise_End_RC::StopTilt' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.Immobilise_Start_RC
// 0x0001 (0x0001 - 0x0000)
struct Rope_Cutting_Immobilise_Start_RC final
{
public:
	bool                                          StopTilt;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Rope_Cutting_Immobilise_Start_RC) == 0x000001, "Wrong alignment on Rope_Cutting_Immobilise_Start_RC");
static_assert(sizeof(Rope_Cutting_Immobilise_Start_RC) == 0x000001, "Wrong size on Rope_Cutting_Immobilise_Start_RC");
static_assert(offsetof(Rope_Cutting_Immobilise_Start_RC, StopTilt) == 0x000000, "Member 'Rope_Cutting_Immobilise_Start_RC::StopTilt' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.Mesh_RC
// 0x00D0 (0x00D0 - 0x0000)
struct Rope_Cutting_Mesh_RC final
{
public:
	class UStaticMesh*                            StartMesh;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartMeshWidth;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19E0[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     StartMeshMat01;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     StartMeshMat02;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            Mesh01;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mesh01Width;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19E1[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Mesh01Mat01;                                       // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Mesh01Mat02;                                       // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            Mesh02;                                            // 0x0040(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mesh02Width;                                       // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19E2[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Mesh02Mat01;                                       // 0x0050(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Mesh02Mat02;                                       // 0x0058(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            Mesh03;                                            // 0x0060(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mesh03Width;                                       // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19E3[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Mesh03Mat01;                                       // 0x0070(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Mesh03Mat02;                                       // 0x0078(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            Mesh04;                                            // 0x0080(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mesh04Width;                                       // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19E4[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Mesh04Mat01;                                       // 0x0090(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Mesh04Mat02;                                       // 0x0098(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            EndMesh;                                           // 0x00A0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndMeshWidth;                                      // 0x00A8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19E5[0x4];                                     // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     EndMeshMat01;                                      // 0x00B0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     EndMeshMat02;                                      // 0x00B8(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USplineMeshComponent*>           ReturnValue;                                       // 0x00C0(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Rope_Cutting_Mesh_RC) == 0x000008, "Wrong alignment on Rope_Cutting_Mesh_RC");
static_assert(sizeof(Rope_Cutting_Mesh_RC) == 0x0000D0, "Wrong size on Rope_Cutting_Mesh_RC");
static_assert(offsetof(Rope_Cutting_Mesh_RC, StartMesh) == 0x000000, "Member 'Rope_Cutting_Mesh_RC::StartMesh' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Mesh_RC, StartMeshWidth) == 0x000008, "Member 'Rope_Cutting_Mesh_RC::StartMeshWidth' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Mesh_RC, StartMeshMat01) == 0x000010, "Member 'Rope_Cutting_Mesh_RC::StartMeshMat01' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Mesh_RC, StartMeshMat02) == 0x000018, "Member 'Rope_Cutting_Mesh_RC::StartMeshMat02' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Mesh_RC, Mesh01) == 0x000020, "Member 'Rope_Cutting_Mesh_RC::Mesh01' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Mesh_RC, Mesh01Width) == 0x000028, "Member 'Rope_Cutting_Mesh_RC::Mesh01Width' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Mesh_RC, Mesh01Mat01) == 0x000030, "Member 'Rope_Cutting_Mesh_RC::Mesh01Mat01' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Mesh_RC, Mesh01Mat02) == 0x000038, "Member 'Rope_Cutting_Mesh_RC::Mesh01Mat02' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Mesh_RC, Mesh02) == 0x000040, "Member 'Rope_Cutting_Mesh_RC::Mesh02' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Mesh_RC, Mesh02Width) == 0x000048, "Member 'Rope_Cutting_Mesh_RC::Mesh02Width' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Mesh_RC, Mesh02Mat01) == 0x000050, "Member 'Rope_Cutting_Mesh_RC::Mesh02Mat01' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Mesh_RC, Mesh02Mat02) == 0x000058, "Member 'Rope_Cutting_Mesh_RC::Mesh02Mat02' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Mesh_RC, Mesh03) == 0x000060, "Member 'Rope_Cutting_Mesh_RC::Mesh03' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Mesh_RC, Mesh03Width) == 0x000068, "Member 'Rope_Cutting_Mesh_RC::Mesh03Width' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Mesh_RC, Mesh03Mat01) == 0x000070, "Member 'Rope_Cutting_Mesh_RC::Mesh03Mat01' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Mesh_RC, Mesh03Mat02) == 0x000078, "Member 'Rope_Cutting_Mesh_RC::Mesh03Mat02' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Mesh_RC, Mesh04) == 0x000080, "Member 'Rope_Cutting_Mesh_RC::Mesh04' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Mesh_RC, Mesh04Width) == 0x000088, "Member 'Rope_Cutting_Mesh_RC::Mesh04Width' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Mesh_RC, Mesh04Mat01) == 0x000090, "Member 'Rope_Cutting_Mesh_RC::Mesh04Mat01' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Mesh_RC, Mesh04Mat02) == 0x000098, "Member 'Rope_Cutting_Mesh_RC::Mesh04Mat02' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Mesh_RC, EndMesh) == 0x0000A0, "Member 'Rope_Cutting_Mesh_RC::EndMesh' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Mesh_RC, EndMeshWidth) == 0x0000A8, "Member 'Rope_Cutting_Mesh_RC::EndMeshWidth' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Mesh_RC, EndMeshMat01) == 0x0000B0, "Member 'Rope_Cutting_Mesh_RC::EndMeshMat01' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Mesh_RC, EndMeshMat02) == 0x0000B8, "Member 'Rope_Cutting_Mesh_RC::EndMeshMat02' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_Mesh_RC, ReturnValue) == 0x0000C0, "Member 'Rope_Cutting_Mesh_RC::ReturnValue' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.MessageComponentToBeginCut_RC
// 0x0008 (0x0008 - 0x0000)
struct Rope_Cutting_MessageComponentToBeginCut_RC final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Rope_Cutting_MessageComponentToBeginCut_RC) == 0x000008, "Wrong alignment on Rope_Cutting_MessageComponentToBeginCut_RC");
static_assert(sizeof(Rope_Cutting_MessageComponentToBeginCut_RC) == 0x000008, "Wrong size on Rope_Cutting_MessageComponentToBeginCut_RC");
static_assert(offsetof(Rope_Cutting_MessageComponentToBeginCut_RC, HitComponent) == 0x000000, "Member 'Rope_Cutting_MessageComponentToBeginCut_RC::HitComponent' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.SetUserSplineEndLocation_RC
// 0x0020 (0x0020 - 0x0000)
struct Rope_Cutting_SetUserSplineEndLocation_RC final
{
public:
	class USplineComponent*                       UserSpline;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Rope_Cutting_SetUserSplineEndLocation_RC) == 0x000008, "Wrong alignment on Rope_Cutting_SetUserSplineEndLocation_RC");
static_assert(sizeof(Rope_Cutting_SetUserSplineEndLocation_RC) == 0x000020, "Wrong size on Rope_Cutting_SetUserSplineEndLocation_RC");
static_assert(offsetof(Rope_Cutting_SetUserSplineEndLocation_RC, UserSpline) == 0x000000, "Member 'Rope_Cutting_SetUserSplineEndLocation_RC::UserSpline' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_SetUserSplineEndLocation_RC, Location) == 0x000008, "Member 'Rope_Cutting_SetUserSplineEndLocation_RC::Location' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.SetUserSplineStartLocation_RC
// 0x0020 (0x0020 - 0x0000)
struct Rope_Cutting_SetUserSplineStartLocation_RC final
{
public:
	class USplineComponent*                       UserSpline;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Rope_Cutting_SetUserSplineStartLocation_RC) == 0x000008, "Wrong alignment on Rope_Cutting_SetUserSplineStartLocation_RC");
static_assert(sizeof(Rope_Cutting_SetUserSplineStartLocation_RC) == 0x000020, "Wrong size on Rope_Cutting_SetUserSplineStartLocation_RC");
static_assert(offsetof(Rope_Cutting_SetUserSplineStartLocation_RC, UserSpline) == 0x000000, "Member 'Rope_Cutting_SetUserSplineStartLocation_RC::UserSpline' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_SetUserSplineStartLocation_RC, Location) == 0x000008, "Member 'Rope_Cutting_SetUserSplineStartLocation_RC::Location' has a wrong offset!");

// Function RopeCutting.Rope_Cutting.ShrinkRope_RC
// 0x0010 (0x0010 - 0x0000)
struct Rope_Cutting_ShrinkRope_RC final
{
public:
	class UPrimitiveComponent*                    ShrinkLocation;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19E6[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Rope_Cutting_ShrinkRope_RC) == 0x000008, "Wrong alignment on Rope_Cutting_ShrinkRope_RC");
static_assert(sizeof(Rope_Cutting_ShrinkRope_RC) == 0x000010, "Wrong size on Rope_Cutting_ShrinkRope_RC");
static_assert(offsetof(Rope_Cutting_ShrinkRope_RC, ShrinkLocation) == 0x000000, "Member 'Rope_Cutting_ShrinkRope_RC::ShrinkLocation' has a wrong offset!");
static_assert(offsetof(Rope_Cutting_ShrinkRope_RC, ReturnValue) == 0x000008, "Member 'Rope_Cutting_ShrinkRope_RC::ReturnValue' has a wrong offset!");

}

