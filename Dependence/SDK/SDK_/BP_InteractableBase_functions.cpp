#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_InteractableBase

#include "Basic.hpp"

#include "BP_InteractableBase_classes.hpp"
#include "BP_InteractableBase_parameters.hpp"


namespace SDK
{

// Function BP_InteractableBase.BP_InteractableBase_C.Use
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Player_C*                     Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Start                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_InteractableBase_C::Use(class ABP_Player_C* Player, bool Start)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractableBase_C", "Use");

	Params::BP_InteractableBase_C_Use Parms{};

	Parms.Player = Player;
	Parms.Start = Start;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractableBase.BP_InteractableBase_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_InteractableBase_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractableBase_C", "ReceiveTick");

	Params::BP_InteractableBase_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractableBase.BP_InteractableBase_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_InteractableBase_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractableBase_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InteractableBase.BP_InteractableBase_C.ItemInHands
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABP_Player_C*                     Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    InHands                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_ItemBase_C*                   ItemRef                                                (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_InteractableBase_C::ItemInHands(class ABP_Player_C* Player, class UClass* Item, bool* InHands, class ABP_ItemBase_C** ItemRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractableBase_C", "ItemInHands");

	Params::BP_InteractableBase_C_ItemInHands Parms{};

	Parms.Player = Player;
	Parms.Item = Item;

	UObject::ProcessEvent(Func, &Parms);

	if (InHands != nullptr)
		*InHands = Parms.InHands;

	if (ItemRef != nullptr)
		*ItemRef = Parms.ItemRef;
}


// Function BP_InteractableBase.BP_InteractableBase_C.InteractWithComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABP_Player_C*                     Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          Component                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_InteractableBase_C::InteractWithComponent(class ABP_Player_C* Player, class UObject* Component, bool* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractableBase_C", "InteractWithComponent");

	Params::BP_InteractableBase_C_InteractWithComponent Parms{};

	Parms.Player = Player;
	Parms.Component = Component;

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function BP_InteractableBase.BP_InteractableBase_C.InteractEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Player_C*                     Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_InteractableBase_C::InteractEnd(class ABP_Player_C* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractableBase_C", "InteractEnd");

	Params::BP_InteractableBase_C_InteractEnd Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractableBase.BP_InteractableBase_C.InteractCanceled
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Player_C*                     Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_InteractableBase_C::InteractCanceled(class ABP_Player_C* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractableBase_C", "InteractCanceled");

	Params::BP_InteractableBase_C_InteractCanceled Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractableBase.BP_InteractableBase_C.Interact
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Player_C*                     Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Hit                                                    (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_InteractableBase_C::Interact(class ABP_Player_C* Player, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractableBase_C", "Interact");

	Params::BP_InteractableBase_C_Interact Parms{};

	Parms.Player = Player;
	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractableBase.BP_InteractableBase_C.ExecuteUbergraph_BP_InteractableBase
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_InteractableBase_C::ExecuteUbergraph_BP_InteractableBase(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractableBase_C", "ExecuteUbergraph_BP_InteractableBase");

	Params::BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractableBase.BP_InteractableBase_C.CreateNotification
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             WriteText                                              (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_InteractableBase_C::CreateNotification(const class FText& WriteText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractableBase_C", "CreateNotification");

	Params::BP_InteractableBase_C_CreateNotification Parms{};

	Parms.WriteText = std::move(WriteText);

	UObject::ProcessEvent(Func, &Parms);
}

}

