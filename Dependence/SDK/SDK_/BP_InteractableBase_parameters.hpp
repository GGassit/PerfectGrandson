#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_InteractableBase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_InteractableBase.BP_InteractableBase_C.Use
// 0x0010 (0x0010 - 0x0000)
struct BP_InteractableBase_C_Use final
{
public:
	class ABP_Player_C*                           Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Start;                                             // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableBase_C_Use) == 0x000008, "Wrong alignment on BP_InteractableBase_C_Use");
static_assert(sizeof(BP_InteractableBase_C_Use) == 0x000010, "Wrong size on BP_InteractableBase_C_Use");
static_assert(offsetof(BP_InteractableBase_C_Use, Player) == 0x000000, "Member 'BP_InteractableBase_C_Use::Player' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_Use, Start) == 0x000008, "Member 'BP_InteractableBase_C_Use::Start' has a wrong offset!");

// Function BP_InteractableBase.BP_InteractableBase_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_InteractableBase_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableBase_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_InteractableBase_C_ReceiveTick");
static_assert(sizeof(BP_InteractableBase_C_ReceiveTick) == 0x000004, "Wrong size on BP_InteractableBase_C_ReceiveTick");
static_assert(offsetof(BP_InteractableBase_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_InteractableBase_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_InteractableBase.BP_InteractableBase_C.ItemInHands
// 0x0030 (0x0030 - 0x0000)
struct BP_InteractableBase_C_ItemInHands final
{
public:
	class ABP_Player_C*                           Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Item;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          InHands;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2598[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ItemBase_C*                         ItemRef;                                           // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ClassClass_ReturnValue;        // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableBase_C_ItemInHands) == 0x000008, "Wrong alignment on BP_InteractableBase_C_ItemInHands");
static_assert(sizeof(BP_InteractableBase_C_ItemInHands) == 0x000030, "Wrong size on BP_InteractableBase_C_ItemInHands");
static_assert(offsetof(BP_InteractableBase_C_ItemInHands, Player) == 0x000000, "Member 'BP_InteractableBase_C_ItemInHands::Player' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_ItemInHands, Item) == 0x000008, "Member 'BP_InteractableBase_C_ItemInHands::Item' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_ItemInHands, InHands) == 0x000010, "Member 'BP_InteractableBase_C_ItemInHands::InHands' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_ItemInHands, ItemRef) == 0x000018, "Member 'BP_InteractableBase_C_ItemInHands::ItemRef' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_ItemInHands, CallFunc_GetObjectClass_ReturnValue) == 0x000020, "Member 'BP_InteractableBase_C_ItemInHands::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_ItemInHands, CallFunc_EqualEqual_ClassClass_ReturnValue) == 0x000028, "Member 'BP_InteractableBase_C_ItemInHands::CallFunc_EqualEqual_ClassClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_ItemInHands, CallFunc_BooleanAND_ReturnValue) == 0x000029, "Member 'BP_InteractableBase_C_ItemInHands::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_InteractableBase.BP_InteractableBase_C.InteractWithComponent
// 0x00F0 (0x00F0 - 0x0000)
struct BP_InteractableBase_C_InteractWithComponent final
{
public:
	class ABP_Player_C*                           Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Component;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Value;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2599[0x1];                                     // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_259A[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0090(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_259B[0x4];                                     // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableBase_C_InteractWithComponent) == 0x000008, "Wrong alignment on BP_InteractableBase_C_InteractWithComponent");
static_assert(sizeof(BP_InteractableBase_C_InteractWithComponent) == 0x0000F0, "Wrong size on BP_InteractableBase_C_InteractWithComponent");
static_assert(offsetof(BP_InteractableBase_C_InteractWithComponent, Player) == 0x000000, "Member 'BP_InteractableBase_C_InteractWithComponent::Player' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_InteractWithComponent, Component) == 0x000008, "Member 'BP_InteractableBase_C_InteractWithComponent::Component' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_InteractWithComponent, Value) == 0x000010, "Member 'BP_InteractableBase_C_InteractWithComponent::Value' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_InteractWithComponent, CallFunc_BreakHitResult_bBlockingHit) == 0x000011, "Member 'BP_InteractableBase_C_InteractWithComponent::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_InteractWithComponent, CallFunc_BreakHitResult_bInitialOverlap) == 0x000012, "Member 'BP_InteractableBase_C_InteractWithComponent::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_InteractWithComponent, CallFunc_BreakHitResult_Time) == 0x000014, "Member 'BP_InteractableBase_C_InteractWithComponent::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_InteractWithComponent, CallFunc_BreakHitResult_Distance) == 0x000018, "Member 'BP_InteractableBase_C_InteractWithComponent::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_InteractWithComponent, CallFunc_BreakHitResult_Location) == 0x000020, "Member 'BP_InteractableBase_C_InteractWithComponent::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_InteractWithComponent, CallFunc_BreakHitResult_ImpactPoint) == 0x000038, "Member 'BP_InteractableBase_C_InteractWithComponent::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_InteractWithComponent, CallFunc_BreakHitResult_Normal) == 0x000050, "Member 'BP_InteractableBase_C_InteractWithComponent::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_InteractWithComponent, CallFunc_BreakHitResult_ImpactNormal) == 0x000068, "Member 'BP_InteractableBase_C_InteractWithComponent::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_InteractWithComponent, CallFunc_BreakHitResult_PhysMat) == 0x000080, "Member 'BP_InteractableBase_C_InteractWithComponent::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_InteractWithComponent, CallFunc_BreakHitResult_HitActor) == 0x000088, "Member 'BP_InteractableBase_C_InteractWithComponent::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_InteractWithComponent, CallFunc_BreakHitResult_HitComponent) == 0x000090, "Member 'BP_InteractableBase_C_InteractWithComponent::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_InteractWithComponent, CallFunc_BreakHitResult_HitBoneName) == 0x000098, "Member 'BP_InteractableBase_C_InteractWithComponent::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_InteractWithComponent, CallFunc_BreakHitResult_BoneName) == 0x0000A0, "Member 'BP_InteractableBase_C_InteractWithComponent::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_InteractWithComponent, CallFunc_BreakHitResult_HitItem) == 0x0000A8, "Member 'BP_InteractableBase_C_InteractWithComponent::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_InteractWithComponent, CallFunc_BreakHitResult_ElementIndex) == 0x0000AC, "Member 'BP_InteractableBase_C_InteractWithComponent::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_InteractWithComponent, CallFunc_BreakHitResult_FaceIndex) == 0x0000B0, "Member 'BP_InteractableBase_C_InteractWithComponent::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_InteractWithComponent, CallFunc_BreakHitResult_TraceStart) == 0x0000B8, "Member 'BP_InteractableBase_C_InteractWithComponent::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_InteractWithComponent, CallFunc_BreakHitResult_TraceEnd) == 0x0000D0, "Member 'BP_InteractableBase_C_InteractWithComponent::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_InteractWithComponent, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0000E8, "Member 'BP_InteractableBase_C_InteractWithComponent::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function BP_InteractableBase.BP_InteractableBase_C.InteractEnd
// 0x0008 (0x0008 - 0x0000)
struct BP_InteractableBase_C_InteractEnd final
{
public:
	class ABP_Player_C*                           Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableBase_C_InteractEnd) == 0x000008, "Wrong alignment on BP_InteractableBase_C_InteractEnd");
static_assert(sizeof(BP_InteractableBase_C_InteractEnd) == 0x000008, "Wrong size on BP_InteractableBase_C_InteractEnd");
static_assert(offsetof(BP_InteractableBase_C_InteractEnd, Player) == 0x000000, "Member 'BP_InteractableBase_C_InteractEnd::Player' has a wrong offset!");

// Function BP_InteractableBase.BP_InteractableBase_C.InteractCanceled
// 0x0008 (0x0008 - 0x0000)
struct BP_InteractableBase_C_InteractCanceled final
{
public:
	class ABP_Player_C*                           Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableBase_C_InteractCanceled) == 0x000008, "Wrong alignment on BP_InteractableBase_C_InteractCanceled");
static_assert(sizeof(BP_InteractableBase_C_InteractCanceled) == 0x000008, "Wrong size on BP_InteractableBase_C_InteractCanceled");
static_assert(offsetof(BP_InteractableBase_C_InteractCanceled, Player) == 0x000000, "Member 'BP_InteractableBase_C_InteractCanceled::Player' has a wrong offset!");

// Function BP_InteractableBase.BP_InteractableBase_C.Interact
// 0x00F0 (0x00F0 - 0x0000)
struct BP_InteractableBase_C_Interact final
{
public:
	class ABP_Player_C*                           Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x00E8)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_InteractableBase_C_Interact) == 0x000008, "Wrong alignment on BP_InteractableBase_C_Interact");
static_assert(sizeof(BP_InteractableBase_C_Interact) == 0x0000F0, "Wrong size on BP_InteractableBase_C_Interact");
static_assert(offsetof(BP_InteractableBase_C_Interact, Player) == 0x000000, "Member 'BP_InteractableBase_C_Interact::Player' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_Interact, Hit) == 0x000008, "Member 'BP_InteractableBase_C_Interact::Hit' has a wrong offset!");

// Function BP_InteractableBase.BP_InteractableBase_C.ExecuteUbergraph_BP_InteractableBase
// 0x0118 (0x0118 - 0x0000)
struct BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_259C[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Player_C*                           K2Node_Event_Player;                               // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_Player_C*                           K2Node_Event_Player_3;                             // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_Hit;                                  // 0x0018(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class ABP_Player_C*                           K2Node_Event_Player_2;                             // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Start;                                // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_259D[0x3];                                     // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Player_C*                           K2Node_Event_Player_1;                             // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase) == 0x000008, "Wrong alignment on BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase");
static_assert(sizeof(BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase) == 0x000118, "Wrong size on BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase");
static_assert(offsetof(BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase, EntryPoint) == 0x000000, "Member 'BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase, K2Node_Event_Player) == 0x000008, "Member 'BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase::K2Node_Event_Player' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase, K2Node_Event_Player_3) == 0x000010, "Member 'BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase::K2Node_Event_Player_3' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase, K2Node_Event_Hit) == 0x000018, "Member 'BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase::K2Node_Event_Hit' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase, K2Node_Event_Player_2) == 0x000100, "Member 'BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase::K2Node_Event_Player_2' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase, K2Node_Event_Start) == 0x000108, "Member 'BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase::K2Node_Event_Start' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase, K2Node_Event_DeltaSeconds) == 0x00010C, "Member 'BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase, K2Node_Event_Player_1) == 0x000110, "Member 'BP_InteractableBase_C_ExecuteUbergraph_BP_InteractableBase::K2Node_Event_Player_1' has a wrong offset!");

// Function BP_InteractableBase.BP_InteractableBase_C.CreateNotification
// 0x0038 (0x0038 - 0x0000)
struct BP_InteractableBase_C_CreateNotification final
{
public:
	class FText                                   WriteText;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AHUD*                                   CallFunc_GetHUD_ReturnValue;                       // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_GrannyHUD_C*                        K2Node_DynamicCast_AsBP_Granny_HUD;                // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableBase_C_CreateNotification) == 0x000008, "Wrong alignment on BP_InteractableBase_C_CreateNotification");
static_assert(sizeof(BP_InteractableBase_C_CreateNotification) == 0x000038, "Wrong size on BP_InteractableBase_C_CreateNotification");
static_assert(offsetof(BP_InteractableBase_C_CreateNotification, WriteText) == 0x000000, "Member 'BP_InteractableBase_C_CreateNotification::WriteText' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_CreateNotification, CallFunc_GetPlayerController_ReturnValue) == 0x000018, "Member 'BP_InteractableBase_C_CreateNotification::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_CreateNotification, CallFunc_GetHUD_ReturnValue) == 0x000020, "Member 'BP_InteractableBase_C_CreateNotification::CallFunc_GetHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_CreateNotification, K2Node_DynamicCast_AsBP_Granny_HUD) == 0x000028, "Member 'BP_InteractableBase_C_CreateNotification::K2Node_DynamicCast_AsBP_Granny_HUD' has a wrong offset!");
static_assert(offsetof(BP_InteractableBase_C_CreateNotification, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_InteractableBase_C_CreateNotification::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

