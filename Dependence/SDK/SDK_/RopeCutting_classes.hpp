#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RopeCutting

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class RopeCutting.CC22
// 0x0540 (0x07E0 - 0x02A0)
class UCC22 final : public USceneComponent
{
public:
	bool                                          SpawnAtRuntime;                                    // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_193A[0x3];                                     // 0x02A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxChainLength;                                    // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            ChainModel;                                        // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChainLinkSize;                                     // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_193B[0x4];                                     // 0x02B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                EndLocation;                                       // 0x02B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSplineComponent;                                // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_193C[0x3];                                     // 0x02D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SplineComponentName;                               // 0x02D4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SetSplineStartLocation;                            // 0x02DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_193D[0x3];                                     // 0x02DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SplineStartLocation;                               // 0x02E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SetSplineEndLocation;                              // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_193E[0x7];                                     // 0x02F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SplineEndLocation;                                 // 0x0300(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StartImmobilised;                                  // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncreaseStartRigidity;                             // 0x0319(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EndImmobilised;                                    // 0x031A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncreaseEndRigidity;                               // 0x031B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AttachStartMesh;                                   // 0x031C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_193F[0x3];                                     // 0x031D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   StartMesh;                                         // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartSocket;                                       // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartBone;                                         // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AttachEndMesh;                                     // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1940[0x3];                                     // 0x0339(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EndMesh;                                           // 0x033C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndSocket;                                         // 0x0344(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndBone;                                           // 0x034C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanCutChain;                                       // 0x0354(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1941[0x3];                                     // 0x0355(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CuttingForceThreshold;                             // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SwitchMeshOnCut;                                   // 0x035C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1942[0x3];                                     // 0x035D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            CutChainModel;                                     // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableEmitterOnCut;                                // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1943[0x7];                                     // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        CutChainEmitter;                                   // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableSoundOnCut;                                  // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1944[0x7];                                     // 0x0379(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              CutChainSound;                                     // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableVelocityTracking;                            // 0x0388(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableChainRattle;                                 // 0x0389(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1945[0x6];                                     // 0x038A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              ChainRattleSound;                                  // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChainRattleMinVelocity;                            // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChainRattleRate;                                   // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RattleMinimumChainLength;                          // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RattlePitchModulationMin;                          // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RattlePitchModulationMax;                          // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RattleVolumeModulationMin;                         // 0x03AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RattleVolumeModulationMax;                         // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableChainAirWhip;                                // 0x03B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1946[0x3];                                     // 0x03B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              ChainAirWhipSound;                                 // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChainAirWhipMinVelocity;                           // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChainAirWhipRate;                                  // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirWhipPitchModulationMin;                         // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirWhipPitchModulationMax;                         // 0x03CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirWhipVolumeModulationMin;                        // 0x03D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirWhipVolumeModulationMax;                        // 0x03D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AirWhipMinimumChainLength;                         // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpactForceThreshold;                              // 0x03DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableImpactSound;                                 // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1947[0x7];                                     // 0x03E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              ImpactSound;                                       // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableImpactEmitter;                               // 0x03F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1948[0x7];                                     // 0x03F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        ImpactEmitter;                                     // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanGrab;                                           // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1949[0x3];                                     // 0x0401(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RigidnessScale;                                    // 0x0404(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StabilizationThresholdMultiplier_CC;               // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionSolverIterationCount_CC;                   // 0x040C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocitySolverIterationCount_CC;                   // 0x0410(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PhysicsEnabled;                                    // 0x0414(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableSelfCollision;                              // 0x0415(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverrideRigidnessScale;                            // 0x0416(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_194A[0x1];                                     // 0x0417(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SetLinearDamping_Override;                         // 0x0418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SetAngularDamping_Override;                        // 0x041C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SetMassScale_Override;                             // 0x0420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InertiaTensorScale_Override;                       // 0x0424(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityDrive_Override;                            // 0x0428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularDrive_Override;                             // 0x042C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularSwing1Limit_Override;                       // 0x0430(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularSwing2Limit_Override;                       // 0x0434(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularTwistLimit_Override;                        // 0x0438(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCut_CC;                                          // 0x043C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_194B[0x3];                                     // 0x043D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SplineLength_CC;                                   // 0x0440(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         NumberOfUnits_CC;                                  // 0x0444(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          IsStartPrimitiveSkeletal_CC;                       // 0x0448(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          IsEndPrimitiveSkeletal_CC;                         // 0x0449(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          StartPrimitiveFound;                               // 0x044A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          EndPrimitiveFound;                                 // 0x044B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MeshBoundsSize;                                    // 0x044C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RigidityScaleMultiplier;                           // 0x0450(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          OnComponentHitFlowControl_CC;                      // 0x0454(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          HasGrabbed_CC;                                     // 0x0455(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_194C[0x2];                                     // 0x0456(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OriginalGrabDistance_CC;                           // 0x0458(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DisableGrabDuration_CC;                            // 0x045C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         HitCounter_CC;                                     // 0x0460(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          AllowAirWhip_CC;                                   // 0x0464(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          AllowDelayLoops_CC;                                // 0x0465(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_194D[0x2];                                     // 0x0466(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SetLinearDamping_CC;                               // 0x0468(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SetAngularDamping_CC;                              // 0x046C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SetMassScale_CC;                                   // 0x0470(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         InertiaTensorScale_CC;                             // 0x0474(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         VelocityDrive_CC;                                  // 0x0478(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AngularDrive_CC;                                   // 0x047C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AngularSwing1Limit_CC;                             // 0x0480(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AngularSwing2Limit_CC;                             // 0x0484(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AngularTwistLimit_CC;                              // 0x0488(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_194E[0x4];                                     // 0x048C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FirstUnitOrigin_Loc_EMov_CC;                       // 0x0490(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRotator                               FirstUnitOrigin_Rot_EMov_CC;                       // 0x04A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FVector                                LastUnitOrigin_Loc_EMov_CC;                        // 0x04C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRotator                               LastUnitOrigin_Rot_EMov_CC;                        // 0x04D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FVector                                LastUnitTarget_Loc_EMov_CC;                        // 0x04F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRotator                               LastUnitTarget_Rot_EMov_CC;                        // 0x0508(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	bool                                          Begin_EMov_CC;                                     // 0x0520(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          AllowFirstUnitRotate_Att_EMov_CC;                  // 0x0521(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          AllowFirstUnitRotate_Immobile_EMov_CC;             // 0x0522(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_194F[0x1];                                     // 0x0523(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LerpValue_EMov_CC;                                 // 0x0524(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TimerDelay_EMov_CC;                                // 0x0528(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1950[0x4];                                     // 0x052C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FirstUnitOrigin_Loc_SMov_CC;                       // 0x0530(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRotator                               FirstUnitOrigin_Rot_SMov_CC;                       // 0x0548(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FVector                                LastUnitOrigin_Loc_SMov_CC;                        // 0x0560(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRotator                               LastUnitOrigin_Rot_SMov_CC;                        // 0x0578(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FVector                                FirstUnitTarget_Loc_SMov_CC;                       // 0x0590(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRotator                               FirstUnitTarget_Rot_SMov_CC;                       // 0x05A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FRotator                               FirstUnitTarget_RotInvert_SMov_CC;                 // 0x05C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	bool                                          Begin_SMov_CC;                                     // 0x05D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          AllowFirstUnitRotate_Att_SMov_CC;                  // 0x05D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          AllowFirstUnitRotate_Immobile_SMov_CC;             // 0x05DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1951[0x1];                                     // 0x05DB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LerpValue_SMov_CC;                                 // 0x05DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TimerDelay_SMov_CC;                                // 0x05E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1952[0x4];                                     // 0x05E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   ChainMeshPR_CC;                                    // 0x05E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMeshComponent*                   FalseChainMeshPR_CC;                               // 0x05F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMeshComponent*                   First_ChainMeshPR_CC;                              // 0x05F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMeshComponent*                   LastChainMeshPR_CC;                                // 0x0600(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPhysicsConstraintComponent*            PhysicsConstraintPR_CC;                            // 0x0608(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USplineComponent*                       BuildingSplinePR_CC;                               // 0x0610(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USplineComponent*                       DataSplinePR_CC;                                   // 0x0618(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USplineComponent*                       DataSplineDestroyPR_CC;                            // 0x0620(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPrimitiveComponent*                    StartPrimitive_CC;                                 // 0x0628(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPhysicsConstraintComponent*            StartPhyConstrPR_CC;                               // 0x0630(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USkeletalMeshComponent*                 StartSkeletalMesh_CC;                              // 0x0638(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPrimitiveComponent*                    EndPrimitive_CC;                                   // 0x0640(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPhysicsConstraintComponent*            EndPhyConstrPR_CC;                                 // 0x0648(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USkeletalMeshComponent*                 EndSkeletalMesh_CC;                                // 0x0650(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMeshComponent*                   FirstUnitPinMeshPR_CC;                             // 0x0658(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPhysicsConstraintComponent*            FirstUnitPinPhyConstrPR_CC;                        // 0x0660(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMeshComponent*                   LastUnitPinMeshPR_CC;                              // 0x0668(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPhysicsConstraintComponent*            LastUnitPinPhyConstrPR_CC;                         // 0x0670(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCC22Tracker*                           ChainTrackerPR_CC;                                 // 0x0678(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAudioComponent*                        ChainRattleSoundSpawn_CC;                          // 0x0680(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPhysicsConstraintComponent*            GrabPhyConstrPR_CC;                                // 0x0688(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UParticleSystemComponent*               CutChainEmitterSpawn_CC;                           // 0x0690(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAudioComponent*                        CutChainSoundSpawn_CC;                             // 0x0698(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UParticleSystemComponent*               WeakImpactEmitterSpawn_CC;                         // 0x06A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAudioComponent*                        WeakImpactSoundSpawn_CC;                           // 0x06A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class USplineComponent*>               SplineLookupArray_CC;                              // 0x06B0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UPrimitiveComponent*>            StartPrimitiveLookupArray_CC;                      // 0x06C0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class FName>                           StartPrimitiveFNameArray_CC;                       // 0x06D0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           StartPrimitiveBoneFNameArray_CC;                   // 0x06E0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UPrimitiveComponent*>            EndPrimitiveLookupArray_CC;                        // 0x06F0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class FName>                           EndPrimitiveFNameArray_CC;                         // 0x0700(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           EndPrimitiveBoneFNameArray_CC;                     // 0x0710(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UStaticMeshComponent*>           ChainMeshArray_CC;                                 // 0x0720(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UStaticMeshComponent*>           CutMeshArray_CC;                                   // 0x0730(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UStaticMeshComponent*>           FalseChainMeshArray_CC;                            // 0x0740(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UPhysicsConstraintComponent*>    PhysicsConstraintArray_CC;                         // 0x0750(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UAudioComponent*>                RuntimeSoundArray_CC;                              // 0x0760(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UParticleSystemComponent*>       RuntimeEmitterArray_CC;                            // 0x0770(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UCC22Tracker*>                   TrackerArray_CC;                                   // 0x0780(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1953[0x38];                                    // 0x0790(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          AllowVelocityChecks_CC;                            // 0x07C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1954[0x17];                                    // 0x07C9(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AllowAirWhipFunction_CC();
	void AttachChainEnd_RC(class UPrimitiveComponent* MeshToAttach, class FName SocketName, class FName BoneName);
	void AttachChainStart_CC(class UPrimitiveComponent* MeshToAttach, class FName SocketName, class FName BoneName);
	void BeginConstruction_CC();
	void BreakChain_CC(class UPrimitiveComponent* ChainLinkHit);
	void BreakChainByNumber_CC(int32 ChainLinkHit);
	void BuildChain_CC();
	void CreateSimpleSpline_CC();
	const class FName CreateUniqueName_CC(const class FString& ComponentType, const int32 ComponentNumber);
	void DetachEndPrimitive_CC();
	void DetachStartPrimitive_CC();
	void DropChain_CC(float DisableGrabDuration);
	void EnsureProperReset_CC();
	void EventBeginDelayedFunction_CC();
	void GameBegun_CC();
	class UPhysicsConstraintComponent* GetEndPrimitiveConstraint_CC();
	class UStaticMeshComponent* GetFirstChainMesh_CC();
	class UStaticMeshComponent* GetLastChainMesh_CC();
	TArray<class UStaticMeshComponent*> GetMeshArray_CC();
	TArray<class UPhysicsConstraintComponent*> GetPhysicsConstraintArray_CC();
	class UPhysicsConstraintComponent* GetStartPrimitiveConstraint_CC();
	void GrabCheck();
	void GrabReset_CC();
	void ImmobiliseFirstChainLink_CC();
	void ImmobiliseLastChainLink_CC();
	void MobiliseFirstChainLink_CC();
	void MobiliseLastChainLink_CC();
	void MoveEndOfChain_CC(const struct FVector& MoveToLocation, float DurationOfMove, bool AllowStartRotationAttached, bool AllowStartRotationImmobilised);
	void MoveEndOfChainPassBack_CC();
	void MoveStartOfChain_CC(const struct FVector& MoveToLocation, float DurationOfMove, bool AllowEndRotationAttached, bool AllowEndRotationImmobilised);
	void MoveStartOfChainPassBack_CC();
	void OnAirWhipResetDelay_CC();
	void OnCompHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnComponentHitFlowControl();
	void OnComponentHitReset();
	void OnEventBeginTimer();
	void OnGrabCheckLoop();
	void OnGrabResetDelay();
	void OnMoveEndOfChainTimer();
	void OnMoveStartOfChainTimer();
	void OnVelocityCheckDelay();
	void ResetChainAfterMove_CC(bool ImmobiliseStart, bool ImmobiliseEnd);
	void ScalePhysicsParameters_CC();
	void SpawnChainAtRuntime_CC();
	void VelocityCheck_CC();
	void WeakImpactChain_CC();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CC22">();
	}
	static class UCC22* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCC22>();
	}
};
static_assert(alignof(UCC22) == 0x000010, "Wrong alignment on UCC22");
static_assert(sizeof(UCC22) == 0x0007E0, "Wrong size on UCC22");
static_assert(offsetof(UCC22, SpawnAtRuntime) == 0x0002A0, "Member 'UCC22::SpawnAtRuntime' has a wrong offset!");
static_assert(offsetof(UCC22, MaxChainLength) == 0x0002A4, "Member 'UCC22::MaxChainLength' has a wrong offset!");
static_assert(offsetof(UCC22, ChainModel) == 0x0002A8, "Member 'UCC22::ChainModel' has a wrong offset!");
static_assert(offsetof(UCC22, ChainLinkSize) == 0x0002B0, "Member 'UCC22::ChainLinkSize' has a wrong offset!");
static_assert(offsetof(UCC22, EndLocation) == 0x0002B8, "Member 'UCC22::EndLocation' has a wrong offset!");
static_assert(offsetof(UCC22, UseSplineComponent) == 0x0002D0, "Member 'UCC22::UseSplineComponent' has a wrong offset!");
static_assert(offsetof(UCC22, SplineComponentName) == 0x0002D4, "Member 'UCC22::SplineComponentName' has a wrong offset!");
static_assert(offsetof(UCC22, SetSplineStartLocation) == 0x0002DC, "Member 'UCC22::SetSplineStartLocation' has a wrong offset!");
static_assert(offsetof(UCC22, SplineStartLocation) == 0x0002E0, "Member 'UCC22::SplineStartLocation' has a wrong offset!");
static_assert(offsetof(UCC22, SetSplineEndLocation) == 0x0002F8, "Member 'UCC22::SetSplineEndLocation' has a wrong offset!");
static_assert(offsetof(UCC22, SplineEndLocation) == 0x000300, "Member 'UCC22::SplineEndLocation' has a wrong offset!");
static_assert(offsetof(UCC22, StartImmobilised) == 0x000318, "Member 'UCC22::StartImmobilised' has a wrong offset!");
static_assert(offsetof(UCC22, IncreaseStartRigidity) == 0x000319, "Member 'UCC22::IncreaseStartRigidity' has a wrong offset!");
static_assert(offsetof(UCC22, EndImmobilised) == 0x00031A, "Member 'UCC22::EndImmobilised' has a wrong offset!");
static_assert(offsetof(UCC22, IncreaseEndRigidity) == 0x00031B, "Member 'UCC22::IncreaseEndRigidity' has a wrong offset!");
static_assert(offsetof(UCC22, AttachStartMesh) == 0x00031C, "Member 'UCC22::AttachStartMesh' has a wrong offset!");
static_assert(offsetof(UCC22, StartMesh) == 0x000320, "Member 'UCC22::StartMesh' has a wrong offset!");
static_assert(offsetof(UCC22, StartSocket) == 0x000328, "Member 'UCC22::StartSocket' has a wrong offset!");
static_assert(offsetof(UCC22, StartBone) == 0x000330, "Member 'UCC22::StartBone' has a wrong offset!");
static_assert(offsetof(UCC22, AttachEndMesh) == 0x000338, "Member 'UCC22::AttachEndMesh' has a wrong offset!");
static_assert(offsetof(UCC22, EndMesh) == 0x00033C, "Member 'UCC22::EndMesh' has a wrong offset!");
static_assert(offsetof(UCC22, EndSocket) == 0x000344, "Member 'UCC22::EndSocket' has a wrong offset!");
static_assert(offsetof(UCC22, EndBone) == 0x00034C, "Member 'UCC22::EndBone' has a wrong offset!");
static_assert(offsetof(UCC22, CanCutChain) == 0x000354, "Member 'UCC22::CanCutChain' has a wrong offset!");
static_assert(offsetof(UCC22, CuttingForceThreshold) == 0x000358, "Member 'UCC22::CuttingForceThreshold' has a wrong offset!");
static_assert(offsetof(UCC22, SwitchMeshOnCut) == 0x00035C, "Member 'UCC22::SwitchMeshOnCut' has a wrong offset!");
static_assert(offsetof(UCC22, CutChainModel) == 0x000360, "Member 'UCC22::CutChainModel' has a wrong offset!");
static_assert(offsetof(UCC22, EnableEmitterOnCut) == 0x000368, "Member 'UCC22::EnableEmitterOnCut' has a wrong offset!");
static_assert(offsetof(UCC22, CutChainEmitter) == 0x000370, "Member 'UCC22::CutChainEmitter' has a wrong offset!");
static_assert(offsetof(UCC22, EnableSoundOnCut) == 0x000378, "Member 'UCC22::EnableSoundOnCut' has a wrong offset!");
static_assert(offsetof(UCC22, CutChainSound) == 0x000380, "Member 'UCC22::CutChainSound' has a wrong offset!");
static_assert(offsetof(UCC22, EnableVelocityTracking) == 0x000388, "Member 'UCC22::EnableVelocityTracking' has a wrong offset!");
static_assert(offsetof(UCC22, EnableChainRattle) == 0x000389, "Member 'UCC22::EnableChainRattle' has a wrong offset!");
static_assert(offsetof(UCC22, ChainRattleSound) == 0x000390, "Member 'UCC22::ChainRattleSound' has a wrong offset!");
static_assert(offsetof(UCC22, ChainRattleMinVelocity) == 0x000398, "Member 'UCC22::ChainRattleMinVelocity' has a wrong offset!");
static_assert(offsetof(UCC22, ChainRattleRate) == 0x00039C, "Member 'UCC22::ChainRattleRate' has a wrong offset!");
static_assert(offsetof(UCC22, RattleMinimumChainLength) == 0x0003A0, "Member 'UCC22::RattleMinimumChainLength' has a wrong offset!");
static_assert(offsetof(UCC22, RattlePitchModulationMin) == 0x0003A4, "Member 'UCC22::RattlePitchModulationMin' has a wrong offset!");
static_assert(offsetof(UCC22, RattlePitchModulationMax) == 0x0003A8, "Member 'UCC22::RattlePitchModulationMax' has a wrong offset!");
static_assert(offsetof(UCC22, RattleVolumeModulationMin) == 0x0003AC, "Member 'UCC22::RattleVolumeModulationMin' has a wrong offset!");
static_assert(offsetof(UCC22, RattleVolumeModulationMax) == 0x0003B0, "Member 'UCC22::RattleVolumeModulationMax' has a wrong offset!");
static_assert(offsetof(UCC22, EnableChainAirWhip) == 0x0003B4, "Member 'UCC22::EnableChainAirWhip' has a wrong offset!");
static_assert(offsetof(UCC22, ChainAirWhipSound) == 0x0003B8, "Member 'UCC22::ChainAirWhipSound' has a wrong offset!");
static_assert(offsetof(UCC22, ChainAirWhipMinVelocity) == 0x0003C0, "Member 'UCC22::ChainAirWhipMinVelocity' has a wrong offset!");
static_assert(offsetof(UCC22, ChainAirWhipRate) == 0x0003C4, "Member 'UCC22::ChainAirWhipRate' has a wrong offset!");
static_assert(offsetof(UCC22, AirWhipPitchModulationMin) == 0x0003C8, "Member 'UCC22::AirWhipPitchModulationMin' has a wrong offset!");
static_assert(offsetof(UCC22, AirWhipPitchModulationMax) == 0x0003CC, "Member 'UCC22::AirWhipPitchModulationMax' has a wrong offset!");
static_assert(offsetof(UCC22, AirWhipVolumeModulationMin) == 0x0003D0, "Member 'UCC22::AirWhipVolumeModulationMin' has a wrong offset!");
static_assert(offsetof(UCC22, AirWhipVolumeModulationMax) == 0x0003D4, "Member 'UCC22::AirWhipVolumeModulationMax' has a wrong offset!");
static_assert(offsetof(UCC22, AirWhipMinimumChainLength) == 0x0003D8, "Member 'UCC22::AirWhipMinimumChainLength' has a wrong offset!");
static_assert(offsetof(UCC22, ImpactForceThreshold) == 0x0003DC, "Member 'UCC22::ImpactForceThreshold' has a wrong offset!");
static_assert(offsetof(UCC22, EnableImpactSound) == 0x0003E0, "Member 'UCC22::EnableImpactSound' has a wrong offset!");
static_assert(offsetof(UCC22, ImpactSound) == 0x0003E8, "Member 'UCC22::ImpactSound' has a wrong offset!");
static_assert(offsetof(UCC22, EnableImpactEmitter) == 0x0003F0, "Member 'UCC22::EnableImpactEmitter' has a wrong offset!");
static_assert(offsetof(UCC22, ImpactEmitter) == 0x0003F8, "Member 'UCC22::ImpactEmitter' has a wrong offset!");
static_assert(offsetof(UCC22, CanGrab) == 0x000400, "Member 'UCC22::CanGrab' has a wrong offset!");
static_assert(offsetof(UCC22, RigidnessScale) == 0x000404, "Member 'UCC22::RigidnessScale' has a wrong offset!");
static_assert(offsetof(UCC22, StabilizationThresholdMultiplier_CC) == 0x000408, "Member 'UCC22::StabilizationThresholdMultiplier_CC' has a wrong offset!");
static_assert(offsetof(UCC22, PositionSolverIterationCount_CC) == 0x00040C, "Member 'UCC22::PositionSolverIterationCount_CC' has a wrong offset!");
static_assert(offsetof(UCC22, VelocitySolverIterationCount_CC) == 0x000410, "Member 'UCC22::VelocitySolverIterationCount_CC' has a wrong offset!");
static_assert(offsetof(UCC22, PhysicsEnabled) == 0x000414, "Member 'UCC22::PhysicsEnabled' has a wrong offset!");
static_assert(offsetof(UCC22, DisableSelfCollision) == 0x000415, "Member 'UCC22::DisableSelfCollision' has a wrong offset!");
static_assert(offsetof(UCC22, OverrideRigidnessScale) == 0x000416, "Member 'UCC22::OverrideRigidnessScale' has a wrong offset!");
static_assert(offsetof(UCC22, SetLinearDamping_Override) == 0x000418, "Member 'UCC22::SetLinearDamping_Override' has a wrong offset!");
static_assert(offsetof(UCC22, SetAngularDamping_Override) == 0x00041C, "Member 'UCC22::SetAngularDamping_Override' has a wrong offset!");
static_assert(offsetof(UCC22, SetMassScale_Override) == 0x000420, "Member 'UCC22::SetMassScale_Override' has a wrong offset!");
static_assert(offsetof(UCC22, InertiaTensorScale_Override) == 0x000424, "Member 'UCC22::InertiaTensorScale_Override' has a wrong offset!");
static_assert(offsetof(UCC22, VelocityDrive_Override) == 0x000428, "Member 'UCC22::VelocityDrive_Override' has a wrong offset!");
static_assert(offsetof(UCC22, AngularDrive_Override) == 0x00042C, "Member 'UCC22::AngularDrive_Override' has a wrong offset!");
static_assert(offsetof(UCC22, AngularSwing1Limit_Override) == 0x000430, "Member 'UCC22::AngularSwing1Limit_Override' has a wrong offset!");
static_assert(offsetof(UCC22, AngularSwing2Limit_Override) == 0x000434, "Member 'UCC22::AngularSwing2Limit_Override' has a wrong offset!");
static_assert(offsetof(UCC22, AngularTwistLimit_Override) == 0x000438, "Member 'UCC22::AngularTwistLimit_Override' has a wrong offset!");
static_assert(offsetof(UCC22, IsCut_CC) == 0x00043C, "Member 'UCC22::IsCut_CC' has a wrong offset!");
static_assert(offsetof(UCC22, SplineLength_CC) == 0x000440, "Member 'UCC22::SplineLength_CC' has a wrong offset!");
static_assert(offsetof(UCC22, NumberOfUnits_CC) == 0x000444, "Member 'UCC22::NumberOfUnits_CC' has a wrong offset!");
static_assert(offsetof(UCC22, IsStartPrimitiveSkeletal_CC) == 0x000448, "Member 'UCC22::IsStartPrimitiveSkeletal_CC' has a wrong offset!");
static_assert(offsetof(UCC22, IsEndPrimitiveSkeletal_CC) == 0x000449, "Member 'UCC22::IsEndPrimitiveSkeletal_CC' has a wrong offset!");
static_assert(offsetof(UCC22, StartPrimitiveFound) == 0x00044A, "Member 'UCC22::StartPrimitiveFound' has a wrong offset!");
static_assert(offsetof(UCC22, EndPrimitiveFound) == 0x00044B, "Member 'UCC22::EndPrimitiveFound' has a wrong offset!");
static_assert(offsetof(UCC22, MeshBoundsSize) == 0x00044C, "Member 'UCC22::MeshBoundsSize' has a wrong offset!");
static_assert(offsetof(UCC22, RigidityScaleMultiplier) == 0x000450, "Member 'UCC22::RigidityScaleMultiplier' has a wrong offset!");
static_assert(offsetof(UCC22, OnComponentHitFlowControl_CC) == 0x000454, "Member 'UCC22::OnComponentHitFlowControl_CC' has a wrong offset!");
static_assert(offsetof(UCC22, HasGrabbed_CC) == 0x000455, "Member 'UCC22::HasGrabbed_CC' has a wrong offset!");
static_assert(offsetof(UCC22, OriginalGrabDistance_CC) == 0x000458, "Member 'UCC22::OriginalGrabDistance_CC' has a wrong offset!");
static_assert(offsetof(UCC22, DisableGrabDuration_CC) == 0x00045C, "Member 'UCC22::DisableGrabDuration_CC' has a wrong offset!");
static_assert(offsetof(UCC22, HitCounter_CC) == 0x000460, "Member 'UCC22::HitCounter_CC' has a wrong offset!");
static_assert(offsetof(UCC22, AllowAirWhip_CC) == 0x000464, "Member 'UCC22::AllowAirWhip_CC' has a wrong offset!");
static_assert(offsetof(UCC22, AllowDelayLoops_CC) == 0x000465, "Member 'UCC22::AllowDelayLoops_CC' has a wrong offset!");
static_assert(offsetof(UCC22, SetLinearDamping_CC) == 0x000468, "Member 'UCC22::SetLinearDamping_CC' has a wrong offset!");
static_assert(offsetof(UCC22, SetAngularDamping_CC) == 0x00046C, "Member 'UCC22::SetAngularDamping_CC' has a wrong offset!");
static_assert(offsetof(UCC22, SetMassScale_CC) == 0x000470, "Member 'UCC22::SetMassScale_CC' has a wrong offset!");
static_assert(offsetof(UCC22, InertiaTensorScale_CC) == 0x000474, "Member 'UCC22::InertiaTensorScale_CC' has a wrong offset!");
static_assert(offsetof(UCC22, VelocityDrive_CC) == 0x000478, "Member 'UCC22::VelocityDrive_CC' has a wrong offset!");
static_assert(offsetof(UCC22, AngularDrive_CC) == 0x00047C, "Member 'UCC22::AngularDrive_CC' has a wrong offset!");
static_assert(offsetof(UCC22, AngularSwing1Limit_CC) == 0x000480, "Member 'UCC22::AngularSwing1Limit_CC' has a wrong offset!");
static_assert(offsetof(UCC22, AngularSwing2Limit_CC) == 0x000484, "Member 'UCC22::AngularSwing2Limit_CC' has a wrong offset!");
static_assert(offsetof(UCC22, AngularTwistLimit_CC) == 0x000488, "Member 'UCC22::AngularTwistLimit_CC' has a wrong offset!");
static_assert(offsetof(UCC22, FirstUnitOrigin_Loc_EMov_CC) == 0x000490, "Member 'UCC22::FirstUnitOrigin_Loc_EMov_CC' has a wrong offset!");
static_assert(offsetof(UCC22, FirstUnitOrigin_Rot_EMov_CC) == 0x0004A8, "Member 'UCC22::FirstUnitOrigin_Rot_EMov_CC' has a wrong offset!");
static_assert(offsetof(UCC22, LastUnitOrigin_Loc_EMov_CC) == 0x0004C0, "Member 'UCC22::LastUnitOrigin_Loc_EMov_CC' has a wrong offset!");
static_assert(offsetof(UCC22, LastUnitOrigin_Rot_EMov_CC) == 0x0004D8, "Member 'UCC22::LastUnitOrigin_Rot_EMov_CC' has a wrong offset!");
static_assert(offsetof(UCC22, LastUnitTarget_Loc_EMov_CC) == 0x0004F0, "Member 'UCC22::LastUnitTarget_Loc_EMov_CC' has a wrong offset!");
static_assert(offsetof(UCC22, LastUnitTarget_Rot_EMov_CC) == 0x000508, "Member 'UCC22::LastUnitTarget_Rot_EMov_CC' has a wrong offset!");
static_assert(offsetof(UCC22, Begin_EMov_CC) == 0x000520, "Member 'UCC22::Begin_EMov_CC' has a wrong offset!");
static_assert(offsetof(UCC22, AllowFirstUnitRotate_Att_EMov_CC) == 0x000521, "Member 'UCC22::AllowFirstUnitRotate_Att_EMov_CC' has a wrong offset!");
static_assert(offsetof(UCC22, AllowFirstUnitRotate_Immobile_EMov_CC) == 0x000522, "Member 'UCC22::AllowFirstUnitRotate_Immobile_EMov_CC' has a wrong offset!");
static_assert(offsetof(UCC22, LerpValue_EMov_CC) == 0x000524, "Member 'UCC22::LerpValue_EMov_CC' has a wrong offset!");
static_assert(offsetof(UCC22, TimerDelay_EMov_CC) == 0x000528, "Member 'UCC22::TimerDelay_EMov_CC' has a wrong offset!");
static_assert(offsetof(UCC22, FirstUnitOrigin_Loc_SMov_CC) == 0x000530, "Member 'UCC22::FirstUnitOrigin_Loc_SMov_CC' has a wrong offset!");
static_assert(offsetof(UCC22, FirstUnitOrigin_Rot_SMov_CC) == 0x000548, "Member 'UCC22::FirstUnitOrigin_Rot_SMov_CC' has a wrong offset!");
static_assert(offsetof(UCC22, LastUnitOrigin_Loc_SMov_CC) == 0x000560, "Member 'UCC22::LastUnitOrigin_Loc_SMov_CC' has a wrong offset!");
static_assert(offsetof(UCC22, LastUnitOrigin_Rot_SMov_CC) == 0x000578, "Member 'UCC22::LastUnitOrigin_Rot_SMov_CC' has a wrong offset!");
static_assert(offsetof(UCC22, FirstUnitTarget_Loc_SMov_CC) == 0x000590, "Member 'UCC22::FirstUnitTarget_Loc_SMov_CC' has a wrong offset!");
static_assert(offsetof(UCC22, FirstUnitTarget_Rot_SMov_CC) == 0x0005A8, "Member 'UCC22::FirstUnitTarget_Rot_SMov_CC' has a wrong offset!");
static_assert(offsetof(UCC22, FirstUnitTarget_RotInvert_SMov_CC) == 0x0005C0, "Member 'UCC22::FirstUnitTarget_RotInvert_SMov_CC' has a wrong offset!");
static_assert(offsetof(UCC22, Begin_SMov_CC) == 0x0005D8, "Member 'UCC22::Begin_SMov_CC' has a wrong offset!");
static_assert(offsetof(UCC22, AllowFirstUnitRotate_Att_SMov_CC) == 0x0005D9, "Member 'UCC22::AllowFirstUnitRotate_Att_SMov_CC' has a wrong offset!");
static_assert(offsetof(UCC22, AllowFirstUnitRotate_Immobile_SMov_CC) == 0x0005DA, "Member 'UCC22::AllowFirstUnitRotate_Immobile_SMov_CC' has a wrong offset!");
static_assert(offsetof(UCC22, LerpValue_SMov_CC) == 0x0005DC, "Member 'UCC22::LerpValue_SMov_CC' has a wrong offset!");
static_assert(offsetof(UCC22, TimerDelay_SMov_CC) == 0x0005E0, "Member 'UCC22::TimerDelay_SMov_CC' has a wrong offset!");
static_assert(offsetof(UCC22, ChainMeshPR_CC) == 0x0005E8, "Member 'UCC22::ChainMeshPR_CC' has a wrong offset!");
static_assert(offsetof(UCC22, FalseChainMeshPR_CC) == 0x0005F0, "Member 'UCC22::FalseChainMeshPR_CC' has a wrong offset!");
static_assert(offsetof(UCC22, First_ChainMeshPR_CC) == 0x0005F8, "Member 'UCC22::First_ChainMeshPR_CC' has a wrong offset!");
static_assert(offsetof(UCC22, LastChainMeshPR_CC) == 0x000600, "Member 'UCC22::LastChainMeshPR_CC' has a wrong offset!");
static_assert(offsetof(UCC22, PhysicsConstraintPR_CC) == 0x000608, "Member 'UCC22::PhysicsConstraintPR_CC' has a wrong offset!");
static_assert(offsetof(UCC22, BuildingSplinePR_CC) == 0x000610, "Member 'UCC22::BuildingSplinePR_CC' has a wrong offset!");
static_assert(offsetof(UCC22, DataSplinePR_CC) == 0x000618, "Member 'UCC22::DataSplinePR_CC' has a wrong offset!");
static_assert(offsetof(UCC22, DataSplineDestroyPR_CC) == 0x000620, "Member 'UCC22::DataSplineDestroyPR_CC' has a wrong offset!");
static_assert(offsetof(UCC22, StartPrimitive_CC) == 0x000628, "Member 'UCC22::StartPrimitive_CC' has a wrong offset!");
static_assert(offsetof(UCC22, StartPhyConstrPR_CC) == 0x000630, "Member 'UCC22::StartPhyConstrPR_CC' has a wrong offset!");
static_assert(offsetof(UCC22, StartSkeletalMesh_CC) == 0x000638, "Member 'UCC22::StartSkeletalMesh_CC' has a wrong offset!");
static_assert(offsetof(UCC22, EndPrimitive_CC) == 0x000640, "Member 'UCC22::EndPrimitive_CC' has a wrong offset!");
static_assert(offsetof(UCC22, EndPhyConstrPR_CC) == 0x000648, "Member 'UCC22::EndPhyConstrPR_CC' has a wrong offset!");
static_assert(offsetof(UCC22, EndSkeletalMesh_CC) == 0x000650, "Member 'UCC22::EndSkeletalMesh_CC' has a wrong offset!");
static_assert(offsetof(UCC22, FirstUnitPinMeshPR_CC) == 0x000658, "Member 'UCC22::FirstUnitPinMeshPR_CC' has a wrong offset!");
static_assert(offsetof(UCC22, FirstUnitPinPhyConstrPR_CC) == 0x000660, "Member 'UCC22::FirstUnitPinPhyConstrPR_CC' has a wrong offset!");
static_assert(offsetof(UCC22, LastUnitPinMeshPR_CC) == 0x000668, "Member 'UCC22::LastUnitPinMeshPR_CC' has a wrong offset!");
static_assert(offsetof(UCC22, LastUnitPinPhyConstrPR_CC) == 0x000670, "Member 'UCC22::LastUnitPinPhyConstrPR_CC' has a wrong offset!");
static_assert(offsetof(UCC22, ChainTrackerPR_CC) == 0x000678, "Member 'UCC22::ChainTrackerPR_CC' has a wrong offset!");
static_assert(offsetof(UCC22, ChainRattleSoundSpawn_CC) == 0x000680, "Member 'UCC22::ChainRattleSoundSpawn_CC' has a wrong offset!");
static_assert(offsetof(UCC22, GrabPhyConstrPR_CC) == 0x000688, "Member 'UCC22::GrabPhyConstrPR_CC' has a wrong offset!");
static_assert(offsetof(UCC22, CutChainEmitterSpawn_CC) == 0x000690, "Member 'UCC22::CutChainEmitterSpawn_CC' has a wrong offset!");
static_assert(offsetof(UCC22, CutChainSoundSpawn_CC) == 0x000698, "Member 'UCC22::CutChainSoundSpawn_CC' has a wrong offset!");
static_assert(offsetof(UCC22, WeakImpactEmitterSpawn_CC) == 0x0006A0, "Member 'UCC22::WeakImpactEmitterSpawn_CC' has a wrong offset!");
static_assert(offsetof(UCC22, WeakImpactSoundSpawn_CC) == 0x0006A8, "Member 'UCC22::WeakImpactSoundSpawn_CC' has a wrong offset!");
static_assert(offsetof(UCC22, SplineLookupArray_CC) == 0x0006B0, "Member 'UCC22::SplineLookupArray_CC' has a wrong offset!");
static_assert(offsetof(UCC22, StartPrimitiveLookupArray_CC) == 0x0006C0, "Member 'UCC22::StartPrimitiveLookupArray_CC' has a wrong offset!");
static_assert(offsetof(UCC22, StartPrimitiveFNameArray_CC) == 0x0006D0, "Member 'UCC22::StartPrimitiveFNameArray_CC' has a wrong offset!");
static_assert(offsetof(UCC22, StartPrimitiveBoneFNameArray_CC) == 0x0006E0, "Member 'UCC22::StartPrimitiveBoneFNameArray_CC' has a wrong offset!");
static_assert(offsetof(UCC22, EndPrimitiveLookupArray_CC) == 0x0006F0, "Member 'UCC22::EndPrimitiveLookupArray_CC' has a wrong offset!");
static_assert(offsetof(UCC22, EndPrimitiveFNameArray_CC) == 0x000700, "Member 'UCC22::EndPrimitiveFNameArray_CC' has a wrong offset!");
static_assert(offsetof(UCC22, EndPrimitiveBoneFNameArray_CC) == 0x000710, "Member 'UCC22::EndPrimitiveBoneFNameArray_CC' has a wrong offset!");
static_assert(offsetof(UCC22, ChainMeshArray_CC) == 0x000720, "Member 'UCC22::ChainMeshArray_CC' has a wrong offset!");
static_assert(offsetof(UCC22, CutMeshArray_CC) == 0x000730, "Member 'UCC22::CutMeshArray_CC' has a wrong offset!");
static_assert(offsetof(UCC22, FalseChainMeshArray_CC) == 0x000740, "Member 'UCC22::FalseChainMeshArray_CC' has a wrong offset!");
static_assert(offsetof(UCC22, PhysicsConstraintArray_CC) == 0x000750, "Member 'UCC22::PhysicsConstraintArray_CC' has a wrong offset!");
static_assert(offsetof(UCC22, RuntimeSoundArray_CC) == 0x000760, "Member 'UCC22::RuntimeSoundArray_CC' has a wrong offset!");
static_assert(offsetof(UCC22, RuntimeEmitterArray_CC) == 0x000770, "Member 'UCC22::RuntimeEmitterArray_CC' has a wrong offset!");
static_assert(offsetof(UCC22, TrackerArray_CC) == 0x000780, "Member 'UCC22::TrackerArray_CC' has a wrong offset!");
static_assert(offsetof(UCC22, AllowVelocityChecks_CC) == 0x0007C8, "Member 'UCC22::AllowVelocityChecks_CC' has a wrong offset!");

// Class RopeCutting.CC22Tracker
// 0x0010 (0x00B0 - 0x00A0)
class UCC22Tracker final : public UActorComponent
{
public:
	class UStaticMeshComponent*                   FirstChainLinkMeshPR_CCT;                          // 0x00A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   LastChainLinkMeshPR_CCT;                           // 0x00A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CC22Tracker">();
	}
	static class UCC22Tracker* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCC22Tracker>();
	}
};
static_assert(alignof(UCC22Tracker) == 0x000008, "Wrong alignment on UCC22Tracker");
static_assert(sizeof(UCC22Tracker) == 0x0000B0, "Wrong size on UCC22Tracker");
static_assert(offsetof(UCC22Tracker, FirstChainLinkMeshPR_CCT) == 0x0000A0, "Member 'UCC22Tracker::FirstChainLinkMeshPR_CCT' has a wrong offset!");
static_assert(offsetof(UCC22Tracker, LastChainLinkMeshPR_CCT) == 0x0000A8, "Member 'UCC22Tracker::LastChainLinkMeshPR_CCT' has a wrong offset!");

// Class RopeCutting.RC22
// 0x0A50 (0x0CF0 - 0x02A0)
class URC22 final : public USceneComponent
{
public:
	bool                                          SpawnAtRuntime;                                    // 0x02A0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1958[0x3];                                     // 0x02A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxNumberOfUnits;                                  // 0x02A4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RopeUpdateRate;                                    // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RopeUnitLength;                                    // 0x02AC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            RopeMeshModel;                                     // 0x02B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     RopeMeshMaterial01;                                // 0x02B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     RopeMeshMaterial02;                                // 0x02C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeshWidth;                                         // 0x02C8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1959[0x4];                                     // 0x02CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            FirstRopeMeshModel;                                // 0x02D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     FirstRopeMeshMaterial01;                           // 0x02D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     FirstRopeMeshMaterial02;                           // 0x02E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FirstMeshWidth;                                    // 0x02E8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_195A[0x4];                                     // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            LastRopeMeshModel;                                 // 0x02F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     LastRopeMeshMaterial01;                            // 0x02F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     LastRopeMeshMaterial02;                            // 0x0300(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastMeshWidth;                                     // 0x0308(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_195B[0x4];                                     // 0x030C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                EndLocation;                                       // 0x0310(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSplineComponent;                                // 0x0328(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_195C[0x3];                                     // 0x0329(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SplineComponentName;                               // 0x032C(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_195D[0x4];                                     // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RopeOffset;                                        // 0x0338(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StartImmobilised;                                  // 0x0350(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StartFurtherImmobilised;                           // 0x0351(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncreaseStartRigidity;                             // 0x0352(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EndImmobilised;                                    // 0x0353(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EndFurtherImmobilised;                             // 0x0354(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncreaseEndRigidity;                               // 0x0355(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_195E[0x2];                                     // 0x0356(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            TwoXMeshModel;                                     // 0x0358(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     TwoXMeshMat01;                                     // 0x0360(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     TwoXMeshMat02;                                     // 0x0368(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TwoXMeshWidth;                                     // 0x0370(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_195F[0x4];                                     // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            ThreeXMeshModel;                                   // 0x0378(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ThreeXMeshMat01;                                   // 0x0380(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ThreeXMeshMat02;                                   // 0x0388(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThreeXMeshWidth;                                   // 0x0390(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1960[0x4];                                     // 0x0394(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            FourXMeshModel;                                    // 0x0398(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     FourXMeshMat01;                                    // 0x03A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     FourXMeshMat02;                                    // 0x03A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FourXMeshWidth;                                    // 0x03B0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AttachStartMesh;                                   // 0x03B4(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1961[0x3];                                     // 0x03B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   StartMeshName;                                     // 0x03B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartSocket;                                       // 0x03C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartBone;                                         // 0x03C8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AddSecondConstraintStartAnchor;                    // 0x03D0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AttachEndMesh;                                     // 0x03D1(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1962[0x2];                                     // 0x03D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EndMeshName;                                       // 0x03D4(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndSocket;                                         // 0x03DC(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndBone;                                           // 0x03E4(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AddSecondConstraintEndAnchor;                      // 0x03EC(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanCutRope;                                        // 0x03ED(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1963[0x2];                                     // 0x03EE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CuttingForceThreshold;                             // 0x03F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CuttingResetDelay;                                 // 0x03F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SwitchMeshOnCut;                                   // 0x03F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1964[0x7];                                     // 0x03F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            CutRopeModelLeft;                                  // 0x0400(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            CutRopeModelRight;                                 // 0x0408(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            CutRopeModelBothEnds;                              // 0x0410(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SwitchFirstMeshOnCut;                              // 0x0418(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SwitchLastMeshOnCut;                               // 0x0419(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableEmitterOnCut;                                // 0x041A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1965[0x5];                                     // 0x041B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        CutRopeEmitter;                                    // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableSoundOnCut;                                  // 0x0428(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1966[0x7];                                     // 0x0429(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              CutRopeSound;                                      // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableVelocityTracking;                            // 0x0438(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableRopeCreak;                                   // 0x0439(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1967[0x6];                                     // 0x043A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              RopeCreakSound;                                    // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RopeCreakMinVelocity;                              // 0x0448(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RopeCreakRate;                                     // 0x044C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CreakMinimumropeLength;                            // 0x0450(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CreakPitchModulationMin;                           // 0x0454(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CreakPitchModulationMax;                           // 0x0458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CreakVolumeModulationMin;                          // 0x045C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CreakVolumeModulationMax;                          // 0x0460(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableRopeAirWhip;                                 // 0x0464(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1968[0x3];                                     // 0x0465(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              RopeAirWhipSound;                                  // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RopeAirWhipMinVelocity;                            // 0x0470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RopeAirWhipRate;                                   // 0x0474(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirWhipPitchModulationMin;                         // 0x0478(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirWhipPitchModulationMax;                         // 0x047C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirWhipVolumeModulationMin;                        // 0x0480(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirWhipVolumeModulationMax;                        // 0x0484(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AirWhipMinimumropeLength;                          // 0x0488(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpactForceThreshold;                              // 0x048C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpactResetDelay;                                  // 0x0490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableImpactSound;                                 // 0x0494(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1969[0x3];                                     // 0x0495(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              ImpactSound;                                       // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableImpactEmitter;                               // 0x04A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_196A[0x7];                                     // 0x04A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        ImpactEmitter;                                     // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanGrab;                                           // 0x04B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_196B[0x3];                                     // 0x04B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Elasticity;                                        // 0x04B4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RigidnessScale;                                    // 0x04B8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionScaleAdjustment;                          // 0x04BC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                      RopePhysicalMaterial;                              // 0x04C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StabilizationThresholdMultiplier_RC22;             // 0x04C8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionSolverIterationCount_RC22;                 // 0x04CC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocitySolverIterationCount_RC22;                 // 0x04D0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PhysicsEnabled;                                    // 0x04D4(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GravityEnabled;                                    // 0x04D5(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceDistanceLock;                                 // 0x04D6(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableSelfCollision;                              // 0x04D7(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverrideRigidnessScale;                            // 0x04D8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_196C[0x3];                                     // 0x04D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SetLinearDamping_Override;                         // 0x04DC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SetAngularDamping_Override;                        // 0x04E0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SetMassScale_Override;                             // 0x04E4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InertiaTensorScale_Override;                       // 0x04E8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularDrivePositionStrength_Override;             // 0x04EC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularDriveVelocityStrength_Override;             // 0x04F0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularSwing1Limit_Override;                       // 0x04F4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularSwing2Limit_Override;                       // 0x04F8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularTwistLimit_Override;                        // 0x04FC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SetSplineStartLocation;                            // 0x0500(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_196D[0x7];                                     // 0x0501(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SplineStartLocation;                               // 0x0508(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SetSplineEndLocation;                              // 0x0520(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_196E[0x7];                                     // 0x0521(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SplineEndLocation;                                 // 0x0528(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowCollisionSpheres;                              // 0x0540(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowSplines;                                       // 0x0541(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OffsetBuildingSpline;                              // 0x0542(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCut_RC;                                          // 0x0543(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfCuts_RC;                                   // 0x0544(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ImpactCounter_RC;                                  // 0x0548(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForceOfHit_RC;                                     // 0x054C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USphereComponent*                       HitCollisionSphere_PR_RC;                          // 0x0550(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPrimitiveComponent*                    OtherComponent_Hit_PR_RC;                          // 0x0558(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                     FirstAndLastDefaultMat_RC;                         // 0x0560(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAudioComponent*                        RopeCreakSoundSpawn_RC;                            // 0x0568(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UAudioComponent*>                RopeCreakSoundArray_RC;                            // 0x0570(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_196F[0x10];                                    // 0x0580(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          AllowVelocityChecks_RC;                            // 0x0590(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          AllowAirWhip_RC;                                   // 0x0591(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          AllowDelayLoops_RC;                                // 0x0592(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1970[0xD];                                     // 0x0593(0x000D)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShrinkCollLinearDampeningValue_RC;                 // 0x05A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          IsShrinking_RC;                                    // 0x05A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1971[0x3];                                     // 0x05A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ForceOfExtraction_RC;                              // 0x05A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ShrinkLoopDelay_RC;                                // 0x05AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                ShrinkOriginLocation_RC;                           // 0x05B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRotator                               ShrinkOriginRotation_RC;                           // 0x05C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FVector                                ShrinkTargetLocation_RC;                           // 0x05E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRotator                               ShrinkTargetRotation_RC;                           // 0x05F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	float                                         ShrinkRopeLerpValue;                               // 0x0610(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          IsMovingShrinkRope_RC;                             // 0x0614(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1972[0xB];                                     // 0x0615(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          IsMovingGrowRope_RC;                               // 0x0620(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1973[0x3];                                     // 0x0621(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GrowRopeMoveLerpValue_RC;                          // 0x0624(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          IsStartMobile_Grow_RC;                             // 0x0628(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          IsGrowing_RC;                                      // 0x0629(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          IsRunningGrowMainFunction_RC;                      // 0x062A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1974[0x1];                                     // 0x062B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GrowLoopDelay_RC;                                  // 0x062C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         GrowCounter_RC;                                    // 0x0630(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MeshPropertyCounter_RC;                            // 0x0634(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                GrowStartLocation_RC;                              // 0x0638(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRotator                               GrowStartRotation_RC;                              // 0x0650(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FVector                                GrowTargetLocation_RC;                             // 0x0668(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URC22Tracker*                           FirstTracker_PR_RC;                                // 0x0680(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USplineComponent*                       GrowSplineComponent_PR_RC;                         // 0x0688(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USplineMeshComponent*                   GrowSplineMesh_PR_RC;                              // 0x0690(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPhysicsConstraintComponent*            GrowPhyConstraint_PR_RC;                           // 0x0698(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USphereComponent*                       GrowCollision_PR_RC;                               // 0x06A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1975[0x10];                                    // 0x06A8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FirstUnitOrigin_Loc_EMov_CC;                       // 0x06B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRotator                               FirstUnitOrigin_Rot_EMov_CC;                       // 0x06D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FVector                                LastUnitOrigin_Loc_EMov_CC;                        // 0x06E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRotator                               LastUnitOrigin_Rot_EMov_CC;                        // 0x0700(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FVector                                LastUnitTarget_Loc_EMov_CC;                        // 0x0718(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRotator                               LastUnitTarget_Rot_EMov_CC;                        // 0x0730(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	bool                                          Begin_EMov_CC;                                     // 0x0748(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          AllowFirstUnitRotate_Att_EMov_CC;                  // 0x0749(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          AllowFirstUnitRotate_Immobile_EMov_CC;             // 0x074A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1976[0x1];                                     // 0x074B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LerpValue_EMov_CC;                                 // 0x074C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TimerDelay_EMov_CC;                                // 0x0750(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1977[0x4];                                     // 0x0754(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FirstUnitOrigin_Loc_SMov_CC;                       // 0x0758(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRotator                               FirstUnitOrigin_Rot_SMov_CC;                       // 0x0770(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FVector                                LastUnitOrigin_Loc_SMov_CC;                        // 0x0788(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRotator                               LastUnitOrigin_Rot_SMov_CC;                        // 0x07A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FVector                                FirstUnitTarget_Loc_SMov_CC;                       // 0x07B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRotator                               FirstUnitTarget_Rot_SMov_CC;                       // 0x07D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FRotator                               FirstUnitTarget_RotInvert_SMov_CC;                 // 0x07E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	bool                                          Begin_SMov_CC;                                     // 0x0800(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          AllowFirstUnitRotate_Att_SMov_CC;                  // 0x0801(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          AllowFirstUnitRotate_Immobile_SMov_CC;             // 0x0802(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1978[0x1];                                     // 0x0803(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LerpValue_SMov_CC;                                 // 0x0804(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TimerDelay_SMov_CC;                                // 0x0808(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1979[0x4];                                     // 0x080C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            DefaultRopeMeshModel;                              // 0x0810(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMesh*                            DefaultCutRopeLeftModel;                           // 0x0818(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMesh*                            DefaultCutRopeRightModel;                          // 0x0820(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMesh*                            DefaultCutRopeBothModel;                           // 0x0828(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LinearLimit_RC;                                    // 0x0830(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LinearDrive_RC;                                    // 0x0834(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_197A[0x20];                                    // 0x0838(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          AllowCutting_RC;                                   // 0x0858(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_197B[0x3];                                     // 0x0859(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MeshBoundsSize;                                    // 0x085C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          HasGrabbed_RC;                                     // 0x0860(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_197C[0x3];                                     // 0x0861(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GrabDistanceFromSplineStart;                       // 0x0864(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         GrabDistanceFromSplineEnd;                         // 0x0868(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_197D[0x4];                                     // 0x086C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           StartPrimitiveFNameArray_RC;                       // 0x0870(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           StartPrimitiveBoneFNameArray_RC;                   // 0x0880(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	bool                                          StartPrimitiveFound;                               // 0x0890(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          IsStartPrimitiveSkeletal_RC;                       // 0x0891(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_197E[0x6];                                     // 0x0892(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           EndPrimitiveFNameArray_RC;                         // 0x0898(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           EndPrimitiveBoneFNameArray_RC;                     // 0x08A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	bool                                          EndPrimitiveFound;                                 // 0x08B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          IsEndPrimitiveSkeletal_RC;                         // 0x08B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          AllowImpactEvent_RC;                               // 0x08BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_197F[0x15];                                    // 0x08BB(0x0015)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CuttingQuedHitComp;                                // 0x08D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                 CuttingQuedOtherActor;                             // 0x08D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPrimitiveComponent*                    CuttingQuedOtherComp;                              // 0x08E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                CuttingQuedNormalImpulse;                          // 0x08E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FHitResult                             CuttingQuedHit;                                    // 0x0900(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	bool                                          HasBeenCut_RC;                                     // 0x09E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1980[0x3];                                     // 0x09E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SetLinearDamping_RC;                               // 0x09EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SetAngularDamping_RC;                              // 0x09F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SetMassScale_RC;                                   // 0x09F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         InertiaTensorScale_RC;                             // 0x09F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AngularDriveVelocityStrengthRC;                    // 0x09FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AngularDrivePositionStrengthRC;                    // 0x0A00(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AngularSwing1Limit_RC;                             // 0x0A04(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AngularSwing2Limit_RC;                             // 0x0A08(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AngularTwistLimit_RC;                              // 0x0A0C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                CollUnitScale_RC;                                  // 0x0A10(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class URC22Tracker*>                   TrackerArray_PR_RC;                                // 0x0A28(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class USplineMeshComponent*>           SplineMeshArray_PR_RC;                             // 0x0A38(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UPhysicsConstraintComponent*>    PhysicsConstraintArray_PR_RC;                      // 0x0A48(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class USphereComponent*>               CollisionSphereArray_PR_RC;                        // 0x0A58(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class USphereComponent*>               TargetCollisionArray_RL;                           // 0x0A68(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class USplineMeshComponent*>           TargetSplineMeshArray_RL;                          // 0x0A78(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class USplineMeshComponent*                   SplineMesh_PR_RC;                                  // 0x0A88(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UParticleSystemComponent*               Emitter_PR_RC;                                     // 0x0A90(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UParticleSystemComponent*>       EmitterArray_PR_RC;                                // 0x0A98(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class UAudioComponent*                        Sound_PR_RC;                                       // 0x0AA8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UAudioComponent*>                SoundArray_PR_RC;                                  // 0x0AB0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class USphereComponent*                       SphereColl_PR_RC;                                  // 0x0AC0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPhysicsConstraintComponent*            PhysicsConstr_PR_RC;                               // 0x0AC8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URC22Tracker*                           DataTracker_PR_RC;                                 // 0x0AD0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USplineComponent*                       TargetSpline_RL;                                   // 0x0AD8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USplineMeshComponent*                   TargetSplineMesh_RL;                               // 0x0AE0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USplineComponent*                       RenderSpline_PR_RC;                                // 0x0AE8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USplineComponent*                       BuildingSpline_PR_RC;                              // 0x0AF0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USphereComponent*                       LastSphereColl_Grab_PR_RC;                         // 0x0AF8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPhysicsConstraintComponent*            GrabPhyConstr_PR_RC;                               // 0x0B00(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USplineComponent*                       GrabDistanceSpline_PR_RC;                          // 0x0B08(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          Grab_PartOfFirstLength_RC;                         // 0x0B10(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1981[0x3];                                     // 0x0B11(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Grab_PositioNumber_RC;                             // 0x0B14(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USplineMeshComponent*                   FirstSplineMesh_RC;                                // 0x0B18(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USplineMeshComponent*                   LastSplineMesh_RC;                                 // 0x0B20(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URC22Tracker*                           HitTracker_Cut_RC;                                 // 0x0B28(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USplineComponent*                       CuttingTargetSpline_Cut_RC;                        // 0x0B30(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USplineComponent*                       GeneratedSpline_Cut_RC;                            // 0x0B38(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URC22Tracker*                           GeneratedTracker_Cut_RC;                           // 0x0B40(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class USphereComponent*>               TargetCollisionArray_Cut_RC;                       // 0x0B48(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class USplineMeshComponent*>           TargetSplineMeshArray_Cut_RC;                      // 0x0B58(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UPhysicsConstraintComponent*>    TargetConstraintArray_Cut_RC;                      // 0x0B68(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class USphereComponent*                       SecondEndConstraintSphereColl_PR_RC;               // 0x0B78(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1982[0x20];                                    // 0x0B80(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class USphereComponent*                       HitCollSphere_PR_RC;                               // 0x0BA0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URC22Tracker*                           ReceivingTracker_PR_RC;                            // 0x0BA8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URC22Tracker*                           DonatingTracker_PR_RC;                             // 0x0BB0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USplineComponent*                       ReceivingSpline_PR_RC;                             // 0x0BB8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USplineComponent*                       DonatingSpline_PR_RC;                              // 0x0BC0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPhysicsConstraintComponent*            HitPhyConstr_PR_RC;                                // 0x0BC8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USphereComponent*                       ReceivingColl_PR_RC;                               // 0x0BD0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USphereComponent*                       ReplacementColl_PR_RC;                             // 0x0BD8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPhysicsConstraintComponent*            StartAnchorPhyConstr_PR_RC;                        // 0x0BE0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPhysicsConstraintComponent*            EndAnchorPhyConstr_PR_RC;                          // 0x0BE8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPhysicsConstraintComponent*            StartAnchorPhyConstrSecond_PR_RC;                  // 0x0BF0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPhysicsConstraintComponent*            EndAnchorPhyConstrSecond_PR_RC;                    // 0x0BF8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USplineComponent*                       DataSpline_PR_RC;                                  // 0x0C00(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class USplineComponent*>               SplineLookupArray_PR_RC;                           // 0x0C08(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UPrimitiveComponent*>            StartAnchorPrimitiveLookupArray_PR_RC;             // 0x0C18(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class UPrimitiveComponent*                    StartAnchorPrimitive_PR_RC;                        // 0x0C28(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USkeletalMeshComponent*                 StartAnchorSkeletalMesh_PR_RC;                     // 0x0C30(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UPrimitiveComponent*>            EndAnchorPrimitiveLookupArray_PR_RC;               // 0x0C38(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class UPrimitiveComponent*                    EndAnchorPrimitive_PR_RC;                          // 0x0C48(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USkeletalMeshComponent*                 EndAnchorSkeletalMesh_PR_RC;                       // 0x0C50(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                SplineMeshStartLoc_RL;                             // 0x0C58(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                SplineMeshStartTangent_RL;                         // 0x0C70(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                SplineMeshEndLoc_RL;                               // 0x0C88(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                SplineMeshEndTangent_RL;                           // 0x0CA0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                SplineMeshUpDir_RL;                                // 0x0CB8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         UnitLength_RC;                                     // 0x0CD0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          HasBuilt_RC;                                       // 0x0CD4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          UsedInGame_RC;                                     // 0x0CD5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1983[0xA];                                     // 0x0CD6(0x000A)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          BlockRuntimeUpdate_RC;                             // 0x0CE0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1984[0xF];                                     // 0x0CE1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void AddPointsToBuildingSpline(class USplineComponent* SplineToGrow, const int32 NumberOfLoopsAPTSIn, const float UnitLengthAPTSIn);
	static void AddPointsToSpline(class USplineComponent* SplineToGrow, class USplineComponent* UserSplineCRSIn, const int32 NumberOfLoopsAPTSIn, const float UnitLengthAPTSIn, const struct FVector& RopeOffsetAPTSIn);
	static void AdjustRenderSplineLocation(class USplineComponent* RenderSpline, class USplineComponent* UserSpline, class UPrimitiveComponent* AttachedPrimitive, const int32 NumberOfLoops, const class FName SocketName);
	static void CreateSphereCollision(class USphereComponent* SphereCollisionCSCIn, class UWorld* WorldRefCSCIn, class USplineComponent* SplineRefCSCIn);
	static void CreateSpline(class USplineComponent* InSplineCS, const struct FVector& WorldLocationCS, const struct FRotator& WorldRotationCS, class UWorld* WorldRefCSIn, class USceneComponent* SelfRefCSIn);
	static void CreateSplineMeshes(class USplineMeshComponent* SplineMeshCSMInput, class UWorld* WorldRefCSMIn, class USplineComponent* SplineOwnerRefCSMIn);
	static void MakePhysConstr(class UPhysicsConstraintComponent* PhyConstrMPCIn, class UWorld* WorldRefMPCIn, const struct FVector& WorldLocationMPCIn, class USphereComponent* CollRefAttachMPCIn);
	static void Mesh_RC(class USplineMeshComponent* SplineMeshToConfigure, class UStaticMesh* MeshModel, float MeshWidth_Config, class UMaterialInterface* MeshMat01, class UMaterialInterface* MeshMat02);
	static void PhyConstrConfig(class UPhysicsConstraintComponent* PhyConstrIn, float SetAngularSwing1LimitPCCIn, float SetAngularSwing2LimitPCCIn, float SetAngularTwistLimitPCCIn, float AngularDrivePositionStrengthPCCIn, float AngularDriveVelocityStrengthPCCIn, float LinearLimit, float LinearDrive);
	static void SetSplMLocTang(class USplineComponent* ITargetSpline, class USplineMeshComponent* InTargetSplM, const int32 IEditPoint, const float UnitLengthSSMLTIn);
	static void SplineUpDir(class USplineComponent* ITargetSpline, const float ISplineUpDirClamp);
	static void TransferSphereCollision(class USphereComponent* SphereCollisionArrayTSCIn, class USplineComponent* TargetSplineTSCIn, const int32 EditPoint);
	static void TransferSplineMeshes(class USplineMeshComponent* SplMeshArrayTSMIn, class USplineComponent* TargetSplineTSMIn, const float UnitLengthTSMIn, const int32 IEditPoint);

	void AllowAirWhipFunction_RC();
	void AttachRopeEnd_RC(class UPrimitiveComponent* MeshToAttach, class FName SocketName, class FName BoneName);
	void AttachRopeStart_RC(class UPrimitiveComponent* MeshToAttach, class FName SocketName, class FName BoneName);
	void BreakEndAnchorConstraint_RC();
	void BreakStartAnchorConstraint_RC();
	void Build_RC();
	void BuildRope_RC();
	void ConfigDataSpline_RC();
	void ConfigMinMaxValues_RC();
	const class FName CreateUniqueName(const class FString& ComponentType, const int32 ComponentNumber);
	void CutRopeUsingCollision_RC(class USphereComponent* ChosenCollisionSphere);
	void CutRopeUsingNumber_RC(int32 ChosenPosition);
	void Drop_RC();
	void EndGrowRope_RC();
	void EndShrinkRope_RC();
	void EnsureProperReset_RC();
	void GameBegun_RC();
	TArray<class USphereComponent*> GetCollisionArray_RC();
	class UPhysicsConstraintComponent* GetEndAnchorConstraint_RC();
	class USphereComponent* GetFirstCollisionSphere_RC();
	class USphereComponent* GetLastCollisionSphere_RC();
	TArray<class UPhysicsConstraintComponent*> GetPhysicsConstraintArray_RC();
	class USplineComponent* GetSplineComponent_RC();
	TArray<class USplineMeshComponent*> GetSplineMeshArray_RC();
	class UPhysicsConstraintComponent* GetStartAnchorConstraint_RC();
	void GrabDistanceCheck_RC();
	void GrabLoopReset_RC();
	void GrowRope_RC(float RateOfAddition);
	void GrowRopeMainFunction_RC();
	void GrowShiftRopeAlong_RC();
	void ImmobiliseEnd_RC(bool FurtherImmobiliseRopeEnd);
	void ImmobiliseStart_RC(bool FurtherImmobiliseRopeStart);
	void ImpactRateControl_RC();
	void InitialiseCollisionSphereRC();
	void InitiateCut_RC();
	void InitiateGrab_RC();
	void InitiateImpact_RC();
	void MobiliseEnd_RC();
	void MobiliseStart_RC();
	void MoveEndOfRope_RC(const struct FVector& MoveToLocation, float DurationOfMove, bool AllowStartRotationAttached, bool AllowStartRotationImmobilised);
	void MoveEndOfRopePassBack_RC();
	void MoveShrinkRope_RC();
	void MoveStartOfRope_RC(const struct FVector& MoveToLocation, float DurationOfMove, bool AllowEndRotationAttached, bool AllowEndRotationImmobilised);
	void MoveStartOfRopePassBack_RC();
	void OnAirWhipResetDelay_RC();
	void OnCompHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnCutResetDelayEnd_RC();
	void OnDelayCollisionInitialisation();
	void OnGrabDistanceCheckEnd();
	void OnGrabLoopResetEnd();
	void OnImpactDelayEnd();
	void OnMoveEndOfRopeTimer();
	void OnMoveGrowRopeTimer();
	void OnMoveShrinkTimer();
	void OnMoveStartOfRopeTimer();
	void OnTimerEnd();
	void OnVelocityCheckDelay();
	void ResetCuttingLoop_RC();
	void ResetRopeAfterMove_RC(bool ImmobiliseStart, bool ImmobiliseEnd);
	void RuntimeUpdate();
	void ScalePhysicsParameters_RC();
	void ShrinkRope_RC(float RateOfSubtraction);
	void ShrinkRopeMainFunction_RC();
	void SphereCollisionConfig(bool ShouldBlock, bool SimPhysics, class USphereComponent* SphereCollisionIn, float AngularDampeningSCCIn, float LinearDampeningSCCIn, float PositionSolverSCCIn, float VelocitySolverSCCIn, float StabilizationThresholdMultiplierSCCIn, float SleepThresholdMultiplierSCCIn, float InertiaTensorScaleSCCIn, float CollUnitScaleSCCIn, float Mass, float MassScale);
	void UpdateSplOrCut();
	void VelocityCheck_RC();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RC22">();
	}
	static class URC22* GetDefaultObj()
	{
		return GetDefaultObjImpl<URC22>();
	}
};
static_assert(alignof(URC22) == 0x000010, "Wrong alignment on URC22");
static_assert(sizeof(URC22) == 0x000CF0, "Wrong size on URC22");
static_assert(offsetof(URC22, SpawnAtRuntime) == 0x0002A0, "Member 'URC22::SpawnAtRuntime' has a wrong offset!");
static_assert(offsetof(URC22, MaxNumberOfUnits) == 0x0002A4, "Member 'URC22::MaxNumberOfUnits' has a wrong offset!");
static_assert(offsetof(URC22, RopeUpdateRate) == 0x0002A8, "Member 'URC22::RopeUpdateRate' has a wrong offset!");
static_assert(offsetof(URC22, RopeUnitLength) == 0x0002AC, "Member 'URC22::RopeUnitLength' has a wrong offset!");
static_assert(offsetof(URC22, RopeMeshModel) == 0x0002B0, "Member 'URC22::RopeMeshModel' has a wrong offset!");
static_assert(offsetof(URC22, RopeMeshMaterial01) == 0x0002B8, "Member 'URC22::RopeMeshMaterial01' has a wrong offset!");
static_assert(offsetof(URC22, RopeMeshMaterial02) == 0x0002C0, "Member 'URC22::RopeMeshMaterial02' has a wrong offset!");
static_assert(offsetof(URC22, MeshWidth) == 0x0002C8, "Member 'URC22::MeshWidth' has a wrong offset!");
static_assert(offsetof(URC22, FirstRopeMeshModel) == 0x0002D0, "Member 'URC22::FirstRopeMeshModel' has a wrong offset!");
static_assert(offsetof(URC22, FirstRopeMeshMaterial01) == 0x0002D8, "Member 'URC22::FirstRopeMeshMaterial01' has a wrong offset!");
static_assert(offsetof(URC22, FirstRopeMeshMaterial02) == 0x0002E0, "Member 'URC22::FirstRopeMeshMaterial02' has a wrong offset!");
static_assert(offsetof(URC22, FirstMeshWidth) == 0x0002E8, "Member 'URC22::FirstMeshWidth' has a wrong offset!");
static_assert(offsetof(URC22, LastRopeMeshModel) == 0x0002F0, "Member 'URC22::LastRopeMeshModel' has a wrong offset!");
static_assert(offsetof(URC22, LastRopeMeshMaterial01) == 0x0002F8, "Member 'URC22::LastRopeMeshMaterial01' has a wrong offset!");
static_assert(offsetof(URC22, LastRopeMeshMaterial02) == 0x000300, "Member 'URC22::LastRopeMeshMaterial02' has a wrong offset!");
static_assert(offsetof(URC22, LastMeshWidth) == 0x000308, "Member 'URC22::LastMeshWidth' has a wrong offset!");
static_assert(offsetof(URC22, EndLocation) == 0x000310, "Member 'URC22::EndLocation' has a wrong offset!");
static_assert(offsetof(URC22, UseSplineComponent) == 0x000328, "Member 'URC22::UseSplineComponent' has a wrong offset!");
static_assert(offsetof(URC22, SplineComponentName) == 0x00032C, "Member 'URC22::SplineComponentName' has a wrong offset!");
static_assert(offsetof(URC22, RopeOffset) == 0x000338, "Member 'URC22::RopeOffset' has a wrong offset!");
static_assert(offsetof(URC22, StartImmobilised) == 0x000350, "Member 'URC22::StartImmobilised' has a wrong offset!");
static_assert(offsetof(URC22, StartFurtherImmobilised) == 0x000351, "Member 'URC22::StartFurtherImmobilised' has a wrong offset!");
static_assert(offsetof(URC22, IncreaseStartRigidity) == 0x000352, "Member 'URC22::IncreaseStartRigidity' has a wrong offset!");
static_assert(offsetof(URC22, EndImmobilised) == 0x000353, "Member 'URC22::EndImmobilised' has a wrong offset!");
static_assert(offsetof(URC22, EndFurtherImmobilised) == 0x000354, "Member 'URC22::EndFurtherImmobilised' has a wrong offset!");
static_assert(offsetof(URC22, IncreaseEndRigidity) == 0x000355, "Member 'URC22::IncreaseEndRigidity' has a wrong offset!");
static_assert(offsetof(URC22, TwoXMeshModel) == 0x000358, "Member 'URC22::TwoXMeshModel' has a wrong offset!");
static_assert(offsetof(URC22, TwoXMeshMat01) == 0x000360, "Member 'URC22::TwoXMeshMat01' has a wrong offset!");
static_assert(offsetof(URC22, TwoXMeshMat02) == 0x000368, "Member 'URC22::TwoXMeshMat02' has a wrong offset!");
static_assert(offsetof(URC22, TwoXMeshWidth) == 0x000370, "Member 'URC22::TwoXMeshWidth' has a wrong offset!");
static_assert(offsetof(URC22, ThreeXMeshModel) == 0x000378, "Member 'URC22::ThreeXMeshModel' has a wrong offset!");
static_assert(offsetof(URC22, ThreeXMeshMat01) == 0x000380, "Member 'URC22::ThreeXMeshMat01' has a wrong offset!");
static_assert(offsetof(URC22, ThreeXMeshMat02) == 0x000388, "Member 'URC22::ThreeXMeshMat02' has a wrong offset!");
static_assert(offsetof(URC22, ThreeXMeshWidth) == 0x000390, "Member 'URC22::ThreeXMeshWidth' has a wrong offset!");
static_assert(offsetof(URC22, FourXMeshModel) == 0x000398, "Member 'URC22::FourXMeshModel' has a wrong offset!");
static_assert(offsetof(URC22, FourXMeshMat01) == 0x0003A0, "Member 'URC22::FourXMeshMat01' has a wrong offset!");
static_assert(offsetof(URC22, FourXMeshMat02) == 0x0003A8, "Member 'URC22::FourXMeshMat02' has a wrong offset!");
static_assert(offsetof(URC22, FourXMeshWidth) == 0x0003B0, "Member 'URC22::FourXMeshWidth' has a wrong offset!");
static_assert(offsetof(URC22, AttachStartMesh) == 0x0003B4, "Member 'URC22::AttachStartMesh' has a wrong offset!");
static_assert(offsetof(URC22, StartMeshName) == 0x0003B8, "Member 'URC22::StartMeshName' has a wrong offset!");
static_assert(offsetof(URC22, StartSocket) == 0x0003C0, "Member 'URC22::StartSocket' has a wrong offset!");
static_assert(offsetof(URC22, StartBone) == 0x0003C8, "Member 'URC22::StartBone' has a wrong offset!");
static_assert(offsetof(URC22, AddSecondConstraintStartAnchor) == 0x0003D0, "Member 'URC22::AddSecondConstraintStartAnchor' has a wrong offset!");
static_assert(offsetof(URC22, AttachEndMesh) == 0x0003D1, "Member 'URC22::AttachEndMesh' has a wrong offset!");
static_assert(offsetof(URC22, EndMeshName) == 0x0003D4, "Member 'URC22::EndMeshName' has a wrong offset!");
static_assert(offsetof(URC22, EndSocket) == 0x0003DC, "Member 'URC22::EndSocket' has a wrong offset!");
static_assert(offsetof(URC22, EndBone) == 0x0003E4, "Member 'URC22::EndBone' has a wrong offset!");
static_assert(offsetof(URC22, AddSecondConstraintEndAnchor) == 0x0003EC, "Member 'URC22::AddSecondConstraintEndAnchor' has a wrong offset!");
static_assert(offsetof(URC22, CanCutRope) == 0x0003ED, "Member 'URC22::CanCutRope' has a wrong offset!");
static_assert(offsetof(URC22, CuttingForceThreshold) == 0x0003F0, "Member 'URC22::CuttingForceThreshold' has a wrong offset!");
static_assert(offsetof(URC22, CuttingResetDelay) == 0x0003F4, "Member 'URC22::CuttingResetDelay' has a wrong offset!");
static_assert(offsetof(URC22, SwitchMeshOnCut) == 0x0003F8, "Member 'URC22::SwitchMeshOnCut' has a wrong offset!");
static_assert(offsetof(URC22, CutRopeModelLeft) == 0x000400, "Member 'URC22::CutRopeModelLeft' has a wrong offset!");
static_assert(offsetof(URC22, CutRopeModelRight) == 0x000408, "Member 'URC22::CutRopeModelRight' has a wrong offset!");
static_assert(offsetof(URC22, CutRopeModelBothEnds) == 0x000410, "Member 'URC22::CutRopeModelBothEnds' has a wrong offset!");
static_assert(offsetof(URC22, SwitchFirstMeshOnCut) == 0x000418, "Member 'URC22::SwitchFirstMeshOnCut' has a wrong offset!");
static_assert(offsetof(URC22, SwitchLastMeshOnCut) == 0x000419, "Member 'URC22::SwitchLastMeshOnCut' has a wrong offset!");
static_assert(offsetof(URC22, EnableEmitterOnCut) == 0x00041A, "Member 'URC22::EnableEmitterOnCut' has a wrong offset!");
static_assert(offsetof(URC22, CutRopeEmitter) == 0x000420, "Member 'URC22::CutRopeEmitter' has a wrong offset!");
static_assert(offsetof(URC22, EnableSoundOnCut) == 0x000428, "Member 'URC22::EnableSoundOnCut' has a wrong offset!");
static_assert(offsetof(URC22, CutRopeSound) == 0x000430, "Member 'URC22::CutRopeSound' has a wrong offset!");
static_assert(offsetof(URC22, EnableVelocityTracking) == 0x000438, "Member 'URC22::EnableVelocityTracking' has a wrong offset!");
static_assert(offsetof(URC22, EnableRopeCreak) == 0x000439, "Member 'URC22::EnableRopeCreak' has a wrong offset!");
static_assert(offsetof(URC22, RopeCreakSound) == 0x000440, "Member 'URC22::RopeCreakSound' has a wrong offset!");
static_assert(offsetof(URC22, RopeCreakMinVelocity) == 0x000448, "Member 'URC22::RopeCreakMinVelocity' has a wrong offset!");
static_assert(offsetof(URC22, RopeCreakRate) == 0x00044C, "Member 'URC22::RopeCreakRate' has a wrong offset!");
static_assert(offsetof(URC22, CreakMinimumropeLength) == 0x000450, "Member 'URC22::CreakMinimumropeLength' has a wrong offset!");
static_assert(offsetof(URC22, CreakPitchModulationMin) == 0x000454, "Member 'URC22::CreakPitchModulationMin' has a wrong offset!");
static_assert(offsetof(URC22, CreakPitchModulationMax) == 0x000458, "Member 'URC22::CreakPitchModulationMax' has a wrong offset!");
static_assert(offsetof(URC22, CreakVolumeModulationMin) == 0x00045C, "Member 'URC22::CreakVolumeModulationMin' has a wrong offset!");
static_assert(offsetof(URC22, CreakVolumeModulationMax) == 0x000460, "Member 'URC22::CreakVolumeModulationMax' has a wrong offset!");
static_assert(offsetof(URC22, EnableRopeAirWhip) == 0x000464, "Member 'URC22::EnableRopeAirWhip' has a wrong offset!");
static_assert(offsetof(URC22, RopeAirWhipSound) == 0x000468, "Member 'URC22::RopeAirWhipSound' has a wrong offset!");
static_assert(offsetof(URC22, RopeAirWhipMinVelocity) == 0x000470, "Member 'URC22::RopeAirWhipMinVelocity' has a wrong offset!");
static_assert(offsetof(URC22, RopeAirWhipRate) == 0x000474, "Member 'URC22::RopeAirWhipRate' has a wrong offset!");
static_assert(offsetof(URC22, AirWhipPitchModulationMin) == 0x000478, "Member 'URC22::AirWhipPitchModulationMin' has a wrong offset!");
static_assert(offsetof(URC22, AirWhipPitchModulationMax) == 0x00047C, "Member 'URC22::AirWhipPitchModulationMax' has a wrong offset!");
static_assert(offsetof(URC22, AirWhipVolumeModulationMin) == 0x000480, "Member 'URC22::AirWhipVolumeModulationMin' has a wrong offset!");
static_assert(offsetof(URC22, AirWhipVolumeModulationMax) == 0x000484, "Member 'URC22::AirWhipVolumeModulationMax' has a wrong offset!");
static_assert(offsetof(URC22, AirWhipMinimumropeLength) == 0x000488, "Member 'URC22::AirWhipMinimumropeLength' has a wrong offset!");
static_assert(offsetof(URC22, ImpactForceThreshold) == 0x00048C, "Member 'URC22::ImpactForceThreshold' has a wrong offset!");
static_assert(offsetof(URC22, ImpactResetDelay) == 0x000490, "Member 'URC22::ImpactResetDelay' has a wrong offset!");
static_assert(offsetof(URC22, EnableImpactSound) == 0x000494, "Member 'URC22::EnableImpactSound' has a wrong offset!");
static_assert(offsetof(URC22, ImpactSound) == 0x000498, "Member 'URC22::ImpactSound' has a wrong offset!");
static_assert(offsetof(URC22, EnableImpactEmitter) == 0x0004A0, "Member 'URC22::EnableImpactEmitter' has a wrong offset!");
static_assert(offsetof(URC22, ImpactEmitter) == 0x0004A8, "Member 'URC22::ImpactEmitter' has a wrong offset!");
static_assert(offsetof(URC22, CanGrab) == 0x0004B0, "Member 'URC22::CanGrab' has a wrong offset!");
static_assert(offsetof(URC22, Elasticity) == 0x0004B4, "Member 'URC22::Elasticity' has a wrong offset!");
static_assert(offsetof(URC22, RigidnessScale) == 0x0004B8, "Member 'URC22::RigidnessScale' has a wrong offset!");
static_assert(offsetof(URC22, CollisionScaleAdjustment) == 0x0004BC, "Member 'URC22::CollisionScaleAdjustment' has a wrong offset!");
static_assert(offsetof(URC22, RopePhysicalMaterial) == 0x0004C0, "Member 'URC22::RopePhysicalMaterial' has a wrong offset!");
static_assert(offsetof(URC22, StabilizationThresholdMultiplier_RC22) == 0x0004C8, "Member 'URC22::StabilizationThresholdMultiplier_RC22' has a wrong offset!");
static_assert(offsetof(URC22, PositionSolverIterationCount_RC22) == 0x0004CC, "Member 'URC22::PositionSolverIterationCount_RC22' has a wrong offset!");
static_assert(offsetof(URC22, VelocitySolverIterationCount_RC22) == 0x0004D0, "Member 'URC22::VelocitySolverIterationCount_RC22' has a wrong offset!");
static_assert(offsetof(URC22, PhysicsEnabled) == 0x0004D4, "Member 'URC22::PhysicsEnabled' has a wrong offset!");
static_assert(offsetof(URC22, GravityEnabled) == 0x0004D5, "Member 'URC22::GravityEnabled' has a wrong offset!");
static_assert(offsetof(URC22, ForceDistanceLock) == 0x0004D6, "Member 'URC22::ForceDistanceLock' has a wrong offset!");
static_assert(offsetof(URC22, DisableSelfCollision) == 0x0004D7, "Member 'URC22::DisableSelfCollision' has a wrong offset!");
static_assert(offsetof(URC22, OverrideRigidnessScale) == 0x0004D8, "Member 'URC22::OverrideRigidnessScale' has a wrong offset!");
static_assert(offsetof(URC22, SetLinearDamping_Override) == 0x0004DC, "Member 'URC22::SetLinearDamping_Override' has a wrong offset!");
static_assert(offsetof(URC22, SetAngularDamping_Override) == 0x0004E0, "Member 'URC22::SetAngularDamping_Override' has a wrong offset!");
static_assert(offsetof(URC22, SetMassScale_Override) == 0x0004E4, "Member 'URC22::SetMassScale_Override' has a wrong offset!");
static_assert(offsetof(URC22, InertiaTensorScale_Override) == 0x0004E8, "Member 'URC22::InertiaTensorScale_Override' has a wrong offset!");
static_assert(offsetof(URC22, AngularDrivePositionStrength_Override) == 0x0004EC, "Member 'URC22::AngularDrivePositionStrength_Override' has a wrong offset!");
static_assert(offsetof(URC22, AngularDriveVelocityStrength_Override) == 0x0004F0, "Member 'URC22::AngularDriveVelocityStrength_Override' has a wrong offset!");
static_assert(offsetof(URC22, AngularSwing1Limit_Override) == 0x0004F4, "Member 'URC22::AngularSwing1Limit_Override' has a wrong offset!");
static_assert(offsetof(URC22, AngularSwing2Limit_Override) == 0x0004F8, "Member 'URC22::AngularSwing2Limit_Override' has a wrong offset!");
static_assert(offsetof(URC22, AngularTwistLimit_Override) == 0x0004FC, "Member 'URC22::AngularTwistLimit_Override' has a wrong offset!");
static_assert(offsetof(URC22, SetSplineStartLocation) == 0x000500, "Member 'URC22::SetSplineStartLocation' has a wrong offset!");
static_assert(offsetof(URC22, SplineStartLocation) == 0x000508, "Member 'URC22::SplineStartLocation' has a wrong offset!");
static_assert(offsetof(URC22, SetSplineEndLocation) == 0x000520, "Member 'URC22::SetSplineEndLocation' has a wrong offset!");
static_assert(offsetof(URC22, SplineEndLocation) == 0x000528, "Member 'URC22::SplineEndLocation' has a wrong offset!");
static_assert(offsetof(URC22, ShowCollisionSpheres) == 0x000540, "Member 'URC22::ShowCollisionSpheres' has a wrong offset!");
static_assert(offsetof(URC22, ShowSplines) == 0x000541, "Member 'URC22::ShowSplines' has a wrong offset!");
static_assert(offsetof(URC22, OffsetBuildingSpline) == 0x000542, "Member 'URC22::OffsetBuildingSpline' has a wrong offset!");
static_assert(offsetof(URC22, IsCut_RC) == 0x000543, "Member 'URC22::IsCut_RC' has a wrong offset!");
static_assert(offsetof(URC22, NumberOfCuts_RC) == 0x000544, "Member 'URC22::NumberOfCuts_RC' has a wrong offset!");
static_assert(offsetof(URC22, ImpactCounter_RC) == 0x000548, "Member 'URC22::ImpactCounter_RC' has a wrong offset!");
static_assert(offsetof(URC22, ForceOfHit_RC) == 0x00054C, "Member 'URC22::ForceOfHit_RC' has a wrong offset!");
static_assert(offsetof(URC22, HitCollisionSphere_PR_RC) == 0x000550, "Member 'URC22::HitCollisionSphere_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, OtherComponent_Hit_PR_RC) == 0x000558, "Member 'URC22::OtherComponent_Hit_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, FirstAndLastDefaultMat_RC) == 0x000560, "Member 'URC22::FirstAndLastDefaultMat_RC' has a wrong offset!");
static_assert(offsetof(URC22, RopeCreakSoundSpawn_RC) == 0x000568, "Member 'URC22::RopeCreakSoundSpawn_RC' has a wrong offset!");
static_assert(offsetof(URC22, RopeCreakSoundArray_RC) == 0x000570, "Member 'URC22::RopeCreakSoundArray_RC' has a wrong offset!");
static_assert(offsetof(URC22, AllowVelocityChecks_RC) == 0x000590, "Member 'URC22::AllowVelocityChecks_RC' has a wrong offset!");
static_assert(offsetof(URC22, AllowAirWhip_RC) == 0x000591, "Member 'URC22::AllowAirWhip_RC' has a wrong offset!");
static_assert(offsetof(URC22, AllowDelayLoops_RC) == 0x000592, "Member 'URC22::AllowDelayLoops_RC' has a wrong offset!");
static_assert(offsetof(URC22, ShrinkCollLinearDampeningValue_RC) == 0x0005A0, "Member 'URC22::ShrinkCollLinearDampeningValue_RC' has a wrong offset!");
static_assert(offsetof(URC22, IsShrinking_RC) == 0x0005A4, "Member 'URC22::IsShrinking_RC' has a wrong offset!");
static_assert(offsetof(URC22, ForceOfExtraction_RC) == 0x0005A8, "Member 'URC22::ForceOfExtraction_RC' has a wrong offset!");
static_assert(offsetof(URC22, ShrinkLoopDelay_RC) == 0x0005AC, "Member 'URC22::ShrinkLoopDelay_RC' has a wrong offset!");
static_assert(offsetof(URC22, ShrinkOriginLocation_RC) == 0x0005B0, "Member 'URC22::ShrinkOriginLocation_RC' has a wrong offset!");
static_assert(offsetof(URC22, ShrinkOriginRotation_RC) == 0x0005C8, "Member 'URC22::ShrinkOriginRotation_RC' has a wrong offset!");
static_assert(offsetof(URC22, ShrinkTargetLocation_RC) == 0x0005E0, "Member 'URC22::ShrinkTargetLocation_RC' has a wrong offset!");
static_assert(offsetof(URC22, ShrinkTargetRotation_RC) == 0x0005F8, "Member 'URC22::ShrinkTargetRotation_RC' has a wrong offset!");
static_assert(offsetof(URC22, ShrinkRopeLerpValue) == 0x000610, "Member 'URC22::ShrinkRopeLerpValue' has a wrong offset!");
static_assert(offsetof(URC22, IsMovingShrinkRope_RC) == 0x000614, "Member 'URC22::IsMovingShrinkRope_RC' has a wrong offset!");
static_assert(offsetof(URC22, IsMovingGrowRope_RC) == 0x000620, "Member 'URC22::IsMovingGrowRope_RC' has a wrong offset!");
static_assert(offsetof(URC22, GrowRopeMoveLerpValue_RC) == 0x000624, "Member 'URC22::GrowRopeMoveLerpValue_RC' has a wrong offset!");
static_assert(offsetof(URC22, IsStartMobile_Grow_RC) == 0x000628, "Member 'URC22::IsStartMobile_Grow_RC' has a wrong offset!");
static_assert(offsetof(URC22, IsGrowing_RC) == 0x000629, "Member 'URC22::IsGrowing_RC' has a wrong offset!");
static_assert(offsetof(URC22, IsRunningGrowMainFunction_RC) == 0x00062A, "Member 'URC22::IsRunningGrowMainFunction_RC' has a wrong offset!");
static_assert(offsetof(URC22, GrowLoopDelay_RC) == 0x00062C, "Member 'URC22::GrowLoopDelay_RC' has a wrong offset!");
static_assert(offsetof(URC22, GrowCounter_RC) == 0x000630, "Member 'URC22::GrowCounter_RC' has a wrong offset!");
static_assert(offsetof(URC22, MeshPropertyCounter_RC) == 0x000634, "Member 'URC22::MeshPropertyCounter_RC' has a wrong offset!");
static_assert(offsetof(URC22, GrowStartLocation_RC) == 0x000638, "Member 'URC22::GrowStartLocation_RC' has a wrong offset!");
static_assert(offsetof(URC22, GrowStartRotation_RC) == 0x000650, "Member 'URC22::GrowStartRotation_RC' has a wrong offset!");
static_assert(offsetof(URC22, GrowTargetLocation_RC) == 0x000668, "Member 'URC22::GrowTargetLocation_RC' has a wrong offset!");
static_assert(offsetof(URC22, FirstTracker_PR_RC) == 0x000680, "Member 'URC22::FirstTracker_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, GrowSplineComponent_PR_RC) == 0x000688, "Member 'URC22::GrowSplineComponent_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, GrowSplineMesh_PR_RC) == 0x000690, "Member 'URC22::GrowSplineMesh_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, GrowPhyConstraint_PR_RC) == 0x000698, "Member 'URC22::GrowPhyConstraint_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, GrowCollision_PR_RC) == 0x0006A0, "Member 'URC22::GrowCollision_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, FirstUnitOrigin_Loc_EMov_CC) == 0x0006B8, "Member 'URC22::FirstUnitOrigin_Loc_EMov_CC' has a wrong offset!");
static_assert(offsetof(URC22, FirstUnitOrigin_Rot_EMov_CC) == 0x0006D0, "Member 'URC22::FirstUnitOrigin_Rot_EMov_CC' has a wrong offset!");
static_assert(offsetof(URC22, LastUnitOrigin_Loc_EMov_CC) == 0x0006E8, "Member 'URC22::LastUnitOrigin_Loc_EMov_CC' has a wrong offset!");
static_assert(offsetof(URC22, LastUnitOrigin_Rot_EMov_CC) == 0x000700, "Member 'URC22::LastUnitOrigin_Rot_EMov_CC' has a wrong offset!");
static_assert(offsetof(URC22, LastUnitTarget_Loc_EMov_CC) == 0x000718, "Member 'URC22::LastUnitTarget_Loc_EMov_CC' has a wrong offset!");
static_assert(offsetof(URC22, LastUnitTarget_Rot_EMov_CC) == 0x000730, "Member 'URC22::LastUnitTarget_Rot_EMov_CC' has a wrong offset!");
static_assert(offsetof(URC22, Begin_EMov_CC) == 0x000748, "Member 'URC22::Begin_EMov_CC' has a wrong offset!");
static_assert(offsetof(URC22, AllowFirstUnitRotate_Att_EMov_CC) == 0x000749, "Member 'URC22::AllowFirstUnitRotate_Att_EMov_CC' has a wrong offset!");
static_assert(offsetof(URC22, AllowFirstUnitRotate_Immobile_EMov_CC) == 0x00074A, "Member 'URC22::AllowFirstUnitRotate_Immobile_EMov_CC' has a wrong offset!");
static_assert(offsetof(URC22, LerpValue_EMov_CC) == 0x00074C, "Member 'URC22::LerpValue_EMov_CC' has a wrong offset!");
static_assert(offsetof(URC22, TimerDelay_EMov_CC) == 0x000750, "Member 'URC22::TimerDelay_EMov_CC' has a wrong offset!");
static_assert(offsetof(URC22, FirstUnitOrigin_Loc_SMov_CC) == 0x000758, "Member 'URC22::FirstUnitOrigin_Loc_SMov_CC' has a wrong offset!");
static_assert(offsetof(URC22, FirstUnitOrigin_Rot_SMov_CC) == 0x000770, "Member 'URC22::FirstUnitOrigin_Rot_SMov_CC' has a wrong offset!");
static_assert(offsetof(URC22, LastUnitOrigin_Loc_SMov_CC) == 0x000788, "Member 'URC22::LastUnitOrigin_Loc_SMov_CC' has a wrong offset!");
static_assert(offsetof(URC22, LastUnitOrigin_Rot_SMov_CC) == 0x0007A0, "Member 'URC22::LastUnitOrigin_Rot_SMov_CC' has a wrong offset!");
static_assert(offsetof(URC22, FirstUnitTarget_Loc_SMov_CC) == 0x0007B8, "Member 'URC22::FirstUnitTarget_Loc_SMov_CC' has a wrong offset!");
static_assert(offsetof(URC22, FirstUnitTarget_Rot_SMov_CC) == 0x0007D0, "Member 'URC22::FirstUnitTarget_Rot_SMov_CC' has a wrong offset!");
static_assert(offsetof(URC22, FirstUnitTarget_RotInvert_SMov_CC) == 0x0007E8, "Member 'URC22::FirstUnitTarget_RotInvert_SMov_CC' has a wrong offset!");
static_assert(offsetof(URC22, Begin_SMov_CC) == 0x000800, "Member 'URC22::Begin_SMov_CC' has a wrong offset!");
static_assert(offsetof(URC22, AllowFirstUnitRotate_Att_SMov_CC) == 0x000801, "Member 'URC22::AllowFirstUnitRotate_Att_SMov_CC' has a wrong offset!");
static_assert(offsetof(URC22, AllowFirstUnitRotate_Immobile_SMov_CC) == 0x000802, "Member 'URC22::AllowFirstUnitRotate_Immobile_SMov_CC' has a wrong offset!");
static_assert(offsetof(URC22, LerpValue_SMov_CC) == 0x000804, "Member 'URC22::LerpValue_SMov_CC' has a wrong offset!");
static_assert(offsetof(URC22, TimerDelay_SMov_CC) == 0x000808, "Member 'URC22::TimerDelay_SMov_CC' has a wrong offset!");
static_assert(offsetof(URC22, DefaultRopeMeshModel) == 0x000810, "Member 'URC22::DefaultRopeMeshModel' has a wrong offset!");
static_assert(offsetof(URC22, DefaultCutRopeLeftModel) == 0x000818, "Member 'URC22::DefaultCutRopeLeftModel' has a wrong offset!");
static_assert(offsetof(URC22, DefaultCutRopeRightModel) == 0x000820, "Member 'URC22::DefaultCutRopeRightModel' has a wrong offset!");
static_assert(offsetof(URC22, DefaultCutRopeBothModel) == 0x000828, "Member 'URC22::DefaultCutRopeBothModel' has a wrong offset!");
static_assert(offsetof(URC22, LinearLimit_RC) == 0x000830, "Member 'URC22::LinearLimit_RC' has a wrong offset!");
static_assert(offsetof(URC22, LinearDrive_RC) == 0x000834, "Member 'URC22::LinearDrive_RC' has a wrong offset!");
static_assert(offsetof(URC22, AllowCutting_RC) == 0x000858, "Member 'URC22::AllowCutting_RC' has a wrong offset!");
static_assert(offsetof(URC22, MeshBoundsSize) == 0x00085C, "Member 'URC22::MeshBoundsSize' has a wrong offset!");
static_assert(offsetof(URC22, HasGrabbed_RC) == 0x000860, "Member 'URC22::HasGrabbed_RC' has a wrong offset!");
static_assert(offsetof(URC22, GrabDistanceFromSplineStart) == 0x000864, "Member 'URC22::GrabDistanceFromSplineStart' has a wrong offset!");
static_assert(offsetof(URC22, GrabDistanceFromSplineEnd) == 0x000868, "Member 'URC22::GrabDistanceFromSplineEnd' has a wrong offset!");
static_assert(offsetof(URC22, StartPrimitiveFNameArray_RC) == 0x000870, "Member 'URC22::StartPrimitiveFNameArray_RC' has a wrong offset!");
static_assert(offsetof(URC22, StartPrimitiveBoneFNameArray_RC) == 0x000880, "Member 'URC22::StartPrimitiveBoneFNameArray_RC' has a wrong offset!");
static_assert(offsetof(URC22, StartPrimitiveFound) == 0x000890, "Member 'URC22::StartPrimitiveFound' has a wrong offset!");
static_assert(offsetof(URC22, IsStartPrimitiveSkeletal_RC) == 0x000891, "Member 'URC22::IsStartPrimitiveSkeletal_RC' has a wrong offset!");
static_assert(offsetof(URC22, EndPrimitiveFNameArray_RC) == 0x000898, "Member 'URC22::EndPrimitiveFNameArray_RC' has a wrong offset!");
static_assert(offsetof(URC22, EndPrimitiveBoneFNameArray_RC) == 0x0008A8, "Member 'URC22::EndPrimitiveBoneFNameArray_RC' has a wrong offset!");
static_assert(offsetof(URC22, EndPrimitiveFound) == 0x0008B8, "Member 'URC22::EndPrimitiveFound' has a wrong offset!");
static_assert(offsetof(URC22, IsEndPrimitiveSkeletal_RC) == 0x0008B9, "Member 'URC22::IsEndPrimitiveSkeletal_RC' has a wrong offset!");
static_assert(offsetof(URC22, AllowImpactEvent_RC) == 0x0008BA, "Member 'URC22::AllowImpactEvent_RC' has a wrong offset!");
static_assert(offsetof(URC22, CuttingQuedHitComp) == 0x0008D0, "Member 'URC22::CuttingQuedHitComp' has a wrong offset!");
static_assert(offsetof(URC22, CuttingQuedOtherActor) == 0x0008D8, "Member 'URC22::CuttingQuedOtherActor' has a wrong offset!");
static_assert(offsetof(URC22, CuttingQuedOtherComp) == 0x0008E0, "Member 'URC22::CuttingQuedOtherComp' has a wrong offset!");
static_assert(offsetof(URC22, CuttingQuedNormalImpulse) == 0x0008E8, "Member 'URC22::CuttingQuedNormalImpulse' has a wrong offset!");
static_assert(offsetof(URC22, CuttingQuedHit) == 0x000900, "Member 'URC22::CuttingQuedHit' has a wrong offset!");
static_assert(offsetof(URC22, HasBeenCut_RC) == 0x0009E8, "Member 'URC22::HasBeenCut_RC' has a wrong offset!");
static_assert(offsetof(URC22, SetLinearDamping_RC) == 0x0009EC, "Member 'URC22::SetLinearDamping_RC' has a wrong offset!");
static_assert(offsetof(URC22, SetAngularDamping_RC) == 0x0009F0, "Member 'URC22::SetAngularDamping_RC' has a wrong offset!");
static_assert(offsetof(URC22, SetMassScale_RC) == 0x0009F4, "Member 'URC22::SetMassScale_RC' has a wrong offset!");
static_assert(offsetof(URC22, InertiaTensorScale_RC) == 0x0009F8, "Member 'URC22::InertiaTensorScale_RC' has a wrong offset!");
static_assert(offsetof(URC22, AngularDriveVelocityStrengthRC) == 0x0009FC, "Member 'URC22::AngularDriveVelocityStrengthRC' has a wrong offset!");
static_assert(offsetof(URC22, AngularDrivePositionStrengthRC) == 0x000A00, "Member 'URC22::AngularDrivePositionStrengthRC' has a wrong offset!");
static_assert(offsetof(URC22, AngularSwing1Limit_RC) == 0x000A04, "Member 'URC22::AngularSwing1Limit_RC' has a wrong offset!");
static_assert(offsetof(URC22, AngularSwing2Limit_RC) == 0x000A08, "Member 'URC22::AngularSwing2Limit_RC' has a wrong offset!");
static_assert(offsetof(URC22, AngularTwistLimit_RC) == 0x000A0C, "Member 'URC22::AngularTwistLimit_RC' has a wrong offset!");
static_assert(offsetof(URC22, CollUnitScale_RC) == 0x000A10, "Member 'URC22::CollUnitScale_RC' has a wrong offset!");
static_assert(offsetof(URC22, TrackerArray_PR_RC) == 0x000A28, "Member 'URC22::TrackerArray_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, SplineMeshArray_PR_RC) == 0x000A38, "Member 'URC22::SplineMeshArray_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, PhysicsConstraintArray_PR_RC) == 0x000A48, "Member 'URC22::PhysicsConstraintArray_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, CollisionSphereArray_PR_RC) == 0x000A58, "Member 'URC22::CollisionSphereArray_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, TargetCollisionArray_RL) == 0x000A68, "Member 'URC22::TargetCollisionArray_RL' has a wrong offset!");
static_assert(offsetof(URC22, TargetSplineMeshArray_RL) == 0x000A78, "Member 'URC22::TargetSplineMeshArray_RL' has a wrong offset!");
static_assert(offsetof(URC22, SplineMesh_PR_RC) == 0x000A88, "Member 'URC22::SplineMesh_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, Emitter_PR_RC) == 0x000A90, "Member 'URC22::Emitter_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, EmitterArray_PR_RC) == 0x000A98, "Member 'URC22::EmitterArray_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, Sound_PR_RC) == 0x000AA8, "Member 'URC22::Sound_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, SoundArray_PR_RC) == 0x000AB0, "Member 'URC22::SoundArray_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, SphereColl_PR_RC) == 0x000AC0, "Member 'URC22::SphereColl_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, PhysicsConstr_PR_RC) == 0x000AC8, "Member 'URC22::PhysicsConstr_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, DataTracker_PR_RC) == 0x000AD0, "Member 'URC22::DataTracker_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, TargetSpline_RL) == 0x000AD8, "Member 'URC22::TargetSpline_RL' has a wrong offset!");
static_assert(offsetof(URC22, TargetSplineMesh_RL) == 0x000AE0, "Member 'URC22::TargetSplineMesh_RL' has a wrong offset!");
static_assert(offsetof(URC22, RenderSpline_PR_RC) == 0x000AE8, "Member 'URC22::RenderSpline_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, BuildingSpline_PR_RC) == 0x000AF0, "Member 'URC22::BuildingSpline_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, LastSphereColl_Grab_PR_RC) == 0x000AF8, "Member 'URC22::LastSphereColl_Grab_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, GrabPhyConstr_PR_RC) == 0x000B00, "Member 'URC22::GrabPhyConstr_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, GrabDistanceSpline_PR_RC) == 0x000B08, "Member 'URC22::GrabDistanceSpline_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, Grab_PartOfFirstLength_RC) == 0x000B10, "Member 'URC22::Grab_PartOfFirstLength_RC' has a wrong offset!");
static_assert(offsetof(URC22, Grab_PositioNumber_RC) == 0x000B14, "Member 'URC22::Grab_PositioNumber_RC' has a wrong offset!");
static_assert(offsetof(URC22, FirstSplineMesh_RC) == 0x000B18, "Member 'URC22::FirstSplineMesh_RC' has a wrong offset!");
static_assert(offsetof(URC22, LastSplineMesh_RC) == 0x000B20, "Member 'URC22::LastSplineMesh_RC' has a wrong offset!");
static_assert(offsetof(URC22, HitTracker_Cut_RC) == 0x000B28, "Member 'URC22::HitTracker_Cut_RC' has a wrong offset!");
static_assert(offsetof(URC22, CuttingTargetSpline_Cut_RC) == 0x000B30, "Member 'URC22::CuttingTargetSpline_Cut_RC' has a wrong offset!");
static_assert(offsetof(URC22, GeneratedSpline_Cut_RC) == 0x000B38, "Member 'URC22::GeneratedSpline_Cut_RC' has a wrong offset!");
static_assert(offsetof(URC22, GeneratedTracker_Cut_RC) == 0x000B40, "Member 'URC22::GeneratedTracker_Cut_RC' has a wrong offset!");
static_assert(offsetof(URC22, TargetCollisionArray_Cut_RC) == 0x000B48, "Member 'URC22::TargetCollisionArray_Cut_RC' has a wrong offset!");
static_assert(offsetof(URC22, TargetSplineMeshArray_Cut_RC) == 0x000B58, "Member 'URC22::TargetSplineMeshArray_Cut_RC' has a wrong offset!");
static_assert(offsetof(URC22, TargetConstraintArray_Cut_RC) == 0x000B68, "Member 'URC22::TargetConstraintArray_Cut_RC' has a wrong offset!");
static_assert(offsetof(URC22, SecondEndConstraintSphereColl_PR_RC) == 0x000B78, "Member 'URC22::SecondEndConstraintSphereColl_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, HitCollSphere_PR_RC) == 0x000BA0, "Member 'URC22::HitCollSphere_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, ReceivingTracker_PR_RC) == 0x000BA8, "Member 'URC22::ReceivingTracker_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, DonatingTracker_PR_RC) == 0x000BB0, "Member 'URC22::DonatingTracker_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, ReceivingSpline_PR_RC) == 0x000BB8, "Member 'URC22::ReceivingSpline_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, DonatingSpline_PR_RC) == 0x000BC0, "Member 'URC22::DonatingSpline_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, HitPhyConstr_PR_RC) == 0x000BC8, "Member 'URC22::HitPhyConstr_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, ReceivingColl_PR_RC) == 0x000BD0, "Member 'URC22::ReceivingColl_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, ReplacementColl_PR_RC) == 0x000BD8, "Member 'URC22::ReplacementColl_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, StartAnchorPhyConstr_PR_RC) == 0x000BE0, "Member 'URC22::StartAnchorPhyConstr_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, EndAnchorPhyConstr_PR_RC) == 0x000BE8, "Member 'URC22::EndAnchorPhyConstr_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, StartAnchorPhyConstrSecond_PR_RC) == 0x000BF0, "Member 'URC22::StartAnchorPhyConstrSecond_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, EndAnchorPhyConstrSecond_PR_RC) == 0x000BF8, "Member 'URC22::EndAnchorPhyConstrSecond_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, DataSpline_PR_RC) == 0x000C00, "Member 'URC22::DataSpline_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, SplineLookupArray_PR_RC) == 0x000C08, "Member 'URC22::SplineLookupArray_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, StartAnchorPrimitiveLookupArray_PR_RC) == 0x000C18, "Member 'URC22::StartAnchorPrimitiveLookupArray_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, StartAnchorPrimitive_PR_RC) == 0x000C28, "Member 'URC22::StartAnchorPrimitive_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, StartAnchorSkeletalMesh_PR_RC) == 0x000C30, "Member 'URC22::StartAnchorSkeletalMesh_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, EndAnchorPrimitiveLookupArray_PR_RC) == 0x000C38, "Member 'URC22::EndAnchorPrimitiveLookupArray_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, EndAnchorPrimitive_PR_RC) == 0x000C48, "Member 'URC22::EndAnchorPrimitive_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, EndAnchorSkeletalMesh_PR_RC) == 0x000C50, "Member 'URC22::EndAnchorSkeletalMesh_PR_RC' has a wrong offset!");
static_assert(offsetof(URC22, SplineMeshStartLoc_RL) == 0x000C58, "Member 'URC22::SplineMeshStartLoc_RL' has a wrong offset!");
static_assert(offsetof(URC22, SplineMeshStartTangent_RL) == 0x000C70, "Member 'URC22::SplineMeshStartTangent_RL' has a wrong offset!");
static_assert(offsetof(URC22, SplineMeshEndLoc_RL) == 0x000C88, "Member 'URC22::SplineMeshEndLoc_RL' has a wrong offset!");
static_assert(offsetof(URC22, SplineMeshEndTangent_RL) == 0x000CA0, "Member 'URC22::SplineMeshEndTangent_RL' has a wrong offset!");
static_assert(offsetof(URC22, SplineMeshUpDir_RL) == 0x000CB8, "Member 'URC22::SplineMeshUpDir_RL' has a wrong offset!");
static_assert(offsetof(URC22, UnitLength_RC) == 0x000CD0, "Member 'URC22::UnitLength_RC' has a wrong offset!");
static_assert(offsetof(URC22, HasBuilt_RC) == 0x000CD4, "Member 'URC22::HasBuilt_RC' has a wrong offset!");
static_assert(offsetof(URC22, UsedInGame_RC) == 0x000CD5, "Member 'URC22::UsedInGame_RC' has a wrong offset!");
static_assert(offsetof(URC22, BlockRuntimeUpdate_RC) == 0x000CE0, "Member 'URC22::BlockRuntimeUpdate_RC' has a wrong offset!");

// Class RopeCutting.RC22Tracker
// 0x0038 (0x00D8 - 0x00A0)
class URC22Tracker final : public UActorComponent
{
public:
	class USplineComponent*                       SplineComponent_RC22T;                             // 0x00A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USplineMeshComponent*>           SplineMeshArray_RC22T;                             // 0x00A8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UPhysicsConstraintComponent*>    PhysicsConstraintArray_RC22T;                      // 0x00B8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class USphereComponent*>               CollisionArray_RC22T;                              // 0x00C8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	TArray<class USphereComponent*> GetCollisionArray_RC22T();
	TArray<class UPhysicsConstraintComponent*> GetPhysicsConstraintArray_RC22T();
	class USplineComponent* GetSplineComponent_RC22T();
	TArray<class USplineMeshComponent*> GetSplineMeshArray_RC22T();
	void SetCollisionArray_RC22T(const TArray<class USphereComponent*>& SetCollisionArrayIn);
	void SetPhysicsConstraintArray_RC22T(const TArray<class UPhysicsConstraintComponent*>& SetPhysicsConstraintArrayIn);
	void SetSplineComponent_RC22T(class USplineComponent* SplineComponentIn);
	void SetSplineMeshArray_RC22T(const TArray<class USplineMeshComponent*>& SplineMeshArrayIn);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RC22Tracker">();
	}
	static class URC22Tracker* GetDefaultObj()
	{
		return GetDefaultObjImpl<URC22Tracker>();
	}
};
static_assert(alignof(URC22Tracker) == 0x000008, "Wrong alignment on URC22Tracker");
static_assert(sizeof(URC22Tracker) == 0x0000D8, "Wrong size on URC22Tracker");
static_assert(offsetof(URC22Tracker, SplineComponent_RC22T) == 0x0000A0, "Member 'URC22Tracker::SplineComponent_RC22T' has a wrong offset!");
static_assert(offsetof(URC22Tracker, SplineMeshArray_RC22T) == 0x0000A8, "Member 'URC22Tracker::SplineMeshArray_RC22T' has a wrong offset!");
static_assert(offsetof(URC22Tracker, PhysicsConstraintArray_RC22T) == 0x0000B8, "Member 'URC22Tracker::PhysicsConstraintArray_RC22T' has a wrong offset!");
static_assert(offsetof(URC22Tracker, CollisionArray_RC22T) == 0x0000C8, "Member 'URC22Tracker::CollisionArray_RC22T' has a wrong offset!");

// Class RopeCutting.RCTracker
// 0x0048 (0x00E8 - 0x00A0)
class URCTracker final : public UActorComponent
{
public:
	class USplineComponent*                       RCT_SplineComponent;                               // 0x00A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         RCT_PositionNumber;                                // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RCT_PrimaryCollisionName;                          // 0x00AC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RCT_SecondaryCollisionName;                        // 0x00B4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_198E[0x4];                                     // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USplineMeshComponent*                   RCT_SplineMeshComponent;                           // 0x00C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USphereComponent*                       RCT_PrimarySphereColl;                             // 0x00C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USphereComponent*                       RCT_SecondarySphereColl;                           // 0x00D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPhysicsConstraintComponent*            RCT_PhysicsConstraint;                             // 0x00D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          IsFirstOfCutLength;                                // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          IsLastOfCutLength;                                 // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_198F[0x6];                                     // 0x00E2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetIsFirstOfCutLength();
	bool GetIsLastOfCutLength();
	class UPhysicsConstraintComponent* GetPhysicsConstraint();
	int32 GetPositionNumber();
	class USphereComponent* GetPrimarySphereCollision();
	class FName GetPrimarySphereCollisionName();
	class USphereComponent* GetSecondarySphereCollision();
	class FName GetSecondarySphereCollisionName();
	class USplineComponent* GetSplineComponent();
	class USplineMeshComponent* GetSplineMesh();
	void SetIsFirstOfCutLength(bool IsFirstOfCutLengthIn);
	void SetIsLastOfCutLength(bool IsLastOfCutLengthIn);
	void SetPhysicsConstraint(class UPhysicsConstraintComponent* PrimaryPhysicsConstraintIn);
	void SetPositionNumber(int32 PositionNumberIn);
	void SetPrimarySphereCollision(class USphereComponent* PrimarySphereCollisionIn);
	void SetPrimarySphereCollisionName(class FName PrimarySphereCollisionNameIn);
	void SetSecondarySphereCollision(class USphereComponent* SecondarySphereCollisionIn);
	void SetSecondarySphereCollisionName(class FName SecondarySphereCollisionNameIn);
	void SetSplineComponent(class USplineComponent* SplineComponentIn);
	void SetSplineMesh(class USplineMeshComponent* SplineMeshIn);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RCTracker">();
	}
	static class URCTracker* GetDefaultObj()
	{
		return GetDefaultObjImpl<URCTracker>();
	}
};
static_assert(alignof(URCTracker) == 0x000008, "Wrong alignment on URCTracker");
static_assert(sizeof(URCTracker) == 0x0000E8, "Wrong size on URCTracker");
static_assert(offsetof(URCTracker, RCT_SplineComponent) == 0x0000A0, "Member 'URCTracker::RCT_SplineComponent' has a wrong offset!");
static_assert(offsetof(URCTracker, RCT_PositionNumber) == 0x0000A8, "Member 'URCTracker::RCT_PositionNumber' has a wrong offset!");
static_assert(offsetof(URCTracker, RCT_PrimaryCollisionName) == 0x0000AC, "Member 'URCTracker::RCT_PrimaryCollisionName' has a wrong offset!");
static_assert(offsetof(URCTracker, RCT_SecondaryCollisionName) == 0x0000B4, "Member 'URCTracker::RCT_SecondaryCollisionName' has a wrong offset!");
static_assert(offsetof(URCTracker, RCT_SplineMeshComponent) == 0x0000C0, "Member 'URCTracker::RCT_SplineMeshComponent' has a wrong offset!");
static_assert(offsetof(URCTracker, RCT_PrimarySphereColl) == 0x0000C8, "Member 'URCTracker::RCT_PrimarySphereColl' has a wrong offset!");
static_assert(offsetof(URCTracker, RCT_SecondarySphereColl) == 0x0000D0, "Member 'URCTracker::RCT_SecondarySphereColl' has a wrong offset!");
static_assert(offsetof(URCTracker, RCT_PhysicsConstraint) == 0x0000D8, "Member 'URCTracker::RCT_PhysicsConstraint' has a wrong offset!");
static_assert(offsetof(URCTracker, IsFirstOfCutLength) == 0x0000E0, "Member 'URCTracker::IsFirstOfCutLength' has a wrong offset!");
static_assert(offsetof(URCTracker, IsLastOfCutLength) == 0x0000E1, "Member 'URCTracker::IsLastOfCutLength' has a wrong offset!");

// Class RopeCutting.RopeCuttingController
// 0x0000 (0x02A0 - 0x02A0)
class URopeCuttingController final : public USceneComponent
{
public:
	class FName GetCutComponentName_RC(class UPrimitiveComponent* HitCollisionComponent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RopeCuttingController">();
	}
	static class URopeCuttingController* GetDefaultObj()
	{
		return GetDefaultObjImpl<URopeCuttingController>();
	}
};
static_assert(alignof(URopeCuttingController) == 0x000010, "Wrong alignment on URopeCuttingController");
static_assert(sizeof(URopeCuttingController) == 0x0002A0, "Wrong size on URopeCuttingController");

// Class RopeCutting.RopeCuttingMessage
// 0x0000 (0x0028 - 0x0028)
class IRopeCuttingMessage final : public IInterface
{
public:
	void ActorMessageBeginCut_RC(class UPrimitiveComponent* HitCollisionComponent, class FName RopeComponentUniqueIdentifier);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RopeCuttingMessage">();
	}
	static class IRopeCuttingMessage* GetDefaultObj()
	{
		return GetDefaultObjImpl<IRopeCuttingMessage>();
	}
};
static_assert(alignof(IRopeCuttingMessage) == 0x000008, "Wrong alignment on IRopeCuttingMessage");
static_assert(sizeof(IRopeCuttingMessage) == 0x000028, "Wrong size on IRopeCuttingMessage");

// Class RopeCutting.RopePhy
// 0x0190 (0x0430 - 0x02A0)
class URopePhy final : public USceneComponent
{
public:
	class UStaticMesh*                            StartMeshTypeDARC;                                 // 0x02A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMesh*                            Mesh01TypeDARC;                                    // 0x02A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMesh*                            Mesh02TypeDARC;                                    // 0x02B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMesh*                            Mesh03TypeDARC;                                    // 0x02B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMesh*                            Mesh04TypeDARC;                                    // 0x02C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMesh*                            EndMeshTypeDARC;                                   // 0x02C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USplineMeshComponent*                   SplineMeshPRC;                                     // 0x02D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USphereComponent*                       SphereCollPRC;                                     // 0x02D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USplineComponent*                       SplinePRC;                                         // 0x02E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USplineComponent*                       UserSplinePRC;                                     // 0x02E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USplineComponent*                       SplineBuildPRC;                                    // 0x02F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPhysicsConstraintComponent*            PhysicsConstraintPRC;                              // 0x02F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class USphereComponent*>               CollisionArrayARC;                                 // 0x0300(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class USplineMeshComponent*>           SplineMeshArrayARC;                                // 0x0310(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UPhysicsConstraintComponent*>    PhysicsConstraintArrayARC;                         // 0x0320(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	float                                         CollUnitScaleCRC;                                  // 0x0330(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AngularDampeningCRC;                               // 0x0334(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LinearDampeningCRC;                                // 0x0338(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         VelocitySolverCRC;                                 // 0x033C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PositionSolverCRC;                                 // 0x0340(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         StabilizationThresholdMultiplierCRC;               // 0x0344(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SleepThresholdMultiplierCRC;                       // 0x0348(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         InertiaTensorScaleCRC;                             // 0x034C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   GenericSharedTagCRC;                               // 0x0350(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MassCRC;                                           // 0x0358(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MassScaleCRC;                                      // 0x035C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 InstanceSpecificIDStrBRC;                          // 0x0360(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   InstanceSpecificIDTagBRC;                          // 0x0370(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         UnitLengthBVRC;                                    // 0x0378(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          UsedInGameEG;                                      // 0x037C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          UserSplineSetToSocketLocBRC;                       // 0x037D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          HasBuiltBRC;                                       // 0x037E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1990[0x1];                                     // 0x037F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartMeshWidthSMRC;                                // 0x0380(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1991[0x4];                                     // 0x0384(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     StartMeshMaterial01SMRC;                           // 0x0388(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                     StartMeshMaterial02SMRC;                           // 0x0390(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Mesh01WidthSMRC;                                   // 0x0398(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1992[0x4];                                     // 0x039C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Mesh01Material01SMRC;                              // 0x03A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                     Mesh01Material02SMRC;                              // 0x03A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Mesh02WidthSMRC;                                   // 0x03B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1993[0x4];                                     // 0x03B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Mesh02Material01SMRC;                              // 0x03B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                     Mesh02Material02SMRC;                              // 0x03C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Mesh03WidthSMRC;                                   // 0x03C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1994[0x4];                                     // 0x03CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Mesh03Material01SMRC;                              // 0x03D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                     Mesh03Material02SMRC;                              // 0x03D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Mesh04WidthSMRC;                                   // 0x03E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1995[0x4];                                     // 0x03E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Mesh04Material01SMRC;                              // 0x03E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                     Mesh04Material02SMRC;                              // 0x03F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EndMeshWidthSMRC;                                  // 0x03F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1996[0x4];                                     // 0x03FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     EndMeshMaterial01SMRC;                             // 0x0400(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                     EndMeshMaterial02SMRC;                             // 0x0408(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AngularDrivePositionStrengthConsRC;                // 0x0410(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AngularDriveVelocityStrengthConsRC;                // 0x0414(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SetAngularSwing1LimitConsRC;                       // 0x0418(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SetAngularSwing2LimitConsRC;                       // 0x041C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SetAngularTwistLimitConsRC;                        // 0x0420(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1997[0xC];                                     // 0x0424(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void AddPointsToSpline(class USplineComponent* SplineToGrow, class USplineComponent* UserSplineCRSIn, const int32 NumberOfLoopsAPTSIn, const float UnitLengthAPTSIn, const struct FVector& RopeOffsetAPTSIn);
	static void AdjustRenderSplineLocation(class USplineComponent* RenderSpline, class USplineComponent* UserSpline, class UPrimitiveComponent* AttachedPrimitive, const int32 NumberOfLoops, const class FName SocketName);
	static void ConfigureSplineMeshes(class USplineMeshComponent* SplineMeshConfigSMInput, class UStaticMesh* MeshTypeConfigSMInput, float MeshWidthConfigSMInput, class UMaterialInterface* MeshMaterial01ConfigSMInput, class UMaterialInterface* MeshMaterial02ConfigSMInput);
	static void CreateSpline(class USplineComponent* InSplineCS, const struct FVector& WorldLocationCS, const struct FRotator& WorldRotationCS, class UWorld* WorldRefCSIn, class USceneComponent* SelfRefCSIn);
	static void CreateSplineMeshes(class USplineMeshComponent* SplineMeshCSMInput, class UWorld* WorldRefCSMIn, class USplineComponent* SplineOwnerRefCSMIn);
	static const class FName CreateUniqueName(const class FString& ComponentType, const int32 ComponentNumber, const class FString& ThisComponentStrNameCUNIn);
	static void MakePhysConstr(class UPhysicsConstraintComponent* PhyConstrMPCIn, class UWorld* WorldRefMPCIn, const struct FVector& WorldLocationMPCIn, class USphereComponent* CollRefAttachMPCIn);
	static void PhyConstrConfig(class UPhysicsConstraintComponent* PhyConstrIn, float SetAngularSwing1LimitPCCIn, float SetAngularSwing2LimitPCCIn, float SetAngularTwistLimitPCCIn, float PositionStrengthPCCIn, float VelocityStrengthPCCIn);
	static void SetSplMLocTang(class USplineComponent* ITargetSpline, class USplineMeshComponent* InTargetSplM, const int32 IEditPoint, const float UnitLengthSSMLTIn);
	static void SphereCollisionConfig(bool ShouldBlock, bool SimPhysics, class USphereComponent* SphereCollisionIn, float AngularDampeningSCCIn, float LinearDampeningSCCIn, float PositionSolverSCCIn, float VelocitySolverSCCIn, float StabilizationThresholdMultiplierSCCIn, float SleepThresholdMultiplierSCCIn, float InertiaTensorScaleSCCIn, float CollUnitScaleSCCIn, float Mass, float MassScale);
	static void SplineUpDir(class USplineComponent* ITargetSpline, const float ISplineUpDirClamp);

	TArray<class USphereComponent*> Build_RC(class UStaticMesh* Mesh, class UStaticMesh* StartEndMesh, float CollisionScale, class USplineComponent* UserSpline, float UnitLength, const struct FVector& RopeOffset, bool DisableRopeOffset);
	TArray<class USphereComponent*> Collision_RC(float CollisionScale, float AngularDampening, float LinearDampening, float VelocitySolverIterationCount, float PositionSolverIterationCount, float StabilizationThresholdMultiplier, float SleepThresholdMultiplier, float InertiaTensorScale, float Mass, float MassScale);
	TArray<class UPhysicsConstraintComponent*> Constraint_RC(const int32 AngularDrivePositionStrength, const int32 AngularDriveVelocityStrength, const int32 SetAngularSwing1Limit, const int32 SetAngularSwing2Limit, const int32 SetAngularTwistLimit);
	void Destroy_RC();
	TArray<class USphereComponent*> GetCollisionArray_RC();
	class USphereComponent* GetFirstCollisionObject_RC();
	class USphereComponent* GetLastCollisionObject_RC();
	class USplineComponent* GetSpline_RC();
	TArray<class USplineMeshComponent*> Mesh_RC(class UStaticMesh* StartMesh, float StartMeshWidth, class UMaterialInterface* StartMeshMat01, class UMaterialInterface* StartMeshMat02, class UStaticMesh* Mesh01, float Mesh01Width, class UMaterialInterface* Mesh01Mat01, class UMaterialInterface* Mesh01Mat02, class UStaticMesh* Mesh02, float Mesh02Width, class UMaterialInterface* Mesh02Mat01, class UMaterialInterface* Mesh02Mat02, class UStaticMesh* Mesh03, float Mesh03Width, class UMaterialInterface* Mesh03Mat01, class UMaterialInterface* Mesh03Mat02, class UStaticMesh* Mesh04, float Mesh04Width, class UMaterialInterface* Mesh04Mat01, class UMaterialInterface* Mesh04Mat02, class UStaticMesh* EndMesh, float EndMeshWidth, class UMaterialInterface* EndMeshMat01, class UMaterialInterface* EndMeshMat02);
	void OnTimerEnd();
	void RuntimeUpdate_RC();
	void SetUserSplineEndLocation_RC(class USplineComponent* UserSpline, const struct FVector& LocationUserSplineEnd, bool UseRelativeLocationUserSplineEnd);
	void SetUserSplineStartLocation_RC(class USplineComponent* UserSpline, const struct FVector& LocationUserSplineStart, bool UseRelativeLocationUserSplineStart);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RopePhy">();
	}
	static class URopePhy* GetDefaultObj()
	{
		return GetDefaultObjImpl<URopePhy>();
	}
};
static_assert(alignof(URopePhy) == 0x000010, "Wrong alignment on URopePhy");
static_assert(sizeof(URopePhy) == 0x000430, "Wrong size on URopePhy");
static_assert(offsetof(URopePhy, StartMeshTypeDARC) == 0x0002A0, "Member 'URopePhy::StartMeshTypeDARC' has a wrong offset!");
static_assert(offsetof(URopePhy, Mesh01TypeDARC) == 0x0002A8, "Member 'URopePhy::Mesh01TypeDARC' has a wrong offset!");
static_assert(offsetof(URopePhy, Mesh02TypeDARC) == 0x0002B0, "Member 'URopePhy::Mesh02TypeDARC' has a wrong offset!");
static_assert(offsetof(URopePhy, Mesh03TypeDARC) == 0x0002B8, "Member 'URopePhy::Mesh03TypeDARC' has a wrong offset!");
static_assert(offsetof(URopePhy, Mesh04TypeDARC) == 0x0002C0, "Member 'URopePhy::Mesh04TypeDARC' has a wrong offset!");
static_assert(offsetof(URopePhy, EndMeshTypeDARC) == 0x0002C8, "Member 'URopePhy::EndMeshTypeDARC' has a wrong offset!");
static_assert(offsetof(URopePhy, SplineMeshPRC) == 0x0002D0, "Member 'URopePhy::SplineMeshPRC' has a wrong offset!");
static_assert(offsetof(URopePhy, SphereCollPRC) == 0x0002D8, "Member 'URopePhy::SphereCollPRC' has a wrong offset!");
static_assert(offsetof(URopePhy, SplinePRC) == 0x0002E0, "Member 'URopePhy::SplinePRC' has a wrong offset!");
static_assert(offsetof(URopePhy, UserSplinePRC) == 0x0002E8, "Member 'URopePhy::UserSplinePRC' has a wrong offset!");
static_assert(offsetof(URopePhy, SplineBuildPRC) == 0x0002F0, "Member 'URopePhy::SplineBuildPRC' has a wrong offset!");
static_assert(offsetof(URopePhy, PhysicsConstraintPRC) == 0x0002F8, "Member 'URopePhy::PhysicsConstraintPRC' has a wrong offset!");
static_assert(offsetof(URopePhy, CollisionArrayARC) == 0x000300, "Member 'URopePhy::CollisionArrayARC' has a wrong offset!");
static_assert(offsetof(URopePhy, SplineMeshArrayARC) == 0x000310, "Member 'URopePhy::SplineMeshArrayARC' has a wrong offset!");
static_assert(offsetof(URopePhy, PhysicsConstraintArrayARC) == 0x000320, "Member 'URopePhy::PhysicsConstraintArrayARC' has a wrong offset!");
static_assert(offsetof(URopePhy, CollUnitScaleCRC) == 0x000330, "Member 'URopePhy::CollUnitScaleCRC' has a wrong offset!");
static_assert(offsetof(URopePhy, AngularDampeningCRC) == 0x000334, "Member 'URopePhy::AngularDampeningCRC' has a wrong offset!");
static_assert(offsetof(URopePhy, LinearDampeningCRC) == 0x000338, "Member 'URopePhy::LinearDampeningCRC' has a wrong offset!");
static_assert(offsetof(URopePhy, VelocitySolverCRC) == 0x00033C, "Member 'URopePhy::VelocitySolverCRC' has a wrong offset!");
static_assert(offsetof(URopePhy, PositionSolverCRC) == 0x000340, "Member 'URopePhy::PositionSolverCRC' has a wrong offset!");
static_assert(offsetof(URopePhy, StabilizationThresholdMultiplierCRC) == 0x000344, "Member 'URopePhy::StabilizationThresholdMultiplierCRC' has a wrong offset!");
static_assert(offsetof(URopePhy, SleepThresholdMultiplierCRC) == 0x000348, "Member 'URopePhy::SleepThresholdMultiplierCRC' has a wrong offset!");
static_assert(offsetof(URopePhy, InertiaTensorScaleCRC) == 0x00034C, "Member 'URopePhy::InertiaTensorScaleCRC' has a wrong offset!");
static_assert(offsetof(URopePhy, GenericSharedTagCRC) == 0x000350, "Member 'URopePhy::GenericSharedTagCRC' has a wrong offset!");
static_assert(offsetof(URopePhy, MassCRC) == 0x000358, "Member 'URopePhy::MassCRC' has a wrong offset!");
static_assert(offsetof(URopePhy, MassScaleCRC) == 0x00035C, "Member 'URopePhy::MassScaleCRC' has a wrong offset!");
static_assert(offsetof(URopePhy, InstanceSpecificIDStrBRC) == 0x000360, "Member 'URopePhy::InstanceSpecificIDStrBRC' has a wrong offset!");
static_assert(offsetof(URopePhy, InstanceSpecificIDTagBRC) == 0x000370, "Member 'URopePhy::InstanceSpecificIDTagBRC' has a wrong offset!");
static_assert(offsetof(URopePhy, UnitLengthBVRC) == 0x000378, "Member 'URopePhy::UnitLengthBVRC' has a wrong offset!");
static_assert(offsetof(URopePhy, UsedInGameEG) == 0x00037C, "Member 'URopePhy::UsedInGameEG' has a wrong offset!");
static_assert(offsetof(URopePhy, UserSplineSetToSocketLocBRC) == 0x00037D, "Member 'URopePhy::UserSplineSetToSocketLocBRC' has a wrong offset!");
static_assert(offsetof(URopePhy, HasBuiltBRC) == 0x00037E, "Member 'URopePhy::HasBuiltBRC' has a wrong offset!");
static_assert(offsetof(URopePhy, StartMeshWidthSMRC) == 0x000380, "Member 'URopePhy::StartMeshWidthSMRC' has a wrong offset!");
static_assert(offsetof(URopePhy, StartMeshMaterial01SMRC) == 0x000388, "Member 'URopePhy::StartMeshMaterial01SMRC' has a wrong offset!");
static_assert(offsetof(URopePhy, StartMeshMaterial02SMRC) == 0x000390, "Member 'URopePhy::StartMeshMaterial02SMRC' has a wrong offset!");
static_assert(offsetof(URopePhy, Mesh01WidthSMRC) == 0x000398, "Member 'URopePhy::Mesh01WidthSMRC' has a wrong offset!");
static_assert(offsetof(URopePhy, Mesh01Material01SMRC) == 0x0003A0, "Member 'URopePhy::Mesh01Material01SMRC' has a wrong offset!");
static_assert(offsetof(URopePhy, Mesh01Material02SMRC) == 0x0003A8, "Member 'URopePhy::Mesh01Material02SMRC' has a wrong offset!");
static_assert(offsetof(URopePhy, Mesh02WidthSMRC) == 0x0003B0, "Member 'URopePhy::Mesh02WidthSMRC' has a wrong offset!");
static_assert(offsetof(URopePhy, Mesh02Material01SMRC) == 0x0003B8, "Member 'URopePhy::Mesh02Material01SMRC' has a wrong offset!");
static_assert(offsetof(URopePhy, Mesh02Material02SMRC) == 0x0003C0, "Member 'URopePhy::Mesh02Material02SMRC' has a wrong offset!");
static_assert(offsetof(URopePhy, Mesh03WidthSMRC) == 0x0003C8, "Member 'URopePhy::Mesh03WidthSMRC' has a wrong offset!");
static_assert(offsetof(URopePhy, Mesh03Material01SMRC) == 0x0003D0, "Member 'URopePhy::Mesh03Material01SMRC' has a wrong offset!");
static_assert(offsetof(URopePhy, Mesh03Material02SMRC) == 0x0003D8, "Member 'URopePhy::Mesh03Material02SMRC' has a wrong offset!");
static_assert(offsetof(URopePhy, Mesh04WidthSMRC) == 0x0003E0, "Member 'URopePhy::Mesh04WidthSMRC' has a wrong offset!");
static_assert(offsetof(URopePhy, Mesh04Material01SMRC) == 0x0003E8, "Member 'URopePhy::Mesh04Material01SMRC' has a wrong offset!");
static_assert(offsetof(URopePhy, Mesh04Material02SMRC) == 0x0003F0, "Member 'URopePhy::Mesh04Material02SMRC' has a wrong offset!");
static_assert(offsetof(URopePhy, EndMeshWidthSMRC) == 0x0003F8, "Member 'URopePhy::EndMeshWidthSMRC' has a wrong offset!");
static_assert(offsetof(URopePhy, EndMeshMaterial01SMRC) == 0x000400, "Member 'URopePhy::EndMeshMaterial01SMRC' has a wrong offset!");
static_assert(offsetof(URopePhy, EndMeshMaterial02SMRC) == 0x000408, "Member 'URopePhy::EndMeshMaterial02SMRC' has a wrong offset!");
static_assert(offsetof(URopePhy, AngularDrivePositionStrengthConsRC) == 0x000410, "Member 'URopePhy::AngularDrivePositionStrengthConsRC' has a wrong offset!");
static_assert(offsetof(URopePhy, AngularDriveVelocityStrengthConsRC) == 0x000414, "Member 'URopePhy::AngularDriveVelocityStrengthConsRC' has a wrong offset!");
static_assert(offsetof(URopePhy, SetAngularSwing1LimitConsRC) == 0x000418, "Member 'URopePhy::SetAngularSwing1LimitConsRC' has a wrong offset!");
static_assert(offsetof(URopePhy, SetAngularSwing2LimitConsRC) == 0x00041C, "Member 'URopePhy::SetAngularSwing2LimitConsRC' has a wrong offset!");
static_assert(offsetof(URopePhy, SetAngularTwistLimitConsRC) == 0x000420, "Member 'URopePhy::SetAngularTwistLimitConsRC' has a wrong offset!");

// Class RopeCutting.RopeStatic
// 0x0130 (0x03D0 - 0x02A0)
class URopeStatic final : public USceneComponent
{
public:
	class UStaticMesh*                            StartMeshTypeDARC;                                 // 0x02A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMesh*                            Mesh01TypeDARC;                                    // 0x02A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMesh*                            Mesh02TypeDARC;                                    // 0x02B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMesh*                            Mesh03TypeDARC;                                    // 0x02B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMesh*                            Mesh04TypeDARC;                                    // 0x02C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMesh*                            EndMeshTypeDARC;                                   // 0x02C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USplineMeshComponent*                   SplineMeshPRC;                                     // 0x02D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USphereComponent*                       SphereCollPRC;                                     // 0x02D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USplineComponent*                       SplinePRC;                                         // 0x02E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USplineComponent*                       UserSplinePRC;                                     // 0x02E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USplineComponent*                       SplineBuildPRC;                                    // 0x02F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class USphereComponent*>               CollisionArrayCRC;                                 // 0x02F8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class USplineMeshComponent*>           SplineMeshArraySMRC;                               // 0x0308(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	float                                         CollUnitScaleCRC;                                  // 0x0318(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19AA[0x4];                                     // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InstanceSpecificIDStrBRC;                          // 0x0320(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   InstanceSpecificIDTagBRC;                          // 0x0330(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         UnitLengthBVRC;                                    // 0x0338(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          UserSplineSetToSocketLocBRC;                       // 0x033C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          HasBuiltBRC;                                       // 0x033D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19AB[0x2];                                     // 0x033E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartMeshWidthSMRC;                                // 0x0340(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19AC[0x4];                                     // 0x0344(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     StartMeshMaterial01SMRC;                           // 0x0348(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                     StartMeshMaterial02SMRC;                           // 0x0350(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Mesh01WidthSMRC;                                   // 0x0358(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19AD[0x4];                                     // 0x035C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Mesh01Material01SMRC;                              // 0x0360(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                     Mesh01Material02SMRC;                              // 0x0368(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Mesh02WidthSMRC;                                   // 0x0370(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19AE[0x4];                                     // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Mesh02Material01SMRC;                              // 0x0378(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                     Mesh02Material02SMRC;                              // 0x0380(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Mesh03WidthSMRC;                                   // 0x0388(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19AF[0x4];                                     // 0x038C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Mesh03Material01SMRC;                              // 0x0390(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                     Mesh03Material02SMRC;                              // 0x0398(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Mesh04WidthSMRC;                                   // 0x03A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19B0[0x4];                                     // 0x03A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Mesh04Material01SMRC;                              // 0x03A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                     Mesh04Material02SMRC;                              // 0x03B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EndMeshWidthSMRC;                                  // 0x03B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19B1[0x4];                                     // 0x03BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     EndMeshMaterial01SMRC;                             // 0x03C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                     EndMeshMaterial02SMRC;                             // 0x03C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static void AddPointsToSpline(class USplineComponent* SplineToGrow, class USplineComponent* UserSplineCRSIn, const int32 NumberOfLoopsAPTSIn, const float UnitLengthAPTSIn, const struct FVector& RopeOffsetAPTSIn);
	static void AdjustRenderSplineLocation(class USplineComponent* RenderSpline, class USplineComponent* UserSpline, class UPrimitiveComponent* AttachedPrimitive, const int32 NumberOfLoops, const class FName SocketName);
	static void ConfigureSplineMeshes(class USplineMeshComponent* SplineMeshConfigSMInput, class UStaticMesh* MeshTypeConfigSMInput, float MeshWidthConfigSMInput, class UMaterialInterface* MeshMaterial01ConfigSMInput, class UMaterialInterface* MeshMaterial02ConfigSMInput);
	static void CreateSpline(class USplineComponent* InSplineCS, const struct FVector& WorldLocationCS, const struct FRotator& WorldRotationCS, class UWorld* WorldRefCSIn, class USceneComponent* SelfRefCSIn);
	static void CreateSplineMeshes(class USplineMeshComponent* SplineMeshCSMInput, class UWorld* WorldRefCSMIn, class USplineComponent* SplineOwnerRefCSMIn);
	static const class FName CreateUniqueName(const class FString& ComponentType, const int32 ComponentNumber, const class FString& ThisComponentStrNameCUNIn);
	static void SetSplMLocTang(class USplineComponent* ITargetSpline, class USplineMeshComponent* InTargetSplM, const int32 IEditPoint, const float UnitLengthSSMLTIn);
	static void SplineUpDir(class USplineComponent* ITargetSpline, const float ISplineUpDirClamp);

	TArray<class USphereComponent*> Build_RC(class USplineComponent* UserSpline, class UStaticMesh* Mesh, class UStaticMesh* StartEndMesh, int32 CollisionScale, float UnitLength, const struct FVector& RopeOffset, bool DisableRopeOffset);
	void Destroy_RC();
	class USplineComponent* Get_Spline_RC();
	TArray<class USphereComponent*> GetCollisionArray_RC();
	class USphereComponent* GetFirstCollisionObject_RC();
	class USphereComponent* GetLastCollisionObject_RC();
	TArray<class USplineMeshComponent*> Mesh_RC(class UStaticMesh* StartMesh, float StartMeshWidth, class UMaterialInterface* StartMeshMat01, class UMaterialInterface* StartMeshMat02, class UStaticMesh* Mesh01, float Mesh01Width, class UMaterialInterface* Mesh01Mat01, class UMaterialInterface* Mesh01Mat02, class UStaticMesh* Mesh02, float Mesh02Width, class UMaterialInterface* Mesh02Mat01, class UMaterialInterface* Mesh02Mat02, class UStaticMesh* Mesh03, float Mesh03Width, class UMaterialInterface* Mesh03Mat01, class UMaterialInterface* Mesh03Mat02, class UStaticMesh* Mesh04, float Mesh04Width, class UMaterialInterface* Mesh04Mat01, class UMaterialInterface* Mesh04Mat02, class UStaticMesh* EndMesh, float EndMeshWidth, class UMaterialInterface* EndMeshMat01, class UMaterialInterface* EndMeshMat02);
	void SetUserSplineEndLocation_RC(class USplineComponent* UserSpline, const struct FVector& Location, bool UseRelativeLocation);
	void SetUserSplineStartLocation_RC(class USplineComponent* UserSpline, const struct FVector& Location, bool UseRelativeLocation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RopeStatic">();
	}
	static class URopeStatic* GetDefaultObj()
	{
		return GetDefaultObjImpl<URopeStatic>();
	}
};
static_assert(alignof(URopeStatic) == 0x000010, "Wrong alignment on URopeStatic");
static_assert(sizeof(URopeStatic) == 0x0003D0, "Wrong size on URopeStatic");
static_assert(offsetof(URopeStatic, StartMeshTypeDARC) == 0x0002A0, "Member 'URopeStatic::StartMeshTypeDARC' has a wrong offset!");
static_assert(offsetof(URopeStatic, Mesh01TypeDARC) == 0x0002A8, "Member 'URopeStatic::Mesh01TypeDARC' has a wrong offset!");
static_assert(offsetof(URopeStatic, Mesh02TypeDARC) == 0x0002B0, "Member 'URopeStatic::Mesh02TypeDARC' has a wrong offset!");
static_assert(offsetof(URopeStatic, Mesh03TypeDARC) == 0x0002B8, "Member 'URopeStatic::Mesh03TypeDARC' has a wrong offset!");
static_assert(offsetof(URopeStatic, Mesh04TypeDARC) == 0x0002C0, "Member 'URopeStatic::Mesh04TypeDARC' has a wrong offset!");
static_assert(offsetof(URopeStatic, EndMeshTypeDARC) == 0x0002C8, "Member 'URopeStatic::EndMeshTypeDARC' has a wrong offset!");
static_assert(offsetof(URopeStatic, SplineMeshPRC) == 0x0002D0, "Member 'URopeStatic::SplineMeshPRC' has a wrong offset!");
static_assert(offsetof(URopeStatic, SphereCollPRC) == 0x0002D8, "Member 'URopeStatic::SphereCollPRC' has a wrong offset!");
static_assert(offsetof(URopeStatic, SplinePRC) == 0x0002E0, "Member 'URopeStatic::SplinePRC' has a wrong offset!");
static_assert(offsetof(URopeStatic, UserSplinePRC) == 0x0002E8, "Member 'URopeStatic::UserSplinePRC' has a wrong offset!");
static_assert(offsetof(URopeStatic, SplineBuildPRC) == 0x0002F0, "Member 'URopeStatic::SplineBuildPRC' has a wrong offset!");
static_assert(offsetof(URopeStatic, CollisionArrayCRC) == 0x0002F8, "Member 'URopeStatic::CollisionArrayCRC' has a wrong offset!");
static_assert(offsetof(URopeStatic, SplineMeshArraySMRC) == 0x000308, "Member 'URopeStatic::SplineMeshArraySMRC' has a wrong offset!");
static_assert(offsetof(URopeStatic, CollUnitScaleCRC) == 0x000318, "Member 'URopeStatic::CollUnitScaleCRC' has a wrong offset!");
static_assert(offsetof(URopeStatic, InstanceSpecificIDStrBRC) == 0x000320, "Member 'URopeStatic::InstanceSpecificIDStrBRC' has a wrong offset!");
static_assert(offsetof(URopeStatic, InstanceSpecificIDTagBRC) == 0x000330, "Member 'URopeStatic::InstanceSpecificIDTagBRC' has a wrong offset!");
static_assert(offsetof(URopeStatic, UnitLengthBVRC) == 0x000338, "Member 'URopeStatic::UnitLengthBVRC' has a wrong offset!");
static_assert(offsetof(URopeStatic, UserSplineSetToSocketLocBRC) == 0x00033C, "Member 'URopeStatic::UserSplineSetToSocketLocBRC' has a wrong offset!");
static_assert(offsetof(URopeStatic, HasBuiltBRC) == 0x00033D, "Member 'URopeStatic::HasBuiltBRC' has a wrong offset!");
static_assert(offsetof(URopeStatic, StartMeshWidthSMRC) == 0x000340, "Member 'URopeStatic::StartMeshWidthSMRC' has a wrong offset!");
static_assert(offsetof(URopeStatic, StartMeshMaterial01SMRC) == 0x000348, "Member 'URopeStatic::StartMeshMaterial01SMRC' has a wrong offset!");
static_assert(offsetof(URopeStatic, StartMeshMaterial02SMRC) == 0x000350, "Member 'URopeStatic::StartMeshMaterial02SMRC' has a wrong offset!");
static_assert(offsetof(URopeStatic, Mesh01WidthSMRC) == 0x000358, "Member 'URopeStatic::Mesh01WidthSMRC' has a wrong offset!");
static_assert(offsetof(URopeStatic, Mesh01Material01SMRC) == 0x000360, "Member 'URopeStatic::Mesh01Material01SMRC' has a wrong offset!");
static_assert(offsetof(URopeStatic, Mesh01Material02SMRC) == 0x000368, "Member 'URopeStatic::Mesh01Material02SMRC' has a wrong offset!");
static_assert(offsetof(URopeStatic, Mesh02WidthSMRC) == 0x000370, "Member 'URopeStatic::Mesh02WidthSMRC' has a wrong offset!");
static_assert(offsetof(URopeStatic, Mesh02Material01SMRC) == 0x000378, "Member 'URopeStatic::Mesh02Material01SMRC' has a wrong offset!");
static_assert(offsetof(URopeStatic, Mesh02Material02SMRC) == 0x000380, "Member 'URopeStatic::Mesh02Material02SMRC' has a wrong offset!");
static_assert(offsetof(URopeStatic, Mesh03WidthSMRC) == 0x000388, "Member 'URopeStatic::Mesh03WidthSMRC' has a wrong offset!");
static_assert(offsetof(URopeStatic, Mesh03Material01SMRC) == 0x000390, "Member 'URopeStatic::Mesh03Material01SMRC' has a wrong offset!");
static_assert(offsetof(URopeStatic, Mesh03Material02SMRC) == 0x000398, "Member 'URopeStatic::Mesh03Material02SMRC' has a wrong offset!");
static_assert(offsetof(URopeStatic, Mesh04WidthSMRC) == 0x0003A0, "Member 'URopeStatic::Mesh04WidthSMRC' has a wrong offset!");
static_assert(offsetof(URopeStatic, Mesh04Material01SMRC) == 0x0003A8, "Member 'URopeStatic::Mesh04Material01SMRC' has a wrong offset!");
static_assert(offsetof(URopeStatic, Mesh04Material02SMRC) == 0x0003B0, "Member 'URopeStatic::Mesh04Material02SMRC' has a wrong offset!");
static_assert(offsetof(URopeStatic, EndMeshWidthSMRC) == 0x0003B8, "Member 'URopeStatic::EndMeshWidthSMRC' has a wrong offset!");
static_assert(offsetof(URopeStatic, EndMeshMaterial01SMRC) == 0x0003C0, "Member 'URopeStatic::EndMeshMaterial01SMRC' has a wrong offset!");
static_assert(offsetof(URopeStatic, EndMeshMaterial02SMRC) == 0x0003C8, "Member 'URopeStatic::EndMeshMaterial02SMRC' has a wrong offset!");

// Class RopeCutting.Rope_Cutting
// 0x0330 (0x05D0 - 0x02A0)
class URope_Cutting final : public USceneComponent
{
public:
	class UStaticMesh*                            StartMeshTypeDARC;                                 // 0x02A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMesh*                            Mesh01TypeDARC;                                    // 0x02A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMesh*                            Mesh02TypeDARC;                                    // 0x02B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMesh*                            Mesh03TypeDARC;                                    // 0x02B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMesh*                            Mesh04TypeDARC;                                    // 0x02C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMesh*                            EndMeshTypeDARC;                                   // 0x02C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UParticleSystem*                        EmitterDefaultTypeDARC;                            // 0x02D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USoundCue*                              SoundDefaultTypeDARC;                              // 0x02D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class URCTracker*>                     TrackerArrayARC;                                   // 0x02E0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UPhysicsConstraintComponent*>    AttachedStartConstraintsARC;                       // 0x02F0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UPhysicsConstraintComponent*>    AttachedEndConstraintsARC;                         // 0x0300(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class UPrimitiveComponent*                    StartPrimitiveASRC;                                // 0x0310(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPrimitiveComponent*                    EndPrimitiveAERC;                                  // 0x0318(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USplineMeshComponent*                   SplineMeshPRC;                                     // 0x0320(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UParticleSystemComponent*               EmitterPRC;                                        // 0x0328(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAudioComponent*                        SoundPRC;                                          // 0x0330(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USphereComponent*                       SphereCollPRC;                                     // 0x0338(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPhysicsConstraintComponent*            PhysicsConstraintPRC;                              // 0x0340(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URCTracker*                             DataTracker;                                       // 0x0348(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USplineComponent*                       SplinePRC;                                         // 0x0350(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USplineComponent*                       UserSplinePRC;                                     // 0x0358(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USplineComponent*                       SplineBuildPRC;                                    // 0x0360(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URCTracker*                             ReceivingTrackerCVRC;                              // 0x0368(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URCTracker*                             DonatingTrackerCVRC;                               // 0x0370(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USplineComponent*                       ReceivingSplineCVRC;                               // 0x0378(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USplineComponent*                       DonatingsplineCVRC;                                // 0x0380(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPhysicsConstraintComponent*            HitPhysicsConstraintCVRC;                          // 0x0388(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USphereComponent*                       ReceivingCollisionRC;                              // 0x0390(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USphereComponent*                       ReplacementCollisionRC;                            // 0x0398(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         InverseRuntimeUpdateRateRTRC;                      // 0x03A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         PositionNumberRTRC;                                // 0x03A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         NextPositionNumberRTRC;                            // 0x03A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          IsLastOfLengthRTRC;                                // 0x03AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19BF[0x3];                                     // 0x03AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   StartSocketASRC;                                   // 0x03B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   StartBoneASRC;                                     // 0x03B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         StartAttachAngularSwing1LimitASRC;                 // 0x03C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         StartAttachAngularSwing2LimitASRC;                 // 0x03C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         StartAttachAngularTwistLimitASRC;                  // 0x03C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         StartAttachPositionStrengthASRC;                   // 0x03CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         StartAttachVelocityStrengthASRC;                   // 0x03D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         StartAttachLoopCountASRC;                          // 0x03D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          StartAttachedASRC;                                 // 0x03D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          FirstCollImmobileSRC;                              // 0x03D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19C0[0x6];                                     // 0x03DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               FirstCollImmobileRotationASRC;                     // 0x03E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FVector                                FirstCollImmobileLocationASRC;                     // 0x03F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   EndSocketAERC;                                     // 0x0410(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   EndBoneAERC;                                       // 0x0418(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EndAttachAngularSwing1LimitAERC;                   // 0x0420(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EndAttachAngularSwing2LimitAERC;                   // 0x0424(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EndAttachAngularTwistLimitAERC;                    // 0x0428(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EndAttachPositionStrengthAERC;                     // 0x042C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EndAttachVelocityStrengthAERC;                     // 0x0430(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          IsEndImmobileAERC;                                 // 0x0434(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          EndAttachedAERC;                                   // 0x0435(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          LastCollImmobileAERC;                              // 0x0436(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19C1[0x1];                                     // 0x0437(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               LastCollImmobileRotationAERC;                      // 0x0438(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FVector                                LastCollImmobileLocationAERC;                      // 0x0450(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CollUnitScaleCRC;                                  // 0x0468(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AngularDampeningCRC;                               // 0x046C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LinearDampeningCRC;                                // 0x0470(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         VelocitySolverCRC;                                 // 0x0474(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PositionSolverCRC;                                 // 0x0478(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         StabilizationThresholdMultiplierCRC;               // 0x047C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SleepThresholdMultiplierCRC;                       // 0x0480(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         InertiaTensorScaleCRC;                             // 0x0484(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   GenericSharedTagCRC;                               // 0x0488(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MassCRC;                                           // 0x0490(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MassScaleCRC;                                      // 0x0494(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AngularDrivePositionStrengthConsRC;                // 0x0498(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AngularDriveVelocityStrengthConsRC;                // 0x049C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SetAngularSwing1LimitConsRC;                       // 0x04A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SetAngularSwing2LimitConsRC;                       // 0x04A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SetAngularTwistLimitConsRC;                        // 0x04A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          AllowCutMessageCVRC;                               // 0x04AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          BeginCutCVRC;                                      // 0x04AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          CutInProgressCVRC;                                 // 0x04AE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19C2[0x1];                                     // 0x04AF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CutCounterCVRC;                                    // 0x04B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19C3[0x4];                                     // 0x04B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InstanceSpecificIDStrBRC;                          // 0x04B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   InstanceSpecificIDTagBRC;                          // 0x04C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         UnitLengthBVRC;                                    // 0x04D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          UserSplineSetToSocketLocBRC;                       // 0x04D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          BlockCuttingBRC;                                   // 0x04D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          HasBuiltBRC;                                       // 0x04D6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19C4[0x1];                                     // 0x04D7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartMeshWidthSMRC;                                // 0x04D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19C5[0x4];                                     // 0x04DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     StartMeshMaterial01SMRC;                           // 0x04E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                     StartMeshMaterial02SMRC;                           // 0x04E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Mesh01WidthSMRC;                                   // 0x04F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19C6[0x4];                                     // 0x04F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Mesh01Material01SMRC;                              // 0x04F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                     Mesh01Material02SMRC;                              // 0x0500(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Mesh02WidthSMRC;                                   // 0x0508(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19C7[0x4];                                     // 0x050C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Mesh02Material01SMRC;                              // 0x0510(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                     Mesh02Material02SMRC;                              // 0x0518(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Mesh03WidthSMRC;                                   // 0x0520(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19C8[0x4];                                     // 0x0524(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Mesh03Material01SMRC;                              // 0x0528(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                     Mesh03Material02SMRC;                              // 0x0530(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Mesh04WidthSMRC;                                   // 0x0538(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19C9[0x4];                                     // 0x053C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Mesh04Material01SMRC;                              // 0x0540(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                     Mesh04Material02SMRC;                              // 0x0548(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EndMeshWidthSMRC;                                  // 0x0550(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19CA[0x4];                                     // 0x0554(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     EndMeshMaterial01SMRC;                             // 0x0558(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                     EndMeshMaterial02SMRC;                             // 0x0560(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          BeginGrowGRC;                                      // 0x0568(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19CB[0x3];                                     // 0x0569(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GrowLoopCountGRC;                                  // 0x056C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         GrowMeshSelectCountGRC;                            // 0x0570(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19CC[0x4];                                     // 0x0574(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                GrowLocationGRC;                                   // 0x0578(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          BeginShrinkSRC;                                    // 0x0590(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19CD[0x7];                                     // 0x0591(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USplineComponent*                       FirstSplineSRC;                                    // 0x0598(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                ShrinkLocationSRC;                                 // 0x05A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          UsedInGameEG;                                      // 0x05B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19CE[0x17];                                    // 0x05B9(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void AddPointsToBuildingSpline(class USplineComponent* SplineToGrow, const int32 NumberOfLoopsAPTSIn, const float UnitLengthAPTSIn);
	static void AddPointsToSpline(class USplineComponent* SplineToGrow, class USplineComponent* UserSplineCRSIn, const int32 NumberOfLoopsAPTSIn, const float UnitLengthAPTSIn, const struct FVector& RopeOffsetAPTSIn);
	static void AdjustRenderSplineLocation(class USplineComponent* RenderSpline, class USplineComponent* UserSpline, class UPrimitiveComponent* AttachedPrimitive, const int32 NumberOfLoops, const class FName SocketName);
	static void ConfigureSplineMeshes(class USplineMeshComponent* SplineMeshConfigSMInput, class UStaticMesh* MeshTypeConfigSMInput, float MeshWidthConfigSMInput, class UMaterialInterface* MeshMaterial01ConfigSMInput, class UMaterialInterface* MeshMaterial02ConfigSMInput);
	static void CreateSphereCollision(class USphereComponent* SphereCollisionCSCIn, class UWorld* WorldRefCSCIn, class USplineComponent* SplineRefCSCIn);
	static void CreateSpline(class USplineComponent* InSplineCS, const struct FVector& WorldLocationCS, const struct FRotator& WorldRotationCS, class UWorld* WorldRefCSIn, class USceneComponent* SelfRefCSIn);
	static void CreateSplineMeshes(class USplineMeshComponent* SplineMeshCSMInput, class UWorld* WorldRefCSMIn, class USplineComponent* SplineOwnerRefCSMIn);
	static const class FName CreateUniqueName(const class FString& ComponentType, const int32 ComponentNumber, const class FString& ThisComponentStrNameCUNIn);
	static void MakePhysConstr(class UPhysicsConstraintComponent* PhyConstrMPCIn, class UWorld* WorldRefMPCIn, const struct FVector& WorldLocationMPCIn, class USphereComponent* CollRefAttachMPCIn);
	static void PhyConstrConfig(class UPhysicsConstraintComponent* PhyConstrIn, float SetAngularSwing1LimitPCCIn, float SetAngularSwing2LimitPCCIn, float SetAngularTwistLimitPCCIn, float PositionStrengthPCCIn, float VelocityStrengthPCCIn);
	static void SetSplMLocTang(class USplineComponent* ITargetSpline, class USplineMeshComponent* InTargetSplM, const int32 IEditPoint, const float UnitLengthSSMLTIn);
	static void SphereCollisionConfig(bool ShouldBlock, bool SimPhysics, class USphereComponent* SphereCollisionIn, float AngularDampeningSCCIn, float LinearDampeningSCCIn, float PositionSolverSCCIn, float VelocitySolverSCCIn, float StabilizationThresholdMultiplierSCCIn, float SleepThresholdMultiplierSCCIn, float InertiaTensorScaleSCCIn, float CollUnitScaleSCCIn, const class FName GeneralName, class FName SpecificInstanceNameCSCIn, float Mass, float MassScale);
	static void SplineUpDir(class USplineComponent* ITargetSpline, const float ISplineUpDirClamp);
	static void TransferSphereCollision(class USphereComponent* SphereCollisionArrayTSCIn, class USplineComponent* TargetSplineTSCIn, const int32 EditPoint);
	static void TransferSplineMeshes(class USplineMeshComponent* SplMeshArrayTSMIn, class USplineComponent* TargetSplineTSMIn, const float UnitLengthTSMIn, const int32 IEditPoint);

	TArray<class UPhysicsConstraintComponent*> Attach_End_RC(class UPrimitiveComponent* EndPrimitive, const class FName EndSocket, const class FName EndBone, bool FurtherConstrain, bool IsImmobile, const float AngularSwing1Limit, const float AngularSwing2Limit, const float AngularTwistLimit, const float PositionStrength, const float VelocityStrength);
	TArray<class UPhysicsConstraintComponent*> Attach_Start_RC(class UPrimitiveComponent* StartPrimitive, const class FName StartSocket, const class FName StartBone, bool FurtherConstrain, bool IsImmobile, const float AngularSwing1Limit, const float AngularSwing2Limit, const float AngularTwistLimit, const float PositionStrength, const float VelocityStrength);
	TArray<class USphereComponent*> Build_RC(class USplineComponent* UserSpline, class UStaticMesh* Mesh, class UStaticMesh* StartEndMesh, float UnitLength, const struct FVector& RopeOffset, bool DisableRopeOffset, float RuntimeUpdateRate, bool BlockCutting);
	TArray<class USphereComponent*> Collision_RC(float CollisionScale, float AngularDampening, float LinearDampening, float VelocitySolverIterationCount, float PositionSolverIterationCount, float StabilizationThresholdMultiplier, float SleepThresholdMultiplier, float InertiaTensorScale, float Mass, float MassScale);
	TArray<class UPhysicsConstraintComponent*> Constraint_RC(const int32 AngularDrivePositionStrength, const int32 AngularDriveVelocityStrength, const int32 SetAngularSwing1Limit, const int32 SetAngularSwing2Limit, const int32 SetAngularTwistLimit);
	void CutRope();
	void Destroy_RC();
	void Detach_End_RC();
	void Detach_Start_RC();
	void Effect_RC(class UParticleSystem* Emitter, class USoundCue* Sound);
	TArray<class UPhysicsConstraintComponent*> Get_Attached_End_Constraints_RC();
	TArray<class UPhysicsConstraintComponent*> Get_Attached_Start_Constraints_RC();
	int32 Get_Collision_Sphere_Position(class UPrimitiveComponent* CollisionObjectForLookUp);
	TArray<class USphereComponent*> Get_Cut_Collision_Array(class UPrimitiveComponent* CollisionObjectForLookUp);
	TArray<class UPhysicsConstraintComponent*> Get_Cut_Constraint_Array(class UPrimitiveComponent* CollisionObjectForLookUp);
	void Get_Cut_Rope_Data_RC(class UPrimitiveComponent* CollisionObjectForLookUp, int32* Position, struct FVector* Location, TArray<class USphereComponent*>* CollisionArray, class UPrimitiveComponent** PreviousCollisionSphere, class UPrimitiveComponent** NextCollisionSphere, class UPhysicsConstraintComponent** Constraint, TArray<class UPhysicsConstraintComponent*>* ConstraintArray, class USplineMeshComponent** SplineMesh, TArray<class USplineMeshComponent*>* SplineMeshArray, class USplineComponent** Spline);
	class USplineComponent* Get_Cut_Spline(class UPrimitiveComponent* CollisionObjectForLookUp);
	TArray<class USplineMeshComponent*> Get_Cut_Spline_Mesh_Array(class UPrimitiveComponent* CollisionObjectForLookUp);
	class USplineComponent* Get_Spline_RC();
	TArray<class USphereComponent*> GetCollisionArray_RC();
	class USphereComponent* GetFirstCollisionObject_RC();
	struct FVector GetGrowTargetLocation_RC(const struct FVector& Location, bool Add, bool XAxis, bool YAxis, bool ZAxis, class USphereComponent** FirstCollisionSphere);
	class USphereComponent* GetLastCollisionObject_RC();
	TArray<class URCTracker*> GetOrderedTrackerArray(class USplineComponent* LookupSpline);
	class FName GetRopeCollisionObjectName_RC(class USphereComponent* RopeCollisionSphere);
	struct FVector GetShrinkTargetLocation_RC(const struct FVector& Location, bool Add, bool XAxis, bool YAxis, bool ZAxis, class USphereComponent** SecondCollisionSphere);
	void GrowRope_RC(class UPrimitiveComponent* GrowLocation);
	void GrowRopeImplement();
	void Immobilise_End_RC(bool StopTilt);
	void Immobilise_Start_RC(bool StopTilt);
	TArray<class USplineMeshComponent*> Mesh_RC(class UStaticMesh* StartMesh, float StartMeshWidth, class UMaterialInterface* StartMeshMat01, class UMaterialInterface* StartMeshMat02, class UStaticMesh* Mesh01, float Mesh01Width, class UMaterialInterface* Mesh01Mat01, class UMaterialInterface* Mesh01Mat02, class UStaticMesh* Mesh02, float Mesh02Width, class UMaterialInterface* Mesh02Mat01, class UMaterialInterface* Mesh02Mat02, class UStaticMesh* Mesh03, float Mesh03Width, class UMaterialInterface* Mesh03Mat01, class UMaterialInterface* Mesh03Mat02, class UStaticMesh* Mesh04, float Mesh04Width, class UMaterialInterface* Mesh04Mat01, class UMaterialInterface* Mesh04Mat02, class UStaticMesh* EndMesh, float EndMeshWidth, class UMaterialInterface* EndMeshMat01, class UMaterialInterface* EndMeshMat02);
	void MessageComponentToBeginCut_RC(class UPrimitiveComponent* HitComponent);
	void Mobilise_End_RC();
	void Mobilise_Start_RC();
	void OnCutResTimer();
	void OnTimerEnd();
	void ResetCutLoop();
	void RuntimeUpdate();
	void SetUserSplineEndLocation_RC(class USplineComponent* UserSpline, const struct FVector& Location);
	void SetUserSplineStartLocation_RC(class USplineComponent* UserSpline, const struct FVector& Location);
	bool ShrinkRope_RC(class UPrimitiveComponent* ShrinkLocation);
	void ShrinkRopeImplement();
	void UpdateSplOrCut();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Rope_Cutting">();
	}
	static class URope_Cutting* GetDefaultObj()
	{
		return GetDefaultObjImpl<URope_Cutting>();
	}
};
static_assert(alignof(URope_Cutting) == 0x000010, "Wrong alignment on URope_Cutting");
static_assert(sizeof(URope_Cutting) == 0x0005D0, "Wrong size on URope_Cutting");
static_assert(offsetof(URope_Cutting, StartMeshTypeDARC) == 0x0002A0, "Member 'URope_Cutting::StartMeshTypeDARC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, Mesh01TypeDARC) == 0x0002A8, "Member 'URope_Cutting::Mesh01TypeDARC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, Mesh02TypeDARC) == 0x0002B0, "Member 'URope_Cutting::Mesh02TypeDARC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, Mesh03TypeDARC) == 0x0002B8, "Member 'URope_Cutting::Mesh03TypeDARC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, Mesh04TypeDARC) == 0x0002C0, "Member 'URope_Cutting::Mesh04TypeDARC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, EndMeshTypeDARC) == 0x0002C8, "Member 'URope_Cutting::EndMeshTypeDARC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, EmitterDefaultTypeDARC) == 0x0002D0, "Member 'URope_Cutting::EmitterDefaultTypeDARC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, SoundDefaultTypeDARC) == 0x0002D8, "Member 'URope_Cutting::SoundDefaultTypeDARC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, TrackerArrayARC) == 0x0002E0, "Member 'URope_Cutting::TrackerArrayARC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, AttachedStartConstraintsARC) == 0x0002F0, "Member 'URope_Cutting::AttachedStartConstraintsARC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, AttachedEndConstraintsARC) == 0x000300, "Member 'URope_Cutting::AttachedEndConstraintsARC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, StartPrimitiveASRC) == 0x000310, "Member 'URope_Cutting::StartPrimitiveASRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, EndPrimitiveAERC) == 0x000318, "Member 'URope_Cutting::EndPrimitiveAERC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, SplineMeshPRC) == 0x000320, "Member 'URope_Cutting::SplineMeshPRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, EmitterPRC) == 0x000328, "Member 'URope_Cutting::EmitterPRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, SoundPRC) == 0x000330, "Member 'URope_Cutting::SoundPRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, SphereCollPRC) == 0x000338, "Member 'URope_Cutting::SphereCollPRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, PhysicsConstraintPRC) == 0x000340, "Member 'URope_Cutting::PhysicsConstraintPRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, DataTracker) == 0x000348, "Member 'URope_Cutting::DataTracker' has a wrong offset!");
static_assert(offsetof(URope_Cutting, SplinePRC) == 0x000350, "Member 'URope_Cutting::SplinePRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, UserSplinePRC) == 0x000358, "Member 'URope_Cutting::UserSplinePRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, SplineBuildPRC) == 0x000360, "Member 'URope_Cutting::SplineBuildPRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, ReceivingTrackerCVRC) == 0x000368, "Member 'URope_Cutting::ReceivingTrackerCVRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, DonatingTrackerCVRC) == 0x000370, "Member 'URope_Cutting::DonatingTrackerCVRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, ReceivingSplineCVRC) == 0x000378, "Member 'URope_Cutting::ReceivingSplineCVRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, DonatingsplineCVRC) == 0x000380, "Member 'URope_Cutting::DonatingsplineCVRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, HitPhysicsConstraintCVRC) == 0x000388, "Member 'URope_Cutting::HitPhysicsConstraintCVRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, ReceivingCollisionRC) == 0x000390, "Member 'URope_Cutting::ReceivingCollisionRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, ReplacementCollisionRC) == 0x000398, "Member 'URope_Cutting::ReplacementCollisionRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, InverseRuntimeUpdateRateRTRC) == 0x0003A0, "Member 'URope_Cutting::InverseRuntimeUpdateRateRTRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, PositionNumberRTRC) == 0x0003A4, "Member 'URope_Cutting::PositionNumberRTRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, NextPositionNumberRTRC) == 0x0003A8, "Member 'URope_Cutting::NextPositionNumberRTRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, IsLastOfLengthRTRC) == 0x0003AC, "Member 'URope_Cutting::IsLastOfLengthRTRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, StartSocketASRC) == 0x0003B0, "Member 'URope_Cutting::StartSocketASRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, StartBoneASRC) == 0x0003B8, "Member 'URope_Cutting::StartBoneASRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, StartAttachAngularSwing1LimitASRC) == 0x0003C0, "Member 'URope_Cutting::StartAttachAngularSwing1LimitASRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, StartAttachAngularSwing2LimitASRC) == 0x0003C4, "Member 'URope_Cutting::StartAttachAngularSwing2LimitASRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, StartAttachAngularTwistLimitASRC) == 0x0003C8, "Member 'URope_Cutting::StartAttachAngularTwistLimitASRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, StartAttachPositionStrengthASRC) == 0x0003CC, "Member 'URope_Cutting::StartAttachPositionStrengthASRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, StartAttachVelocityStrengthASRC) == 0x0003D0, "Member 'URope_Cutting::StartAttachVelocityStrengthASRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, StartAttachLoopCountASRC) == 0x0003D4, "Member 'URope_Cutting::StartAttachLoopCountASRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, StartAttachedASRC) == 0x0003D8, "Member 'URope_Cutting::StartAttachedASRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, FirstCollImmobileSRC) == 0x0003D9, "Member 'URope_Cutting::FirstCollImmobileSRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, FirstCollImmobileRotationASRC) == 0x0003E0, "Member 'URope_Cutting::FirstCollImmobileRotationASRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, FirstCollImmobileLocationASRC) == 0x0003F8, "Member 'URope_Cutting::FirstCollImmobileLocationASRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, EndSocketAERC) == 0x000410, "Member 'URope_Cutting::EndSocketAERC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, EndBoneAERC) == 0x000418, "Member 'URope_Cutting::EndBoneAERC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, EndAttachAngularSwing1LimitAERC) == 0x000420, "Member 'URope_Cutting::EndAttachAngularSwing1LimitAERC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, EndAttachAngularSwing2LimitAERC) == 0x000424, "Member 'URope_Cutting::EndAttachAngularSwing2LimitAERC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, EndAttachAngularTwistLimitAERC) == 0x000428, "Member 'URope_Cutting::EndAttachAngularTwistLimitAERC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, EndAttachPositionStrengthAERC) == 0x00042C, "Member 'URope_Cutting::EndAttachPositionStrengthAERC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, EndAttachVelocityStrengthAERC) == 0x000430, "Member 'URope_Cutting::EndAttachVelocityStrengthAERC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, IsEndImmobileAERC) == 0x000434, "Member 'URope_Cutting::IsEndImmobileAERC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, EndAttachedAERC) == 0x000435, "Member 'URope_Cutting::EndAttachedAERC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, LastCollImmobileAERC) == 0x000436, "Member 'URope_Cutting::LastCollImmobileAERC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, LastCollImmobileRotationAERC) == 0x000438, "Member 'URope_Cutting::LastCollImmobileRotationAERC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, LastCollImmobileLocationAERC) == 0x000450, "Member 'URope_Cutting::LastCollImmobileLocationAERC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, CollUnitScaleCRC) == 0x000468, "Member 'URope_Cutting::CollUnitScaleCRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, AngularDampeningCRC) == 0x00046C, "Member 'URope_Cutting::AngularDampeningCRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, LinearDampeningCRC) == 0x000470, "Member 'URope_Cutting::LinearDampeningCRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, VelocitySolverCRC) == 0x000474, "Member 'URope_Cutting::VelocitySolverCRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, PositionSolverCRC) == 0x000478, "Member 'URope_Cutting::PositionSolverCRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, StabilizationThresholdMultiplierCRC) == 0x00047C, "Member 'URope_Cutting::StabilizationThresholdMultiplierCRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, SleepThresholdMultiplierCRC) == 0x000480, "Member 'URope_Cutting::SleepThresholdMultiplierCRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, InertiaTensorScaleCRC) == 0x000484, "Member 'URope_Cutting::InertiaTensorScaleCRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, GenericSharedTagCRC) == 0x000488, "Member 'URope_Cutting::GenericSharedTagCRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, MassCRC) == 0x000490, "Member 'URope_Cutting::MassCRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, MassScaleCRC) == 0x000494, "Member 'URope_Cutting::MassScaleCRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, AngularDrivePositionStrengthConsRC) == 0x000498, "Member 'URope_Cutting::AngularDrivePositionStrengthConsRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, AngularDriveVelocityStrengthConsRC) == 0x00049C, "Member 'URope_Cutting::AngularDriveVelocityStrengthConsRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, SetAngularSwing1LimitConsRC) == 0x0004A0, "Member 'URope_Cutting::SetAngularSwing1LimitConsRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, SetAngularSwing2LimitConsRC) == 0x0004A4, "Member 'URope_Cutting::SetAngularSwing2LimitConsRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, SetAngularTwistLimitConsRC) == 0x0004A8, "Member 'URope_Cutting::SetAngularTwistLimitConsRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, AllowCutMessageCVRC) == 0x0004AC, "Member 'URope_Cutting::AllowCutMessageCVRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, BeginCutCVRC) == 0x0004AD, "Member 'URope_Cutting::BeginCutCVRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, CutInProgressCVRC) == 0x0004AE, "Member 'URope_Cutting::CutInProgressCVRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, CutCounterCVRC) == 0x0004B0, "Member 'URope_Cutting::CutCounterCVRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, InstanceSpecificIDStrBRC) == 0x0004B8, "Member 'URope_Cutting::InstanceSpecificIDStrBRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, InstanceSpecificIDTagBRC) == 0x0004C8, "Member 'URope_Cutting::InstanceSpecificIDTagBRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, UnitLengthBVRC) == 0x0004D0, "Member 'URope_Cutting::UnitLengthBVRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, UserSplineSetToSocketLocBRC) == 0x0004D4, "Member 'URope_Cutting::UserSplineSetToSocketLocBRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, BlockCuttingBRC) == 0x0004D5, "Member 'URope_Cutting::BlockCuttingBRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, HasBuiltBRC) == 0x0004D6, "Member 'URope_Cutting::HasBuiltBRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, StartMeshWidthSMRC) == 0x0004D8, "Member 'URope_Cutting::StartMeshWidthSMRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, StartMeshMaterial01SMRC) == 0x0004E0, "Member 'URope_Cutting::StartMeshMaterial01SMRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, StartMeshMaterial02SMRC) == 0x0004E8, "Member 'URope_Cutting::StartMeshMaterial02SMRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, Mesh01WidthSMRC) == 0x0004F0, "Member 'URope_Cutting::Mesh01WidthSMRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, Mesh01Material01SMRC) == 0x0004F8, "Member 'URope_Cutting::Mesh01Material01SMRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, Mesh01Material02SMRC) == 0x000500, "Member 'URope_Cutting::Mesh01Material02SMRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, Mesh02WidthSMRC) == 0x000508, "Member 'URope_Cutting::Mesh02WidthSMRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, Mesh02Material01SMRC) == 0x000510, "Member 'URope_Cutting::Mesh02Material01SMRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, Mesh02Material02SMRC) == 0x000518, "Member 'URope_Cutting::Mesh02Material02SMRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, Mesh03WidthSMRC) == 0x000520, "Member 'URope_Cutting::Mesh03WidthSMRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, Mesh03Material01SMRC) == 0x000528, "Member 'URope_Cutting::Mesh03Material01SMRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, Mesh03Material02SMRC) == 0x000530, "Member 'URope_Cutting::Mesh03Material02SMRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, Mesh04WidthSMRC) == 0x000538, "Member 'URope_Cutting::Mesh04WidthSMRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, Mesh04Material01SMRC) == 0x000540, "Member 'URope_Cutting::Mesh04Material01SMRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, Mesh04Material02SMRC) == 0x000548, "Member 'URope_Cutting::Mesh04Material02SMRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, EndMeshWidthSMRC) == 0x000550, "Member 'URope_Cutting::EndMeshWidthSMRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, EndMeshMaterial01SMRC) == 0x000558, "Member 'URope_Cutting::EndMeshMaterial01SMRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, EndMeshMaterial02SMRC) == 0x000560, "Member 'URope_Cutting::EndMeshMaterial02SMRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, BeginGrowGRC) == 0x000568, "Member 'URope_Cutting::BeginGrowGRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, GrowLoopCountGRC) == 0x00056C, "Member 'URope_Cutting::GrowLoopCountGRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, GrowMeshSelectCountGRC) == 0x000570, "Member 'URope_Cutting::GrowMeshSelectCountGRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, GrowLocationGRC) == 0x000578, "Member 'URope_Cutting::GrowLocationGRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, BeginShrinkSRC) == 0x000590, "Member 'URope_Cutting::BeginShrinkSRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, FirstSplineSRC) == 0x000598, "Member 'URope_Cutting::FirstSplineSRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, ShrinkLocationSRC) == 0x0005A0, "Member 'URope_Cutting::ShrinkLocationSRC' has a wrong offset!");
static_assert(offsetof(URope_Cutting, UsedInGameEG) == 0x0005B8, "Member 'URope_Cutting::UsedInGameEG' has a wrong offset!");

}

