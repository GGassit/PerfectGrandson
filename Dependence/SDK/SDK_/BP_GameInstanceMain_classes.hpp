#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameInstanceMain

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "EDifficulty_structs.hpp"
#include "Granny_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GameInstanceMain.BP_GameInstanceMain_C
// 0x00A8 (0x0268 - 0x01C0)
class UBP_GameInstanceMain_C final : public UGrannyInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x01C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	EDifficulty                                   CurrentDifficulty;                                 // 0x01C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Darker;                                            // 0x01C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ExtraLocks;                                        // 0x01CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Music;                                             // 0x01CB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Nightmare;                                         // 0x01CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_224E[0x3];                                     // 0x01CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Mouse;                                             // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Resolution;                                        // 0x01D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FOV;                                               // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Gamma;                                             // 0x01E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FirstEntry;                                        // 0x01F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_224F[0x7];                                     // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        UiVolume;                                          // 0x01F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MusicVolume;                                       // 0x0200(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GameVolume;                                        // 0x0208(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<double>                                FPSGraph;                                          // 0x0210(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        PoolSize;                                          // 0x0220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GameSeed;                                          // 0x0228(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2250[0x4];                                     // 0x022C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        StartGameTime;                                     // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LastSpeedrunResult;                                // 0x0238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FovMultiplier;                                     // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDiscordRpc*                            DiscordRpc;                                        // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FString                                 DiscordAppid;                                      // 0x0250(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class UBP_SaveGame_C*                         SaveGameObject;                                    // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ApplySettings();
	void CustomEvent();
	void Escaped();
	void ExecuteUbergraph_BP_GameInstanceMain(int32 EntryPoint);
	void GetCurrentSpeedrunResult(double* Seconds);
	class UGameUserSettings* GetSettings();
	void InitDiscord();
	void LowAvgFPS(bool* Value, double* Average);
	void OnFailure_075355D74B526038AD4AF2A85281CCE3(class FName WrittenAchievementName, float WrittenProgress, int32 WrittenUserTag);
	void OnFailure_143244F141C74E2AC76E828B60BD5C6F(class FName WrittenAchievementName, float WrittenProgress, int32 WrittenUserTag);
	void OnFailure_38EF5FA0456B379A8BE7D585D5C04FA7();
	void OnFailure_C2308B8D4281333C3D8DCAA2C2AE7282();
	void OnFailure_C367236C42E2CA38BF3CD7BB1D916939();
	void OnFailure_D3ECC69C4358FB77BFC416A553ADEF24(class FName WrittenAchievementName, float WrittenProgress, int32 WrittenUserTag);
	void OnSuccess_075355D74B526038AD4AF2A85281CCE3(class FName WrittenAchievementName, float WrittenProgress, int32 WrittenUserTag);
	void OnSuccess_143244F141C74E2AC76E828B60BD5C6F(class FName WrittenAchievementName, float WrittenProgress, int32 WrittenUserTag);
	void OnSuccess_38EF5FA0456B379A8BE7D585D5C04FA7();
	void OnSuccess_C2308B8D4281333C3D8DCAA2C2AE7282();
	void OnSuccess_C367236C42E2CA38BF3CD7BB1D916939();
	void OnSuccess_D3ECC69C4358FB77BFC416A553ADEF24(class FName WrittenAchievementName, float WrittenProgress, int32 WrittenUserTag);
	void PENIS();
	void ReceiveInit();
	void ReceiveShutdown();
	void SaveGame();
	void StartGame();
	void UpdateDiscordRPC();
	void WriteFPSData();
	void WriteGameStartTime();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GameInstanceMain_C">();
	}
	static class UBP_GameInstanceMain_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_GameInstanceMain_C>();
	}
};
static_assert(alignof(UBP_GameInstanceMain_C) == 0x000008, "Wrong alignment on UBP_GameInstanceMain_C");
static_assert(sizeof(UBP_GameInstanceMain_C) == 0x000268, "Wrong size on UBP_GameInstanceMain_C");
static_assert(offsetof(UBP_GameInstanceMain_C, UberGraphFrame) == 0x0001C0, "Member 'UBP_GameInstanceMain_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_GameInstanceMain_C, CurrentDifficulty) == 0x0001C8, "Member 'UBP_GameInstanceMain_C::CurrentDifficulty' has a wrong offset!");
static_assert(offsetof(UBP_GameInstanceMain_C, Darker) == 0x0001C9, "Member 'UBP_GameInstanceMain_C::Darker' has a wrong offset!");
static_assert(offsetof(UBP_GameInstanceMain_C, ExtraLocks) == 0x0001CA, "Member 'UBP_GameInstanceMain_C::ExtraLocks' has a wrong offset!");
static_assert(offsetof(UBP_GameInstanceMain_C, Music) == 0x0001CB, "Member 'UBP_GameInstanceMain_C::Music' has a wrong offset!");
static_assert(offsetof(UBP_GameInstanceMain_C, Nightmare) == 0x0001CC, "Member 'UBP_GameInstanceMain_C::Nightmare' has a wrong offset!");
static_assert(offsetof(UBP_GameInstanceMain_C, Mouse) == 0x0001D0, "Member 'UBP_GameInstanceMain_C::Mouse' has a wrong offset!");
static_assert(offsetof(UBP_GameInstanceMain_C, Resolution) == 0x0001D8, "Member 'UBP_GameInstanceMain_C::Resolution' has a wrong offset!");
static_assert(offsetof(UBP_GameInstanceMain_C, FOV) == 0x0001E0, "Member 'UBP_GameInstanceMain_C::FOV' has a wrong offset!");
static_assert(offsetof(UBP_GameInstanceMain_C, Gamma) == 0x0001E8, "Member 'UBP_GameInstanceMain_C::Gamma' has a wrong offset!");
static_assert(offsetof(UBP_GameInstanceMain_C, FirstEntry) == 0x0001F0, "Member 'UBP_GameInstanceMain_C::FirstEntry' has a wrong offset!");
static_assert(offsetof(UBP_GameInstanceMain_C, UiVolume) == 0x0001F8, "Member 'UBP_GameInstanceMain_C::UiVolume' has a wrong offset!");
static_assert(offsetof(UBP_GameInstanceMain_C, MusicVolume) == 0x000200, "Member 'UBP_GameInstanceMain_C::MusicVolume' has a wrong offset!");
static_assert(offsetof(UBP_GameInstanceMain_C, GameVolume) == 0x000208, "Member 'UBP_GameInstanceMain_C::GameVolume' has a wrong offset!");
static_assert(offsetof(UBP_GameInstanceMain_C, FPSGraph) == 0x000210, "Member 'UBP_GameInstanceMain_C::FPSGraph' has a wrong offset!");
static_assert(offsetof(UBP_GameInstanceMain_C, PoolSize) == 0x000220, "Member 'UBP_GameInstanceMain_C::PoolSize' has a wrong offset!");
static_assert(offsetof(UBP_GameInstanceMain_C, GameSeed) == 0x000228, "Member 'UBP_GameInstanceMain_C::GameSeed' has a wrong offset!");
static_assert(offsetof(UBP_GameInstanceMain_C, StartGameTime) == 0x000230, "Member 'UBP_GameInstanceMain_C::StartGameTime' has a wrong offset!");
static_assert(offsetof(UBP_GameInstanceMain_C, LastSpeedrunResult) == 0x000238, "Member 'UBP_GameInstanceMain_C::LastSpeedrunResult' has a wrong offset!");
static_assert(offsetof(UBP_GameInstanceMain_C, FovMultiplier) == 0x000240, "Member 'UBP_GameInstanceMain_C::FovMultiplier' has a wrong offset!");
static_assert(offsetof(UBP_GameInstanceMain_C, DiscordRpc) == 0x000248, "Member 'UBP_GameInstanceMain_C::DiscordRpc' has a wrong offset!");
static_assert(offsetof(UBP_GameInstanceMain_C, DiscordAppid) == 0x000250, "Member 'UBP_GameInstanceMain_C::DiscordAppid' has a wrong offset!");
static_assert(offsetof(UBP_GameInstanceMain_C, SaveGameObject) == 0x000260, "Member 'UBP_GameInstanceMain_C::SaveGameObject' has a wrong offset!");

}

