#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CoreInteractable

#include "Basic.hpp"

#include "ST_Name_Text_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CoreInteractable.BP_CoreInteractable_C
// 0x0048 (0x02D8 - 0x0290)
class ABP_CoreInteractable_C : public AActor
{
public:
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowDisplayName;                                   // 0x0298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29E1[0x7];                                     // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ActorDisplayName;                                  // 0x02A0(0x0018)(Edit, BlueprintVisible)
	bool                                          ShowComponentDisplayName;                          // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29E2[0x7];                                     // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_Name_Text>                  ComponentsDisplayNames;                            // 0x02C0(0x0010)(Edit, BlueprintVisible)
	int32                                         ComponentTagNameIndex;                             // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CoreInteractable_C">();
	}
	static class ABP_CoreInteractable_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CoreInteractable_C>();
	}
};
static_assert(alignof(ABP_CoreInteractable_C) == 0x000008, "Wrong alignment on ABP_CoreInteractable_C");
static_assert(sizeof(ABP_CoreInteractable_C) == 0x0002D8, "Wrong size on ABP_CoreInteractable_C");
static_assert(offsetof(ABP_CoreInteractable_C, DefaultSceneRoot) == 0x000290, "Member 'ABP_CoreInteractable_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_CoreInteractable_C, ShowDisplayName) == 0x000298, "Member 'ABP_CoreInteractable_C::ShowDisplayName' has a wrong offset!");
static_assert(offsetof(ABP_CoreInteractable_C, ActorDisplayName) == 0x0002A0, "Member 'ABP_CoreInteractable_C::ActorDisplayName' has a wrong offset!");
static_assert(offsetof(ABP_CoreInteractable_C, ShowComponentDisplayName) == 0x0002B8, "Member 'ABP_CoreInteractable_C::ShowComponentDisplayName' has a wrong offset!");
static_assert(offsetof(ABP_CoreInteractable_C, ComponentsDisplayNames) == 0x0002C0, "Member 'ABP_CoreInteractable_C::ComponentsDisplayNames' has a wrong offset!");
static_assert(offsetof(ABP_CoreInteractable_C, ComponentTagNameIndex) == 0x0002D0, "Member 'ABP_CoreInteractable_C::ComponentTagNameIndex' has a wrong offset!");

}

